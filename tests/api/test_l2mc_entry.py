
from pprint import pprint

import pytest


class TestSaiL2McEntry:
    # object with no parents

    def test_l2mc_entry_create(self, npu):

        commands = [{'name': 'l2mc_entry_1', 'op': 'create', 'type': 'SAI_OBJECT_TYPE_L2MC_ENTRY', 'attributes': ['SAI_L2MC_ENTRY_ATTR_PACKET_ACTION', 'SAI_PACKET_ACTION_DROP'], 'key': {'switch_id': '$SWITCH_ID', 'bv_id': 'TODO', 'type': 'TODO', 'destination': 'TODO', 'source': 'TODO'}}]

        results = [*npu.process_commands(commands)]
        print('======= SAI commands RETURN values create =======')
        pprint(results)



    @pytest.mark.dependency(name="test_sai_acl_counter_attr_packets_set")
    def test_sai_acl_counter_attr_packets_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_COUNTER_ATTR_PACKETS", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_counter_attr_packets_set"])
    def test_sai_acl_counter_attr_packets_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_COUNTER_ATTR_PACKETS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_counter_attr_bytes_set")
    def test_sai_acl_counter_attr_bytes_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_COUNTER_ATTR_BYTES", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_counter_attr_bytes_set"])
    def test_sai_acl_counter_attr_bytes_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_COUNTER_ATTR_BYTES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_counter_attr_label_set")
    def test_sai_acl_counter_attr_label_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_COUNTER_ATTR_LABEL", '""']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_counter_attr_label_set"])
    def test_sai_acl_counter_attr_label_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_COUNTER_ATTR_LABEL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '""', 'Get error, expected "" but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_priority_set")
    def test_sai_acl_entry_attr_priority_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_PRIORITY", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_priority_set"])
    def test_sai_acl_entry_attr_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_admin_state_set")
    def test_sai_acl_entry_attr_admin_state_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ADMIN_STATE", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_admin_state_set"])
    def test_sai_acl_entry_attr_admin_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ADMIN_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_src_ipv6_set")
    def test_sai_acl_entry_attr_field_src_ipv6_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_src_ipv6_set"])
    def test_sai_acl_entry_attr_field_src_ipv6_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_src_ipv6_word3_set")
    def test_sai_acl_entry_attr_field_src_ipv6_word3_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD3", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_src_ipv6_word3_set"])
    def test_sai_acl_entry_attr_field_src_ipv6_word3_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD3"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_src_ipv6_word2_set")
    def test_sai_acl_entry_attr_field_src_ipv6_word2_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD2", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_src_ipv6_word2_set"])
    def test_sai_acl_entry_attr_field_src_ipv6_word2_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD2"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_src_ipv6_word1_set")
    def test_sai_acl_entry_attr_field_src_ipv6_word1_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD1", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_src_ipv6_word1_set"])
    def test_sai_acl_entry_attr_field_src_ipv6_word1_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD1"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_src_ipv6_word0_set")
    def test_sai_acl_entry_attr_field_src_ipv6_word0_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD0", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_src_ipv6_word0_set"])
    def test_sai_acl_entry_attr_field_src_ipv6_word0_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD0"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_dst_ipv6_set")
    def test_sai_acl_entry_attr_field_dst_ipv6_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_dst_ipv6_set"])
    def test_sai_acl_entry_attr_field_dst_ipv6_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_dst_ipv6_word3_set")
    def test_sai_acl_entry_attr_field_dst_ipv6_word3_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD3", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_dst_ipv6_word3_set"])
    def test_sai_acl_entry_attr_field_dst_ipv6_word3_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD3"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_dst_ipv6_word2_set")
    def test_sai_acl_entry_attr_field_dst_ipv6_word2_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD2", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_dst_ipv6_word2_set"])
    def test_sai_acl_entry_attr_field_dst_ipv6_word2_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD2"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_dst_ipv6_word1_set")
    def test_sai_acl_entry_attr_field_dst_ipv6_word1_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD1", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_dst_ipv6_word1_set"])
    def test_sai_acl_entry_attr_field_dst_ipv6_word1_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD1"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_dst_ipv6_word0_set")
    def test_sai_acl_entry_attr_field_dst_ipv6_word0_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD0", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_dst_ipv6_word0_set"])
    def test_sai_acl_entry_attr_field_dst_ipv6_word0_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD0"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_inner_src_ipv6_set")
    def test_sai_acl_entry_attr_field_inner_src_ipv6_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IPV6", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_inner_src_ipv6_set"])
    def test_sai_acl_entry_attr_field_inner_src_ipv6_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IPV6"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_inner_dst_ipv6_set")
    def test_sai_acl_entry_attr_field_inner_dst_ipv6_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IPV6", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_inner_dst_ipv6_set"])
    def test_sai_acl_entry_attr_field_inner_dst_ipv6_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IPV6"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_src_mac_set")
    def test_sai_acl_entry_attr_field_src_mac_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_src_mac_set"])
    def test_sai_acl_entry_attr_field_src_mac_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_dst_mac_set")
    def test_sai_acl_entry_attr_field_dst_mac_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_dst_mac_set"])
    def test_sai_acl_entry_attr_field_dst_mac_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_src_ip_set")
    def test_sai_acl_entry_attr_field_src_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_src_ip_set"])
    def test_sai_acl_entry_attr_field_src_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_dst_ip_set")
    def test_sai_acl_entry_attr_field_dst_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_IP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_dst_ip_set"])
    def test_sai_acl_entry_attr_field_dst_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DST_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_inner_src_ip_set")
    def test_sai_acl_entry_attr_field_inner_src_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_inner_src_ip_set"])
    def test_sai_acl_entry_attr_field_inner_src_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_inner_dst_ip_set")
    def test_sai_acl_entry_attr_field_inner_dst_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_inner_dst_ip_set"])
    def test_sai_acl_entry_attr_field_inner_dst_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_in_ports_set")
    def test_sai_acl_entry_attr_field_in_ports_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IN_PORTS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_in_ports_set"])
    def test_sai_acl_entry_attr_field_in_ports_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IN_PORTS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_out_ports_set")
    def test_sai_acl_entry_attr_field_out_ports_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORTS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_out_ports_set"])
    def test_sai_acl_entry_attr_field_out_ports_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORTS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_in_port_set")
    def test_sai_acl_entry_attr_field_in_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_in_port_set"])
    def test_sai_acl_entry_attr_field_in_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_out_port_set")
    def test_sai_acl_entry_attr_field_out_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_out_port_set"])
    def test_sai_acl_entry_attr_field_out_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_src_port_set")
    def test_sai_acl_entry_attr_field_src_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_PORT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_src_port_set"])
    def test_sai_acl_entry_attr_field_src_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_SRC_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_outer_vlan_id_set")
    def test_sai_acl_entry_attr_field_outer_vlan_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_outer_vlan_id_set"])
    def test_sai_acl_entry_attr_field_outer_vlan_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_outer_vlan_pri_set")
    def test_sai_acl_entry_attr_field_outer_vlan_pri_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_outer_vlan_pri_set"])
    def test_sai_acl_entry_attr_field_outer_vlan_pri_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_outer_vlan_cfi_set")
    def test_sai_acl_entry_attr_field_outer_vlan_cfi_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_outer_vlan_cfi_set"])
    def test_sai_acl_entry_attr_field_outer_vlan_cfi_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_inner_vlan_id_set")
    def test_sai_acl_entry_attr_field_inner_vlan_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_inner_vlan_id_set"])
    def test_sai_acl_entry_attr_field_inner_vlan_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_inner_vlan_pri_set")
    def test_sai_acl_entry_attr_field_inner_vlan_pri_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_inner_vlan_pri_set"])
    def test_sai_acl_entry_attr_field_inner_vlan_pri_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_inner_vlan_cfi_set")
    def test_sai_acl_entry_attr_field_inner_vlan_cfi_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_inner_vlan_cfi_set"])
    def test_sai_acl_entry_attr_field_inner_vlan_cfi_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_l4_src_port_set")
    def test_sai_acl_entry_attr_field_l4_src_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_l4_src_port_set"])
    def test_sai_acl_entry_attr_field_l4_src_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_l4_dst_port_set")
    def test_sai_acl_entry_attr_field_l4_dst_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_l4_dst_port_set"])
    def test_sai_acl_entry_attr_field_l4_dst_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_inner_l4_src_port_set")
    def test_sai_acl_entry_attr_field_inner_l4_src_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_SRC_PORT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_inner_l4_src_port_set"])
    def test_sai_acl_entry_attr_field_inner_l4_src_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_SRC_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_inner_l4_dst_port_set")
    def test_sai_acl_entry_attr_field_inner_l4_dst_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_DST_PORT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_inner_l4_dst_port_set"])
    def test_sai_acl_entry_attr_field_inner_l4_dst_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_DST_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_ether_type_set")
    def test_sai_acl_entry_attr_field_ether_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_ether_type_set"])
    def test_sai_acl_entry_attr_field_ether_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_inner_ether_type_set")
    def test_sai_acl_entry_attr_field_inner_ether_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_ETHER_TYPE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_inner_ether_type_set"])
    def test_sai_acl_entry_attr_field_inner_ether_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_ETHER_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_ip_protocol_set")
    def test_sai_acl_entry_attr_field_ip_protocol_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_ip_protocol_set"])
    def test_sai_acl_entry_attr_field_ip_protocol_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_inner_ip_protocol_set")
    def test_sai_acl_entry_attr_field_inner_ip_protocol_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_IP_PROTOCOL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_inner_ip_protocol_set"])
    def test_sai_acl_entry_attr_field_inner_ip_protocol_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_INNER_IP_PROTOCOL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_ip_identification_set")
    def test_sai_acl_entry_attr_field_ip_identification_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IP_IDENTIFICATION", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_ip_identification_set"])
    def test_sai_acl_entry_attr_field_ip_identification_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IP_IDENTIFICATION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_dscp_set")
    def test_sai_acl_entry_attr_field_dscp_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DSCP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_dscp_set"])
    def test_sai_acl_entry_attr_field_dscp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_DSCP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_ecn_set")
    def test_sai_acl_entry_attr_field_ecn_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ECN", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_ecn_set"])
    def test_sai_acl_entry_attr_field_ecn_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ECN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_ttl_set")
    def test_sai_acl_entry_attr_field_ttl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_TTL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_ttl_set"])
    def test_sai_acl_entry_attr_field_ttl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_TTL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_tos_set")
    def test_sai_acl_entry_attr_field_tos_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_TOS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_tos_set"])
    def test_sai_acl_entry_attr_field_tos_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_TOS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_ip_flags_set")
    def test_sai_acl_entry_attr_field_ip_flags_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IP_FLAGS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_ip_flags_set"])
    def test_sai_acl_entry_attr_field_ip_flags_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IP_FLAGS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_tcp_flags_set")
    def test_sai_acl_entry_attr_field_tcp_flags_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_tcp_flags_set"])
    def test_sai_acl_entry_attr_field_tcp_flags_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_acl_ip_type_set")
    def test_sai_acl_entry_attr_field_acl_ip_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_acl_ip_type_set"])
    def test_sai_acl_entry_attr_field_acl_ip_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_acl_ip_frag_set")
    def test_sai_acl_entry_attr_field_acl_ip_frag_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_acl_ip_frag_set"])
    def test_sai_acl_entry_attr_field_acl_ip_frag_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_ipv6_flow_label_set")
    def test_sai_acl_entry_attr_field_ipv6_flow_label_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_ipv6_flow_label_set"])
    def test_sai_acl_entry_attr_field_ipv6_flow_label_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_tc_set")
    def test_sai_acl_entry_attr_field_tc_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_TC", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_tc_set"])
    def test_sai_acl_entry_attr_field_tc_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_TC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_icmp_type_set")
    def test_sai_acl_entry_attr_field_icmp_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_icmp_type_set"])
    def test_sai_acl_entry_attr_field_icmp_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_icmp_code_set")
    def test_sai_acl_entry_attr_field_icmp_code_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_icmp_code_set"])
    def test_sai_acl_entry_attr_field_icmp_code_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_icmpv6_type_set")
    def test_sai_acl_entry_attr_field_icmpv6_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_icmpv6_type_set"])
    def test_sai_acl_entry_attr_field_icmpv6_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_icmpv6_code_set")
    def test_sai_acl_entry_attr_field_icmpv6_code_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_icmpv6_code_set"])
    def test_sai_acl_entry_attr_field_icmpv6_code_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_packet_vlan_set")
    def test_sai_acl_entry_attr_field_packet_vlan_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_packet_vlan_set"])
    def test_sai_acl_entry_attr_field_packet_vlan_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_tunnel_vni_set")
    def test_sai_acl_entry_attr_field_tunnel_vni_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_TUNNEL_VNI", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_tunnel_vni_set"])
    def test_sai_acl_entry_attr_field_tunnel_vni_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_TUNNEL_VNI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_has_vlan_tag_set")
    def test_sai_acl_entry_attr_field_has_vlan_tag_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_HAS_VLAN_TAG", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_has_vlan_tag_set"])
    def test_sai_acl_entry_attr_field_has_vlan_tag_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_HAS_VLAN_TAG"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_macsec_sci_set")
    def test_sai_acl_entry_attr_field_macsec_sci_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MACSEC_SCI", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_macsec_sci_set"])
    def test_sai_acl_entry_attr_field_macsec_sci_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MACSEC_SCI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label0_label_set")
    def test_sai_acl_entry_attr_field_mpls_label0_label_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label0_label_set"])
    def test_sai_acl_entry_attr_field_mpls_label0_label_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label0_ttl_set")
    def test_sai_acl_entry_attr_field_mpls_label0_ttl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_TTL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label0_ttl_set"])
    def test_sai_acl_entry_attr_field_mpls_label0_ttl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_TTL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label0_exp_set")
    def test_sai_acl_entry_attr_field_mpls_label0_exp_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_EXP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label0_exp_set"])
    def test_sai_acl_entry_attr_field_mpls_label0_exp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_EXP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label0_bos_set")
    def test_sai_acl_entry_attr_field_mpls_label0_bos_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_BOS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label0_bos_set"])
    def test_sai_acl_entry_attr_field_mpls_label0_bos_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_BOS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label1_label_set")
    def test_sai_acl_entry_attr_field_mpls_label1_label_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_LABEL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label1_label_set"])
    def test_sai_acl_entry_attr_field_mpls_label1_label_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_LABEL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label1_ttl_set")
    def test_sai_acl_entry_attr_field_mpls_label1_ttl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_TTL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label1_ttl_set"])
    def test_sai_acl_entry_attr_field_mpls_label1_ttl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_TTL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label1_exp_set")
    def test_sai_acl_entry_attr_field_mpls_label1_exp_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_EXP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label1_exp_set"])
    def test_sai_acl_entry_attr_field_mpls_label1_exp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_EXP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label1_bos_set")
    def test_sai_acl_entry_attr_field_mpls_label1_bos_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_BOS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label1_bos_set"])
    def test_sai_acl_entry_attr_field_mpls_label1_bos_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_BOS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label2_label_set")
    def test_sai_acl_entry_attr_field_mpls_label2_label_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_LABEL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label2_label_set"])
    def test_sai_acl_entry_attr_field_mpls_label2_label_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_LABEL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label2_ttl_set")
    def test_sai_acl_entry_attr_field_mpls_label2_ttl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_TTL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label2_ttl_set"])
    def test_sai_acl_entry_attr_field_mpls_label2_ttl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_TTL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label2_exp_set")
    def test_sai_acl_entry_attr_field_mpls_label2_exp_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_EXP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label2_exp_set"])
    def test_sai_acl_entry_attr_field_mpls_label2_exp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_EXP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label2_bos_set")
    def test_sai_acl_entry_attr_field_mpls_label2_bos_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_BOS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label2_bos_set"])
    def test_sai_acl_entry_attr_field_mpls_label2_bos_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_BOS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label3_label_set")
    def test_sai_acl_entry_attr_field_mpls_label3_label_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_LABEL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label3_label_set"])
    def test_sai_acl_entry_attr_field_mpls_label3_label_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_LABEL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label3_ttl_set")
    def test_sai_acl_entry_attr_field_mpls_label3_ttl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_TTL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label3_ttl_set"])
    def test_sai_acl_entry_attr_field_mpls_label3_ttl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_TTL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label3_exp_set")
    def test_sai_acl_entry_attr_field_mpls_label3_exp_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_EXP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label3_exp_set"])
    def test_sai_acl_entry_attr_field_mpls_label3_exp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_EXP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label3_bos_set")
    def test_sai_acl_entry_attr_field_mpls_label3_bos_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_BOS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label3_bos_set"])
    def test_sai_acl_entry_attr_field_mpls_label3_bos_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_BOS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label4_label_set")
    def test_sai_acl_entry_attr_field_mpls_label4_label_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_LABEL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label4_label_set"])
    def test_sai_acl_entry_attr_field_mpls_label4_label_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_LABEL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label4_ttl_set")
    def test_sai_acl_entry_attr_field_mpls_label4_ttl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_TTL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label4_ttl_set"])
    def test_sai_acl_entry_attr_field_mpls_label4_ttl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_TTL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label4_exp_set")
    def test_sai_acl_entry_attr_field_mpls_label4_exp_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_EXP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label4_exp_set"])
    def test_sai_acl_entry_attr_field_mpls_label4_exp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_EXP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_mpls_label4_bos_set")
    def test_sai_acl_entry_attr_field_mpls_label4_bos_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_BOS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_mpls_label4_bos_set"])
    def test_sai_acl_entry_attr_field_mpls_label4_bos_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_BOS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_fdb_dst_user_meta_set")
    def test_sai_acl_entry_attr_field_fdb_dst_user_meta_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_FDB_DST_USER_META", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_fdb_dst_user_meta_set"])
    def test_sai_acl_entry_attr_field_fdb_dst_user_meta_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_FDB_DST_USER_META"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_route_dst_user_meta_set")
    def test_sai_acl_entry_attr_field_route_dst_user_meta_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_DST_USER_META", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_route_dst_user_meta_set"])
    def test_sai_acl_entry_attr_field_route_dst_user_meta_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_DST_USER_META"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_neighbor_dst_user_meta_set")
    def test_sai_acl_entry_attr_field_neighbor_dst_user_meta_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_DST_USER_META", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_neighbor_dst_user_meta_set"])
    def test_sai_acl_entry_attr_field_neighbor_dst_user_meta_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_DST_USER_META"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_port_user_meta_set")
    def test_sai_acl_entry_attr_field_port_user_meta_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_port_user_meta_set"])
    def test_sai_acl_entry_attr_field_port_user_meta_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_vlan_user_meta_set")
    def test_sai_acl_entry_attr_field_vlan_user_meta_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_vlan_user_meta_set"])
    def test_sai_acl_entry_attr_field_vlan_user_meta_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_acl_user_meta_set")
    def test_sai_acl_entry_attr_field_acl_user_meta_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ACL_USER_META", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_acl_user_meta_set"])
    def test_sai_acl_entry_attr_field_acl_user_meta_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ACL_USER_META"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_fdb_npu_meta_dst_hit_set")
    def test_sai_acl_entry_attr_field_fdb_npu_meta_dst_hit_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_FDB_NPU_META_DST_HIT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_fdb_npu_meta_dst_hit_set"])
    def test_sai_acl_entry_attr_field_fdb_npu_meta_dst_hit_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_FDB_NPU_META_DST_HIT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_neighbor_npu_meta_dst_hit_set")
    def test_sai_acl_entry_attr_field_neighbor_npu_meta_dst_hit_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_neighbor_npu_meta_dst_hit_set"])
    def test_sai_acl_entry_attr_field_neighbor_npu_meta_dst_hit_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_route_npu_meta_dst_hit_set")
    def test_sai_acl_entry_attr_field_route_npu_meta_dst_hit_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_NPU_META_DST_HIT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_route_npu_meta_dst_hit_set"])
    def test_sai_acl_entry_attr_field_route_npu_meta_dst_hit_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_NPU_META_DST_HIT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_bth_opcode_set")
    def test_sai_acl_entry_attr_field_bth_opcode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_BTH_OPCODE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_bth_opcode_set"])
    def test_sai_acl_entry_attr_field_bth_opcode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_BTH_OPCODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_aeth_syndrome_set")
    def test_sai_acl_entry_attr_field_aeth_syndrome_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_AETH_SYNDROME", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_aeth_syndrome_set"])
    def test_sai_acl_entry_attr_field_aeth_syndrome_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_AETH_SYNDROME"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_user_defined_field_group_min_set")
    def test_sai_acl_entry_attr_user_defined_field_group_min_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_user_defined_field_group_min_set"])
    def test_sai_acl_entry_attr_user_defined_field_group_min_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_user_defined_field_group_max_set")
    def test_sai_acl_entry_attr_user_defined_field_group_max_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_user_defined_field_group_max_set"])
    def test_sai_acl_entry_attr_user_defined_field_group_max_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_acl_range_type_set")
    def test_sai_acl_entry_attr_field_acl_range_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ACL_RANGE_TYPE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_acl_range_type_set"])
    def test_sai_acl_entry_attr_field_acl_range_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_ACL_RANGE_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_ipv6_next_header_set")
    def test_sai_acl_entry_attr_field_ipv6_next_header_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_ipv6_next_header_set"])
    def test_sai_acl_entry_attr_field_ipv6_next_header_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_gre_key_set")
    def test_sai_acl_entry_attr_field_gre_key_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_GRE_KEY", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_gre_key_set"])
    def test_sai_acl_entry_attr_field_gre_key_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_GRE_KEY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_field_tam_int_type_set")
    def test_sai_acl_entry_attr_field_tam_int_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_TAM_INT_TYPE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_field_tam_int_type_set"])
    def test_sai_acl_entry_attr_field_tam_int_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_FIELD_TAM_INT_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_redirect_set")
    def test_sai_acl_entry_attr_action_redirect_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_redirect_set"])
    def test_sai_acl_entry_attr_action_redirect_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_endpoint_ip_set")
    def test_sai_acl_entry_attr_action_endpoint_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_ENDPOINT_IP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_endpoint_ip_set"])
    def test_sai_acl_entry_attr_action_endpoint_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_ENDPOINT_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_redirect_list_set")
    def test_sai_acl_entry_attr_action_redirect_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT_LIST", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_redirect_list_set"])
    def test_sai_acl_entry_attr_action_redirect_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_packet_action_set")
    def test_sai_acl_entry_attr_action_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_packet_action_set"])
    def test_sai_acl_entry_attr_action_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_flood_set")
    def test_sai_acl_entry_attr_action_flood_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_FLOOD", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_flood_set"])
    def test_sai_acl_entry_attr_action_flood_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_FLOOD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_counter_set")
    def test_sai_acl_entry_attr_action_counter_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_COUNTER", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_counter_set"])
    def test_sai_acl_entry_attr_action_counter_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_COUNTER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_mirror_ingress_set")
    def test_sai_acl_entry_attr_action_mirror_ingress_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_INGRESS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_mirror_ingress_set"])
    def test_sai_acl_entry_attr_action_mirror_ingress_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_INGRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_mirror_egress_set")
    def test_sai_acl_entry_attr_action_mirror_egress_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_EGRESS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_mirror_egress_set"])
    def test_sai_acl_entry_attr_action_mirror_egress_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_EGRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_policer_set")
    def test_sai_acl_entry_attr_action_set_policer_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_POLICER", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_policer_set"])
    def test_sai_acl_entry_attr_action_set_policer_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_POLICER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_decrement_ttl_set")
    def test_sai_acl_entry_attr_action_decrement_ttl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DECREMENT_TTL", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_decrement_ttl_set"])
    def test_sai_acl_entry_attr_action_decrement_ttl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DECREMENT_TTL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_tc_set")
    def test_sai_acl_entry_attr_action_set_tc_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_TC", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_tc_set"])
    def test_sai_acl_entry_attr_action_set_tc_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_TC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_packet_color_set")
    def test_sai_acl_entry_attr_action_set_packet_color_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_PACKET_COLOR", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_packet_color_set"])
    def test_sai_acl_entry_attr_action_set_packet_color_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_PACKET_COLOR"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_inner_vlan_id_set")
    def test_sai_acl_entry_attr_action_set_inner_vlan_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_inner_vlan_id_set"])
    def test_sai_acl_entry_attr_action_set_inner_vlan_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_inner_vlan_pri_set")
    def test_sai_acl_entry_attr_action_set_inner_vlan_pri_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_inner_vlan_pri_set"])
    def test_sai_acl_entry_attr_action_set_inner_vlan_pri_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_outer_vlan_id_set")
    def test_sai_acl_entry_attr_action_set_outer_vlan_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_outer_vlan_id_set"])
    def test_sai_acl_entry_attr_action_set_outer_vlan_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_outer_vlan_pri_set")
    def test_sai_acl_entry_attr_action_set_outer_vlan_pri_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_outer_vlan_pri_set"])
    def test_sai_acl_entry_attr_action_set_outer_vlan_pri_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_add_vlan_id_set")
    def test_sai_acl_entry_attr_action_add_vlan_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_ID", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_add_vlan_id_set"])
    def test_sai_acl_entry_attr_action_add_vlan_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_add_vlan_pri_set")
    def test_sai_acl_entry_attr_action_add_vlan_pri_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_PRI", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_add_vlan_pri_set"])
    def test_sai_acl_entry_attr_action_add_vlan_pri_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_PRI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_src_mac_set")
    def test_sai_acl_entry_attr_action_set_src_mac_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_MAC", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_src_mac_set"])
    def test_sai_acl_entry_attr_action_set_src_mac_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_MAC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_dst_mac_set")
    def test_sai_acl_entry_attr_action_set_dst_mac_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_MAC", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_dst_mac_set"])
    def test_sai_acl_entry_attr_action_set_dst_mac_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_MAC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_src_ip_set")
    def test_sai_acl_entry_attr_action_set_src_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_src_ip_set"])
    def test_sai_acl_entry_attr_action_set_src_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_dst_ip_set")
    def test_sai_acl_entry_attr_action_set_dst_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_dst_ip_set"])
    def test_sai_acl_entry_attr_action_set_dst_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_src_ipv6_set")
    def test_sai_acl_entry_attr_action_set_src_ipv6_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IPV6", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_src_ipv6_set"])
    def test_sai_acl_entry_attr_action_set_src_ipv6_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IPV6"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_dst_ipv6_set")
    def test_sai_acl_entry_attr_action_set_dst_ipv6_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IPV6", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_dst_ipv6_set"])
    def test_sai_acl_entry_attr_action_set_dst_ipv6_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IPV6"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_dscp_set")
    def test_sai_acl_entry_attr_action_set_dscp_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_dscp_set"])
    def test_sai_acl_entry_attr_action_set_dscp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_ecn_set")
    def test_sai_acl_entry_attr_action_set_ecn_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_ecn_set"])
    def test_sai_acl_entry_attr_action_set_ecn_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_l4_src_port_set")
    def test_sai_acl_entry_attr_action_set_l4_src_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_SRC_PORT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_l4_src_port_set"])
    def test_sai_acl_entry_attr_action_set_l4_src_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_SRC_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_l4_dst_port_set")
    def test_sai_acl_entry_attr_action_set_l4_dst_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_DST_PORT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_l4_dst_port_set"])
    def test_sai_acl_entry_attr_action_set_l4_dst_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_DST_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_ingress_samplepacket_enable_set")
    def test_sai_acl_entry_attr_action_ingress_samplepacket_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_INGRESS_SAMPLEPACKET_ENABLE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_ingress_samplepacket_enable_set"])
    def test_sai_acl_entry_attr_action_ingress_samplepacket_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_INGRESS_SAMPLEPACKET_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_egress_samplepacket_enable_set")
    def test_sai_acl_entry_attr_action_egress_samplepacket_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_SAMPLEPACKET_ENABLE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_egress_samplepacket_enable_set"])
    def test_sai_acl_entry_attr_action_egress_samplepacket_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_SAMPLEPACKET_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_acl_meta_data_set")
    def test_sai_acl_entry_attr_action_set_acl_meta_data_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_ACL_META_DATA", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_acl_meta_data_set"])
    def test_sai_acl_entry_attr_action_set_acl_meta_data_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_ACL_META_DATA"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_egress_block_port_list_set")
    def test_sai_acl_entry_attr_action_egress_block_port_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_BLOCK_PORT_LIST", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_egress_block_port_list_set"])
    def test_sai_acl_entry_attr_action_egress_block_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_BLOCK_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_user_trap_id_set")
    def test_sai_acl_entry_attr_action_set_user_trap_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_user_trap_id_set"])
    def test_sai_acl_entry_attr_action_set_user_trap_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_do_not_learn_set")
    def test_sai_acl_entry_attr_action_set_do_not_learn_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_do_not_learn_set"])
    def test_sai_acl_entry_attr_action_set_do_not_learn_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_acl_dtel_flow_op_set")
    def test_sai_acl_entry_attr_action_acl_dtel_flow_op_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_ACL_DTEL_FLOW_OP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_acl_dtel_flow_op_set"])
    def test_sai_acl_entry_attr_action_acl_dtel_flow_op_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_ACL_DTEL_FLOW_OP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_dtel_int_session_set")
    def test_sai_acl_entry_attr_action_dtel_int_session_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DTEL_INT_SESSION", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_dtel_int_session_set"])
    def test_sai_acl_entry_attr_action_dtel_int_session_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DTEL_INT_SESSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_dtel_drop_report_enable_set")
    def test_sai_acl_entry_attr_action_dtel_drop_report_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DTEL_DROP_REPORT_ENABLE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_dtel_drop_report_enable_set"])
    def test_sai_acl_entry_attr_action_dtel_drop_report_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DTEL_DROP_REPORT_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_dtel_tail_drop_report_enable_set")
    def test_sai_acl_entry_attr_action_dtel_tail_drop_report_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DTEL_TAIL_DROP_REPORT_ENABLE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_dtel_tail_drop_report_enable_set"])
    def test_sai_acl_entry_attr_action_dtel_tail_drop_report_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DTEL_TAIL_DROP_REPORT_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_dtel_flow_sample_percent_set")
    def test_sai_acl_entry_attr_action_dtel_flow_sample_percent_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DTEL_FLOW_SAMPLE_PERCENT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_dtel_flow_sample_percent_set"])
    def test_sai_acl_entry_attr_action_dtel_flow_sample_percent_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DTEL_FLOW_SAMPLE_PERCENT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_dtel_report_all_packets_set")
    def test_sai_acl_entry_attr_action_dtel_report_all_packets_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DTEL_REPORT_ALL_PACKETS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_dtel_report_all_packets_set"])
    def test_sai_acl_entry_attr_action_dtel_report_all_packets_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DTEL_REPORT_ALL_PACKETS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_no_nat_set")
    def test_sai_acl_entry_attr_action_no_nat_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_NO_NAT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_no_nat_set"])
    def test_sai_acl_entry_attr_action_no_nat_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_NO_NAT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_int_insert_set")
    def test_sai_acl_entry_attr_action_int_insert_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_INT_INSERT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_int_insert_set"])
    def test_sai_acl_entry_attr_action_int_insert_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_INT_INSERT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_int_delete_set")
    def test_sai_acl_entry_attr_action_int_delete_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_INT_DELETE", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_int_delete_set"])
    def test_sai_acl_entry_attr_action_int_delete_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_INT_DELETE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_int_report_flow_set")
    def test_sai_acl_entry_attr_action_int_report_flow_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_FLOW", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_int_report_flow_set"])
    def test_sai_acl_entry_attr_action_int_report_flow_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_FLOW"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_int_report_drops_set")
    def test_sai_acl_entry_attr_action_int_report_drops_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_DROPS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_int_report_drops_set"])
    def test_sai_acl_entry_attr_action_int_report_drops_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_DROPS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_int_report_tail_drops_set")
    def test_sai_acl_entry_attr_action_int_report_tail_drops_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_TAIL_DROPS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_int_report_tail_drops_set"])
    def test_sai_acl_entry_attr_action_int_report_tail_drops_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_TAIL_DROPS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_tam_int_object_set")
    def test_sai_acl_entry_attr_action_tam_int_object_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_TAM_INT_OBJECT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_tam_int_object_set"])
    def test_sai_acl_entry_attr_action_tam_int_object_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_TAM_INT_OBJECT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_isolation_group_set")
    def test_sai_acl_entry_attr_action_set_isolation_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_ISOLATION_GROUP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_isolation_group_set"])
    def test_sai_acl_entry_attr_action_set_isolation_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_ISOLATION_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_macsec_flow_set")
    def test_sai_acl_entry_attr_action_macsec_flow_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_MACSEC_FLOW", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_macsec_flow_set"])
    def test_sai_acl_entry_attr_action_macsec_flow_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_MACSEC_FLOW"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_lag_hash_id_set")
    def test_sai_acl_entry_attr_action_set_lag_hash_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_LAG_HASH_ID", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_lag_hash_id_set"])
    def test_sai_acl_entry_attr_action_set_lag_hash_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_LAG_HASH_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_ecmp_hash_id_set")
    def test_sai_acl_entry_attr_action_set_ecmp_hash_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_ECMP_HASH_ID", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_ecmp_hash_id_set"])
    def test_sai_acl_entry_attr_action_set_ecmp_hash_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_ECMP_HASH_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_vrf_set")
    def test_sai_acl_entry_attr_action_set_vrf_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_VRF", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_vrf_set"])
    def test_sai_acl_entry_attr_action_set_vrf_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_VRF"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_forwarding_class_set")
    def test_sai_acl_entry_attr_action_set_forwarding_class_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_FORWARDING_CLASS", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_forwarding_class_set"])
    def test_sai_acl_entry_attr_action_set_forwarding_class_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_FORWARDING_CLASS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_ars_monitoring_set")
    def test_sai_acl_entry_attr_action_set_ars_monitoring_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_ARS_MONITORING", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_ars_monitoring_set"])
    def test_sai_acl_entry_attr_action_set_ars_monitoring_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_ARS_MONITORING"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_set_ars_object_set")
    def test_sai_acl_entry_attr_action_set_ars_object_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_ARS_OBJECT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_set_ars_object_set"])
    def test_sai_acl_entry_attr_action_set_ars_object_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_SET_ARS_OBJECT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_disable_ars_forwarding_set")
    def test_sai_acl_entry_attr_action_disable_ars_forwarding_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DISABLE_ARS_FORWARDING", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_disable_ars_forwarding_set"])
    def test_sai_acl_entry_attr_action_disable_ars_forwarding_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_DISABLE_ARS_FORWARDING"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_entry_attr_action_chain_redirect_set")
    def test_sai_acl_entry_attr_action_chain_redirect_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_CHAIN_REDIRECT", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_entry_attr_action_chain_redirect_set"])
    def test_sai_acl_entry_attr_action_chain_redirect_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_ENTRY_ATTR_ACTION_CHAIN_REDIRECT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    
    def test_sai_acl_table_attr_entry_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_TABLE_ATTR_ENTRY_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_acl_table_attr_available_acl_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_acl_table_attr_available_acl_counter_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_COUNTER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_acl_table_group_attr_member_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_TABLE_GROUP_ATTR_MEMBER_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_acl_table_group_attr_chain_group_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_TABLE_GROUP_ATTR_CHAIN_GROUP_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_acl_table_group_member_attr_acl_table_chain_group_id_set")
    def test_sai_acl_table_group_member_attr_acl_table_chain_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_CHAIN_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_acl_table_group_member_attr_acl_table_chain_group_id_set"])
    def test_sai_acl_table_group_member_attr_acl_table_chain_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_CHAIN_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_attr_mode_set")
    def test_sai_ars_attr_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_ATTR_MODE", 'SAI_ARS_MODE_FLOWLET_QUALITY']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_attr_mode_set"])
    def test_sai_ars_attr_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_ATTR_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_ARS_MODE_FLOWLET_QUALITY', 'Get error, expected SAI_ARS_MODE_FLOWLET_QUALITY but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_attr_idle_time_set")
    def test_sai_ars_attr_idle_time_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_ATTR_IDLE_TIME", '256']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_attr_idle_time_set"])
    def test_sai_ars_attr_idle_time_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_ATTR_IDLE_TIME"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '256', 'Get error, expected 256 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_attr_max_flows_set")
    def test_sai_ars_attr_max_flows_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_ATTR_MAX_FLOWS", '512']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_attr_max_flows_set"])
    def test_sai_ars_attr_max_flows_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_ATTR_MAX_FLOWS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '512', 'Get error, expected 512 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_attr_mon_enable_set")
    def test_sai_ars_attr_mon_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_ATTR_MON_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_attr_mon_enable_set"])
    def test_sai_ars_attr_mon_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_ATTR_MON_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_attr_samplepacket_enable_set")
    def test_sai_ars_attr_samplepacket_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_ATTR_SAMPLEPACKET_ENABLE", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_attr_samplepacket_enable_set"])
    def test_sai_ars_attr_samplepacket_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_ATTR_SAMPLEPACKET_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_attr_max_alt_memebers_per_group_set")
    def test_sai_ars_attr_max_alt_memebers_per_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_ATTR_MAX_ALT_MEMEBERS_PER_GROUP", '16']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_attr_max_alt_memebers_per_group_set"])
    def test_sai_ars_attr_max_alt_memebers_per_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_ATTR_MAX_ALT_MEMEBERS_PER_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '16', 'Get error, expected 16 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_attr_max_primary_memebers_per_group_set")
    def test_sai_ars_attr_max_primary_memebers_per_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_ATTR_MAX_PRIMARY_MEMEBERS_PER_GROUP", '16']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_attr_max_primary_memebers_per_group_set"])
    def test_sai_ars_attr_max_primary_memebers_per_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_ATTR_MAX_PRIMARY_MEMEBERS_PER_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '16', 'Get error, expected 16 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_attr_primary_path_quality_threshold_set")
    def test_sai_ars_attr_primary_path_quality_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_ATTR_PRIMARY_PATH_QUALITY_THRESHOLD", '16']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_attr_primary_path_quality_threshold_set"])
    def test_sai_ars_attr_primary_path_quality_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_ATTR_PRIMARY_PATH_QUALITY_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '16', 'Get error, expected 16 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_attr_alternate_path_cost_set")
    def test_sai_ars_attr_alternate_path_cost_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_ATTR_ALTERNATE_PATH_COST", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_attr_alternate_path_cost_set"])
    def test_sai_ars_attr_alternate_path_cost_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_ATTR_ALTERNATE_PATH_COST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_attr_alternate_path_bias_set")
    def test_sai_ars_attr_alternate_path_bias_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_ATTR_ALTERNATE_PATH_BIAS", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_attr_alternate_path_bias_set"])
    def test_sai_ars_attr_alternate_path_bias_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_ATTR_ALTERNATE_PATH_BIAS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_algo_set")
    def test_sai_ars_profile_attr_algo_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_ALGO", 'SAI_ARS_PROFILE_ALGO_EWMA']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_algo_set"])
    def test_sai_ars_profile_attr_algo_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_ALGO"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_ARS_PROFILE_ALGO_EWMA', 'Get error, expected SAI_ARS_PROFILE_ALGO_EWMA but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_sampling_interval_set")
    def test_sai_ars_profile_attr_sampling_interval_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_SAMPLING_INTERVAL", '16']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_sampling_interval_set"])
    def test_sai_ars_profile_attr_sampling_interval_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_SAMPLING_INTERVAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '16', 'Get error, expected 16 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_ars_random_seed_set")
    def test_sai_ars_profile_attr_ars_random_seed_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_ARS_RANDOM_SEED", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_ars_random_seed_set"])
    def test_sai_ars_profile_attr_ars_random_seed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_ARS_RANDOM_SEED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    
    def test_sai_ars_profile_attr_ecmp_ars_max_groups_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_ECMP_ARS_MAX_GROUPS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ars_profile_attr_ecmp_ars_max_members_per_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_ECMP_ARS_MAX_MEMBERS_PER_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ars_profile_attr_lag_ars_max_groups_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_LAG_ARS_MAX_GROUPS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ars_profile_attr_lag_ars_max_members_per_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_LAG_ARS_MAX_MEMBERS_PER_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_port_load_past_set")
    def test_sai_ars_profile_attr_port_load_past_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_PORT_LOAD_PAST", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_port_load_past_set"])
    def test_sai_ars_profile_attr_port_load_past_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_PORT_LOAD_PAST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_port_load_past_weight_set")
    def test_sai_ars_profile_attr_port_load_past_weight_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_PORT_LOAD_PAST_WEIGHT", '16']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_port_load_past_weight_set"])
    def test_sai_ars_profile_attr_port_load_past_weight_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_PORT_LOAD_PAST_WEIGHT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '16', 'Get error, expected 16 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_port_load_future_set")
    def test_sai_ars_profile_attr_port_load_future_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_PORT_LOAD_FUTURE", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_port_load_future_set"])
    def test_sai_ars_profile_attr_port_load_future_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_PORT_LOAD_FUTURE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_port_load_future_weight_set")
    def test_sai_ars_profile_attr_port_load_future_weight_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_PORT_LOAD_FUTURE_WEIGHT", '16']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_port_load_future_weight_set"])
    def test_sai_ars_profile_attr_port_load_future_weight_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_PORT_LOAD_FUTURE_WEIGHT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '16', 'Get error, expected 16 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_port_load_current_set")
    def test_sai_ars_profile_attr_port_load_current_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_PORT_LOAD_CURRENT", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_port_load_current_set"])
    def test_sai_ars_profile_attr_port_load_current_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_PORT_LOAD_CURRENT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_port_load_exponent_set")
    def test_sai_ars_profile_attr_port_load_exponent_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_PORT_LOAD_EXPONENT", '2']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_port_load_exponent_set"])
    def test_sai_ars_profile_attr_port_load_exponent_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_PORT_LOAD_EXPONENT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '2', 'Get error, expected 2 but got %s' %  r_value


    
    def test_sai_ars_profile_attr_quant_bands_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BANDS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_0_min_threshold_set")
    def test_sai_ars_profile_attr_quant_band_0_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_0_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_0_min_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_0_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_0_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_0_max_threshold_set")
    def test_sai_ars_profile_attr_quant_band_0_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_0_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_0_max_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_0_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_0_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_1_min_threshold_set")
    def test_sai_ars_profile_attr_quant_band_1_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_1_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_1_min_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_1_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_1_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_1_max_threshold_set")
    def test_sai_ars_profile_attr_quant_band_1_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_1_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_1_max_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_1_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_1_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_2_min_threshold_set")
    def test_sai_ars_profile_attr_quant_band_2_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_2_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_2_min_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_2_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_2_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_2_max_threshold_set")
    def test_sai_ars_profile_attr_quant_band_2_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_2_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_2_max_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_2_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_2_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_3_min_threshold_set")
    def test_sai_ars_profile_attr_quant_band_3_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_3_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_3_min_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_3_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_3_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_3_max_threshold_set")
    def test_sai_ars_profile_attr_quant_band_3_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_3_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_3_max_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_3_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_3_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_4_min_threshold_set")
    def test_sai_ars_profile_attr_quant_band_4_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_4_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_4_min_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_4_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_4_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_4_max_threshold_set")
    def test_sai_ars_profile_attr_quant_band_4_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_4_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_4_max_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_4_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_4_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_5_min_threshold_set")
    def test_sai_ars_profile_attr_quant_band_5_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_5_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_5_min_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_5_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_5_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_5_max_threshold_set")
    def test_sai_ars_profile_attr_quant_band_5_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_5_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_5_max_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_5_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_5_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_6_min_threshold_set")
    def test_sai_ars_profile_attr_quant_band_6_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_6_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_6_min_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_6_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_6_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_6_max_threshold_set")
    def test_sai_ars_profile_attr_quant_band_6_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_6_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_6_max_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_6_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_6_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_7_min_threshold_set")
    def test_sai_ars_profile_attr_quant_band_7_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_7_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_7_min_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_7_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_7_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ars_profile_attr_quant_band_7_max_threshold_set")
    def test_sai_ars_profile_attr_quant_band_7_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_7_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ars_profile_attr_quant_band_7_max_threshold_set"])
    def test_sai_ars_profile_attr_quant_band_7_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ARS_PROFILE_ATTR_QUANT_BAND_7_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_virtual_router_set")
    def test_sai_bfd_session_attr_virtual_router_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_VIRTUAL_ROUTER", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_virtual_router_set"])
    def test_sai_bfd_session_attr_virtual_router_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_VIRTUAL_ROUTER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_port_set")
    def test_sai_bfd_session_attr_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_PORT", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_port_set"])
    def test_sai_bfd_session_attr_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_tc_set")
    def test_sai_bfd_session_attr_tc_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_TC", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_tc_set"])
    def test_sai_bfd_session_attr_tc_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_TC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_vlan_tpid_set")
    def test_sai_bfd_session_attr_vlan_tpid_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_VLAN_TPID", '0x8100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_vlan_tpid_set"])
    def test_sai_bfd_session_attr_vlan_tpid_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_VLAN_TPID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0x8100', 'Get error, expected 0x8100 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_vlan_pri_set")
    def test_sai_bfd_session_attr_vlan_pri_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_VLAN_PRI", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_vlan_pri_set"])
    def test_sai_bfd_session_attr_vlan_pri_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_VLAN_PRI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_vlan_cfi_set")
    def test_sai_bfd_session_attr_vlan_cfi_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_VLAN_CFI", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_vlan_cfi_set"])
    def test_sai_bfd_session_attr_vlan_cfi_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_VLAN_CFI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_iphdr_version_set")
    def test_sai_bfd_session_attr_iphdr_version_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_IPHDR_VERSION", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_iphdr_version_set"])
    def test_sai_bfd_session_attr_iphdr_version_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_IPHDR_VERSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_tos_set")
    def test_sai_bfd_session_attr_tos_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_TOS", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_tos_set"])
    def test_sai_bfd_session_attr_tos_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_TOS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_ttl_set")
    def test_sai_bfd_session_attr_ttl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_TTL", '255']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_ttl_set"])
    def test_sai_bfd_session_attr_ttl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_TTL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '255', 'Get error, expected 255 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_tunnel_tos_set")
    def test_sai_bfd_session_attr_tunnel_tos_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_TUNNEL_TOS", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_tunnel_tos_set"])
    def test_sai_bfd_session_attr_tunnel_tos_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_TUNNEL_TOS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_tunnel_ttl_set")
    def test_sai_bfd_session_attr_tunnel_ttl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_TUNNEL_TTL", '255']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_tunnel_ttl_set"])
    def test_sai_bfd_session_attr_tunnel_ttl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_TUNNEL_TTL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '255', 'Get error, expected 255 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_src_mac_address_set")
    def test_sai_bfd_session_attr_src_mac_address_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_SRC_MAC_ADDRESS", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_src_mac_address_set"])
    def test_sai_bfd_session_attr_src_mac_address_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_SRC_MAC_ADDRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_dst_mac_address_set")
    def test_sai_bfd_session_attr_dst_mac_address_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_DST_MAC_ADDRESS", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_dst_mac_address_set"])
    def test_sai_bfd_session_attr_dst_mac_address_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_DST_MAC_ADDRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_echo_enable_set")
    def test_sai_bfd_session_attr_echo_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_ECHO_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_echo_enable_set"])
    def test_sai_bfd_session_attr_echo_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_ECHO_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_min_tx_set")
    def test_sai_bfd_session_attr_min_tx_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_MIN_TX", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_min_tx_set"])
    def test_sai_bfd_session_attr_min_tx_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_MIN_TX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_min_rx_set")
    def test_sai_bfd_session_attr_min_rx_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_MIN_RX", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_min_rx_set"])
    def test_sai_bfd_session_attr_min_rx_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_MIN_RX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bfd_session_attr_multiplier_set")
    def test_sai_bfd_session_attr_multiplier_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BFD_SESSION_ATTR_MULTIPLIER", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bfd_session_attr_multiplier_set"])
    def test_sai_bfd_session_attr_multiplier_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_MULTIPLIER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_bfd_session_attr_remote_min_tx_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_REMOTE_MIN_TX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_bfd_session_attr_remote_min_rx_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_REMOTE_MIN_RX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_bfd_session_attr_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_bfd_session_attr_negotiated_tx_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_NEGOTIATED_TX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_bfd_session_attr_negotiated_rx_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_NEGOTIATED_RX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_bfd_session_attr_local_diag_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_LOCAL_DIAG"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_bfd_session_attr_remote_diag_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_REMOTE_DIAG"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_bfd_session_attr_remote_multiplier_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BFD_SESSION_ATTR_REMOTE_MULTIPLIER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_bridge_attr_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_ATTR_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_attr_max_learned_addresses_set")
    def test_sai_bridge_attr_max_learned_addresses_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_ATTR_MAX_LEARNED_ADDRESSES", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_attr_max_learned_addresses_set"])
    def test_sai_bridge_attr_max_learned_addresses_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_ATTR_MAX_LEARNED_ADDRESSES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_attr_learn_disable_set")
    def test_sai_bridge_attr_learn_disable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_ATTR_LEARN_DISABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_attr_learn_disable_set"])
    def test_sai_bridge_attr_learn_disable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_ATTR_LEARN_DISABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_attr_unknown_unicast_flood_control_type_set")
    def test_sai_bridge_attr_unknown_unicast_flood_control_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE", 'SAI_BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_attr_unknown_unicast_flood_control_type_set"])
    def test_sai_bridge_attr_unknown_unicast_flood_control_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS', 'Get error, expected SAI_BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_attr_unknown_unicast_flood_group_set")
    def test_sai_bridge_attr_unknown_unicast_flood_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_attr_unknown_unicast_flood_group_set"])
    def test_sai_bridge_attr_unknown_unicast_flood_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_attr_unknown_multicast_flood_control_type_set")
    def test_sai_bridge_attr_unknown_multicast_flood_control_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE", 'SAI_BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_attr_unknown_multicast_flood_control_type_set"])
    def test_sai_bridge_attr_unknown_multicast_flood_control_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS', 'Get error, expected SAI_BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_attr_unknown_multicast_flood_group_set")
    def test_sai_bridge_attr_unknown_multicast_flood_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_attr_unknown_multicast_flood_group_set"])
    def test_sai_bridge_attr_unknown_multicast_flood_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_attr_broadcast_flood_control_type_set")
    def test_sai_bridge_attr_broadcast_flood_control_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE", 'SAI_BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_attr_broadcast_flood_control_type_set"])
    def test_sai_bridge_attr_broadcast_flood_control_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS', 'Get error, expected SAI_BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_attr_broadcast_flood_group_set")
    def test_sai_bridge_attr_broadcast_flood_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_ATTR_BROADCAST_FLOOD_GROUP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_attr_broadcast_flood_group_set"])
    def test_sai_bridge_attr_broadcast_flood_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_ATTR_BROADCAST_FLOOD_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_port_attr_tagging_mode_set")
    def test_sai_bridge_port_attr_tagging_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_TAGGING_MODE", 'SAI_BRIDGE_PORT_TAGGING_MODE_TAGGED']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_port_attr_tagging_mode_set"])
    def test_sai_bridge_port_attr_tagging_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_TAGGING_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_BRIDGE_PORT_TAGGING_MODE_TAGGED', 'Get error, expected SAI_BRIDGE_PORT_TAGGING_MODE_TAGGED but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_port_attr_bridge_id_set")
    def test_sai_bridge_port_attr_bridge_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_BRIDGE_ID", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_port_attr_bridge_id_set"])
    def test_sai_bridge_port_attr_bridge_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_BRIDGE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_port_attr_fdb_learning_mode_set")
    def test_sai_bridge_port_attr_fdb_learning_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_MODE", 'SAI_BRIDGE_PORT_FDB_LEARNING_MODE_HW']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_port_attr_fdb_learning_mode_set"])
    def test_sai_bridge_port_attr_fdb_learning_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_BRIDGE_PORT_FDB_LEARNING_MODE_HW', 'Get error, expected SAI_BRIDGE_PORT_FDB_LEARNING_MODE_HW but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_port_attr_max_learned_addresses_set")
    def test_sai_bridge_port_attr_max_learned_addresses_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_port_attr_max_learned_addresses_set"])
    def test_sai_bridge_port_attr_max_learned_addresses_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_port_attr_fdb_learning_limit_violation_packet_action_set")
    def test_sai_bridge_port_attr_fdb_learning_limit_violation_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION", 'SAI_PACKET_ACTION_DROP']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_port_attr_fdb_learning_limit_violation_packet_action_set"])
    def test_sai_bridge_port_attr_fdb_learning_limit_violation_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_DROP', 'Get error, expected SAI_PACKET_ACTION_DROP but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_port_attr_admin_state_set")
    def test_sai_bridge_port_attr_admin_state_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_ADMIN_STATE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_port_attr_admin_state_set"])
    def test_sai_bridge_port_attr_admin_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_ADMIN_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_port_attr_ingress_filtering_set")
    def test_sai_bridge_port_attr_ingress_filtering_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_INGRESS_FILTERING", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_port_attr_ingress_filtering_set"])
    def test_sai_bridge_port_attr_ingress_filtering_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_INGRESS_FILTERING"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_port_attr_egress_filtering_set")
    def test_sai_bridge_port_attr_egress_filtering_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_EGRESS_FILTERING", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_port_attr_egress_filtering_set"])
    def test_sai_bridge_port_attr_egress_filtering_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_EGRESS_FILTERING"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_bridge_port_attr_isolation_group_set")
    def test_sai_bridge_port_attr_isolation_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_ISOLATION_GROUP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_bridge_port_attr_isolation_group_set"])
    def test_sai_bridge_port_attr_isolation_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BRIDGE_PORT_ATTR_ISOLATION_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_buffer_pool_attr_shared_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BUFFER_POOL_ATTR_SHARED_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_buffer_pool_attr_size_set")
    def test_sai_buffer_pool_attr_size_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BUFFER_POOL_ATTR_SIZE", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_buffer_pool_attr_size_set"])
    def test_sai_buffer_pool_attr_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BUFFER_POOL_ATTR_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_buffer_pool_attr_tam_set")
    def test_sai_buffer_pool_attr_tam_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BUFFER_POOL_ATTR_TAM", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_buffer_pool_attr_tam_set"])
    def test_sai_buffer_pool_attr_tam_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BUFFER_POOL_ATTR_TAM"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_buffer_pool_attr_xoff_size_set")
    def test_sai_buffer_pool_attr_xoff_size_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BUFFER_POOL_ATTR_XOFF_SIZE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_buffer_pool_attr_xoff_size_set"])
    def test_sai_buffer_pool_attr_xoff_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BUFFER_POOL_ATTR_XOFF_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_buffer_pool_attr_wred_profile_id_set")
    def test_sai_buffer_pool_attr_wred_profile_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BUFFER_POOL_ATTR_WRED_PROFILE_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_buffer_pool_attr_wred_profile_id_set"])
    def test_sai_buffer_pool_attr_wred_profile_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BUFFER_POOL_ATTR_WRED_PROFILE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_buffer_profile_attr_reserved_buffer_size_set")
    def test_sai_buffer_profile_attr_reserved_buffer_size_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BUFFER_PROFILE_ATTR_RESERVED_BUFFER_SIZE", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_buffer_profile_attr_reserved_buffer_size_set"])
    def test_sai_buffer_profile_attr_reserved_buffer_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BUFFER_PROFILE_ATTR_RESERVED_BUFFER_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_buffer_profile_attr_shared_dynamic_th_set")
    def test_sai_buffer_profile_attr_shared_dynamic_th_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BUFFER_PROFILE_ATTR_SHARED_DYNAMIC_TH", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_buffer_profile_attr_shared_dynamic_th_set"])
    def test_sai_buffer_profile_attr_shared_dynamic_th_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BUFFER_PROFILE_ATTR_SHARED_DYNAMIC_TH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_buffer_profile_attr_shared_static_th_set")
    def test_sai_buffer_profile_attr_shared_static_th_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BUFFER_PROFILE_ATTR_SHARED_STATIC_TH", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_buffer_profile_attr_shared_static_th_set"])
    def test_sai_buffer_profile_attr_shared_static_th_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BUFFER_PROFILE_ATTR_SHARED_STATIC_TH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_buffer_profile_attr_xoff_th_set")
    def test_sai_buffer_profile_attr_xoff_th_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BUFFER_PROFILE_ATTR_XOFF_TH", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_buffer_profile_attr_xoff_th_set"])
    def test_sai_buffer_profile_attr_xoff_th_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BUFFER_PROFILE_ATTR_XOFF_TH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_buffer_profile_attr_xon_th_set")
    def test_sai_buffer_profile_attr_xon_th_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BUFFER_PROFILE_ATTR_XON_TH", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_buffer_profile_attr_xon_th_set"])
    def test_sai_buffer_profile_attr_xon_th_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BUFFER_PROFILE_ATTR_XON_TH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_buffer_profile_attr_xon_offset_th_set")
    def test_sai_buffer_profile_attr_xon_offset_th_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_BUFFER_PROFILE_ATTR_XON_OFFSET_TH", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_buffer_profile_attr_xon_offset_th_set"])
    def test_sai_buffer_profile_attr_xon_offset_th_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_BUFFER_PROFILE_ATTR_XON_OFFSET_TH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_counter_attr_label_set")
    def test_sai_counter_attr_label_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_COUNTER_ATTR_LABEL", '""']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_counter_attr_label_set"])
    def test_sai_counter_attr_label_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_COUNTER_ATTR_LABEL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '""', 'Get error, expected "" but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dash_acl_group_attr_ip_addr_family_set")
    def test_sai_dash_acl_group_attr_ip_addr_family_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DASH_ACL_GROUP_ATTR_IP_ADDR_FAMILY", 'SAI_IP_ADDR_FAMILY_IPV4']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dash_acl_group_attr_ip_addr_family_set"])
    def test_sai_dash_acl_group_attr_ip_addr_family_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DASH_ACL_GROUP_ATTR_IP_ADDR_FAMILY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_IP_ADDR_FAMILY_IPV4', 'Get error, expected SAI_IP_ADDR_FAMILY_IPV4 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dash_acl_rule_attr_action_set")
    def test_sai_dash_acl_rule_attr_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DASH_ACL_RULE_ATTR_ACTION", 'SAI_DASH_ACL_RULE_ACTION_PERMIT']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dash_acl_rule_attr_action_set"])
    def test_sai_dash_acl_rule_attr_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DASH_ACL_RULE_ATTR_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_DASH_ACL_RULE_ACTION_PERMIT', 'Get error, expected SAI_DASH_ACL_RULE_ACTION_PERMIT but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dash_acl_rule_attr_counter_id_set")
    def test_sai_dash_acl_rule_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DASH_ACL_RULE_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dash_acl_rule_attr_counter_id_set"])
    def test_sai_dash_acl_rule_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DASH_ACL_RULE_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_dash_acl_rule_attr_ip_addr_family_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DASH_ACL_RULE_ATTR_IP_ADDR_FAMILY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_debug_counter_attr_index_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DEBUG_COUNTER_ATTR_INDEX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_debug_counter_attr_in_drop_reason_list_set")
    def test_sai_debug_counter_attr_in_drop_reason_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DEBUG_COUNTER_ATTR_IN_DROP_REASON_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_debug_counter_attr_in_drop_reason_list_set"])
    def test_sai_debug_counter_attr_in_drop_reason_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DEBUG_COUNTER_ATTR_IN_DROP_REASON_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_debug_counter_attr_out_drop_reason_list_set")
    def test_sai_debug_counter_attr_out_drop_reason_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DEBUG_COUNTER_ATTR_OUT_DROP_REASON_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_debug_counter_attr_out_drop_reason_list_set"])
    def test_sai_debug_counter_attr_out_drop_reason_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DEBUG_COUNTER_ATTR_OUT_DROP_REASON_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_direction_lookup_entry_attr_action_set")
    def test_sai_direction_lookup_entry_attr_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DIRECTION_LOOKUP_ENTRY_ATTR_ACTION", 'SAI_DIRECTION_LOOKUP_ENTRY_ACTION_SET_OUTBOUND_DIRECTION']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_direction_lookup_entry_attr_action_set"])
    def test_sai_direction_lookup_entry_attr_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DIRECTION_LOOKUP_ENTRY_ATTR_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_DIRECTION_LOOKUP_ENTRY_ACTION_SET_OUTBOUND_DIRECTION', 'Get error, expected SAI_DIRECTION_LOOKUP_ENTRY_ACTION_SET_OUTBOUND_DIRECTION but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_attr_int_endpoint_enable_set")
    def test_sai_dtel_attr_int_endpoint_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_ATTR_INT_ENDPOINT_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_attr_int_endpoint_enable_set"])
    def test_sai_dtel_attr_int_endpoint_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_ATTR_INT_ENDPOINT_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_attr_int_transit_enable_set")
    def test_sai_dtel_attr_int_transit_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_ATTR_INT_TRANSIT_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_attr_int_transit_enable_set"])
    def test_sai_dtel_attr_int_transit_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_ATTR_INT_TRANSIT_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_attr_postcard_enable_set")
    def test_sai_dtel_attr_postcard_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_ATTR_POSTCARD_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_attr_postcard_enable_set"])
    def test_sai_dtel_attr_postcard_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_ATTR_POSTCARD_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_attr_drop_report_enable_set")
    def test_sai_dtel_attr_drop_report_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_ATTR_DROP_REPORT_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_attr_drop_report_enable_set"])
    def test_sai_dtel_attr_drop_report_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_ATTR_DROP_REPORT_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_attr_queue_report_enable_set")
    def test_sai_dtel_attr_queue_report_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_ATTR_QUEUE_REPORT_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_attr_queue_report_enable_set"])
    def test_sai_dtel_attr_queue_report_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_ATTR_QUEUE_REPORT_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_attr_switch_id_set")
    def test_sai_dtel_attr_switch_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_ATTR_SWITCH_ID", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_attr_switch_id_set"])
    def test_sai_dtel_attr_switch_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_ATTR_SWITCH_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_attr_flow_state_clear_cycle_set")
    def test_sai_dtel_attr_flow_state_clear_cycle_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_ATTR_FLOW_STATE_CLEAR_CYCLE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_attr_flow_state_clear_cycle_set"])
    def test_sai_dtel_attr_flow_state_clear_cycle_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_ATTR_FLOW_STATE_CLEAR_CYCLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_attr_latency_sensitivity_set")
    def test_sai_dtel_attr_latency_sensitivity_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_ATTR_LATENCY_SENSITIVITY", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_attr_latency_sensitivity_set"])
    def test_sai_dtel_attr_latency_sensitivity_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_ATTR_LATENCY_SENSITIVITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_attr_sink_port_list_set")
    def test_sai_dtel_attr_sink_port_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_ATTR_SINK_PORT_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_attr_sink_port_list_set"])
    def test_sai_dtel_attr_sink_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_ATTR_SINK_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_attr_int_l4_dscp_set")
    def test_sai_dtel_attr_int_l4_dscp_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_ATTR_INT_L4_DSCP", 'disabled']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_attr_int_l4_dscp_set"])
    def test_sai_dtel_attr_int_l4_dscp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_ATTR_INT_L4_DSCP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'disabled', 'Get error, expected disabled but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_event_attr_report_session_set")
    def test_sai_dtel_event_attr_report_session_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_EVENT_ATTR_REPORT_SESSION", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_event_attr_report_session_set"])
    def test_sai_dtel_event_attr_report_session_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_EVENT_ATTR_REPORT_SESSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_event_attr_dscp_value_set")
    def test_sai_dtel_event_attr_dscp_value_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_EVENT_ATTR_DSCP_VALUE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_event_attr_dscp_value_set"])
    def test_sai_dtel_event_attr_dscp_value_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_EVENT_ATTR_DSCP_VALUE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_int_session_attr_max_hop_count_set")
    def test_sai_dtel_int_session_attr_max_hop_count_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_INT_SESSION_ATTR_MAX_HOP_COUNT", '8']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_int_session_attr_max_hop_count_set"])
    def test_sai_dtel_int_session_attr_max_hop_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_INT_SESSION_ATTR_MAX_HOP_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '8', 'Get error, expected 8 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_int_session_attr_collect_switch_id_set")
    def test_sai_dtel_int_session_attr_collect_switch_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_ID", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_int_session_attr_collect_switch_id_set"])
    def test_sai_dtel_int_session_attr_collect_switch_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_int_session_attr_collect_switch_ports_set")
    def test_sai_dtel_int_session_attr_collect_switch_ports_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_PORTS", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_int_session_attr_collect_switch_ports_set"])
    def test_sai_dtel_int_session_attr_collect_switch_ports_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_PORTS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_int_session_attr_collect_ingress_timestamp_set")
    def test_sai_dtel_int_session_attr_collect_ingress_timestamp_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_INT_SESSION_ATTR_COLLECT_INGRESS_TIMESTAMP", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_int_session_attr_collect_ingress_timestamp_set"])
    def test_sai_dtel_int_session_attr_collect_ingress_timestamp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_INT_SESSION_ATTR_COLLECT_INGRESS_TIMESTAMP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_int_session_attr_collect_egress_timestamp_set")
    def test_sai_dtel_int_session_attr_collect_egress_timestamp_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_INT_SESSION_ATTR_COLLECT_EGRESS_TIMESTAMP", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_int_session_attr_collect_egress_timestamp_set"])
    def test_sai_dtel_int_session_attr_collect_egress_timestamp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_INT_SESSION_ATTR_COLLECT_EGRESS_TIMESTAMP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_int_session_attr_collect_queue_info_set")
    def test_sai_dtel_int_session_attr_collect_queue_info_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_INT_SESSION_ATTR_COLLECT_QUEUE_INFO", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_int_session_attr_collect_queue_info_set"])
    def test_sai_dtel_int_session_attr_collect_queue_info_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_INT_SESSION_ATTR_COLLECT_QUEUE_INFO"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_queue_report_attr_depth_threshold_set")
    def test_sai_dtel_queue_report_attr_depth_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_QUEUE_REPORT_ATTR_DEPTH_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_queue_report_attr_depth_threshold_set"])
    def test_sai_dtel_queue_report_attr_depth_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_QUEUE_REPORT_ATTR_DEPTH_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_queue_report_attr_latency_threshold_set")
    def test_sai_dtel_queue_report_attr_latency_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_QUEUE_REPORT_ATTR_LATENCY_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_queue_report_attr_latency_threshold_set"])
    def test_sai_dtel_queue_report_attr_latency_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_QUEUE_REPORT_ATTR_LATENCY_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_queue_report_attr_breach_quota_set")
    def test_sai_dtel_queue_report_attr_breach_quota_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_QUEUE_REPORT_ATTR_BREACH_QUOTA", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_queue_report_attr_breach_quota_set"])
    def test_sai_dtel_queue_report_attr_breach_quota_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_QUEUE_REPORT_ATTR_BREACH_QUOTA"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_queue_report_attr_tail_drop_set")
    def test_sai_dtel_queue_report_attr_tail_drop_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_QUEUE_REPORT_ATTR_TAIL_DROP", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_queue_report_attr_tail_drop_set"])
    def test_sai_dtel_queue_report_attr_tail_drop_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_QUEUE_REPORT_ATTR_TAIL_DROP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_report_session_attr_src_ip_set")
    def test_sai_dtel_report_session_attr_src_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_REPORT_SESSION_ATTR_SRC_IP", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_report_session_attr_src_ip_set"])
    def test_sai_dtel_report_session_attr_src_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_REPORT_SESSION_ATTR_SRC_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_report_session_attr_dst_ip_list_set")
    def test_sai_dtel_report_session_attr_dst_ip_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_REPORT_SESSION_ATTR_DST_IP_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_report_session_attr_dst_ip_list_set"])
    def test_sai_dtel_report_session_attr_dst_ip_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_REPORT_SESSION_ATTR_DST_IP_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_report_session_attr_virtual_router_id_set")
    def test_sai_dtel_report_session_attr_virtual_router_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_REPORT_SESSION_ATTR_VIRTUAL_ROUTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_report_session_attr_virtual_router_id_set"])
    def test_sai_dtel_report_session_attr_virtual_router_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_REPORT_SESSION_ATTR_VIRTUAL_ROUTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_report_session_attr_truncate_size_set")
    def test_sai_dtel_report_session_attr_truncate_size_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_REPORT_SESSION_ATTR_TRUNCATE_SIZE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_report_session_attr_truncate_size_set"])
    def test_sai_dtel_report_session_attr_truncate_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_REPORT_SESSION_ATTR_TRUNCATE_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_dtel_report_session_attr_udp_dst_port_set")
    def test_sai_dtel_report_session_attr_udp_dst_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_DTEL_REPORT_SESSION_ATTR_UDP_DST_PORT", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_dtel_report_session_attr_udp_dst_port_set"])
    def test_sai_dtel_report_session_attr_udp_dst_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_DTEL_REPORT_SESSION_ATTR_UDP_DST_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_cps_set")
    def test_sai_eni_attr_cps_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_CPS", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_cps_set"])
    def test_sai_eni_attr_cps_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_CPS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_pps_set")
    def test_sai_eni_attr_pps_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_PPS", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_pps_set"])
    def test_sai_eni_attr_pps_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_PPS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_flows_set")
    def test_sai_eni_attr_flows_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_FLOWS", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_flows_set"])
    def test_sai_eni_attr_flows_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_FLOWS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_admin_state_set")
    def test_sai_eni_attr_admin_state_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_ADMIN_STATE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_admin_state_set"])
    def test_sai_eni_attr_admin_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_ADMIN_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_vm_underlay_dip_set")
    def test_sai_eni_attr_vm_underlay_dip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_VM_UNDERLAY_DIP", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_vm_underlay_dip_set"])
    def test_sai_eni_attr_vm_underlay_dip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_VM_UNDERLAY_DIP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_vm_vni_set")
    def test_sai_eni_attr_vm_vni_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_VM_VNI", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_vm_vni_set"])
    def test_sai_eni_attr_vm_vni_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_VM_VNI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_vnet_id_set")
    def test_sai_eni_attr_vnet_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_VNET_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_vnet_id_set"])
    def test_sai_eni_attr_vnet_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_VNET_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_v4_meter_policy_id_set")
    def test_sai_eni_attr_v4_meter_policy_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_V4_METER_POLICY_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_v4_meter_policy_id_set"])
    def test_sai_eni_attr_v4_meter_policy_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_V4_METER_POLICY_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_v6_meter_policy_id_set")
    def test_sai_eni_attr_v6_meter_policy_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_V6_METER_POLICY_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_v6_meter_policy_id_set"])
    def test_sai_eni_attr_v6_meter_policy_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_V6_METER_POLICY_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_inbound_v4_stage1_dash_acl_group_id_set")
    def test_sai_eni_attr_inbound_v4_stage1_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V4_STAGE1_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_inbound_v4_stage1_dash_acl_group_id_set"])
    def test_sai_eni_attr_inbound_v4_stage1_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V4_STAGE1_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_inbound_v4_stage2_dash_acl_group_id_set")
    def test_sai_eni_attr_inbound_v4_stage2_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V4_STAGE2_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_inbound_v4_stage2_dash_acl_group_id_set"])
    def test_sai_eni_attr_inbound_v4_stage2_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V4_STAGE2_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_inbound_v4_stage3_dash_acl_group_id_set")
    def test_sai_eni_attr_inbound_v4_stage3_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V4_STAGE3_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_inbound_v4_stage3_dash_acl_group_id_set"])
    def test_sai_eni_attr_inbound_v4_stage3_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V4_STAGE3_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_inbound_v4_stage4_dash_acl_group_id_set")
    def test_sai_eni_attr_inbound_v4_stage4_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V4_STAGE4_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_inbound_v4_stage4_dash_acl_group_id_set"])
    def test_sai_eni_attr_inbound_v4_stage4_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V4_STAGE4_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_inbound_v4_stage5_dash_acl_group_id_set")
    def test_sai_eni_attr_inbound_v4_stage5_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V4_STAGE5_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_inbound_v4_stage5_dash_acl_group_id_set"])
    def test_sai_eni_attr_inbound_v4_stage5_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V4_STAGE5_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_inbound_v6_stage1_dash_acl_group_id_set")
    def test_sai_eni_attr_inbound_v6_stage1_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V6_STAGE1_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_inbound_v6_stage1_dash_acl_group_id_set"])
    def test_sai_eni_attr_inbound_v6_stage1_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V6_STAGE1_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_inbound_v6_stage2_dash_acl_group_id_set")
    def test_sai_eni_attr_inbound_v6_stage2_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V6_STAGE2_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_inbound_v6_stage2_dash_acl_group_id_set"])
    def test_sai_eni_attr_inbound_v6_stage2_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V6_STAGE2_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_inbound_v6_stage3_dash_acl_group_id_set")
    def test_sai_eni_attr_inbound_v6_stage3_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V6_STAGE3_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_inbound_v6_stage3_dash_acl_group_id_set"])
    def test_sai_eni_attr_inbound_v6_stage3_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V6_STAGE3_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_inbound_v6_stage4_dash_acl_group_id_set")
    def test_sai_eni_attr_inbound_v6_stage4_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V6_STAGE4_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_inbound_v6_stage4_dash_acl_group_id_set"])
    def test_sai_eni_attr_inbound_v6_stage4_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V6_STAGE4_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_inbound_v6_stage5_dash_acl_group_id_set")
    def test_sai_eni_attr_inbound_v6_stage5_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V6_STAGE5_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_inbound_v6_stage5_dash_acl_group_id_set"])
    def test_sai_eni_attr_inbound_v6_stage5_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_INBOUND_V6_STAGE5_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_outbound_v4_stage1_dash_acl_group_id_set")
    def test_sai_eni_attr_outbound_v4_stage1_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V4_STAGE1_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_outbound_v4_stage1_dash_acl_group_id_set"])
    def test_sai_eni_attr_outbound_v4_stage1_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V4_STAGE1_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_outbound_v4_stage2_dash_acl_group_id_set")
    def test_sai_eni_attr_outbound_v4_stage2_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V4_STAGE2_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_outbound_v4_stage2_dash_acl_group_id_set"])
    def test_sai_eni_attr_outbound_v4_stage2_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V4_STAGE2_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_outbound_v4_stage3_dash_acl_group_id_set")
    def test_sai_eni_attr_outbound_v4_stage3_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V4_STAGE3_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_outbound_v4_stage3_dash_acl_group_id_set"])
    def test_sai_eni_attr_outbound_v4_stage3_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V4_STAGE3_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_outbound_v4_stage4_dash_acl_group_id_set")
    def test_sai_eni_attr_outbound_v4_stage4_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V4_STAGE4_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_outbound_v4_stage4_dash_acl_group_id_set"])
    def test_sai_eni_attr_outbound_v4_stage4_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V4_STAGE4_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_outbound_v4_stage5_dash_acl_group_id_set")
    def test_sai_eni_attr_outbound_v4_stage5_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V4_STAGE5_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_outbound_v4_stage5_dash_acl_group_id_set"])
    def test_sai_eni_attr_outbound_v4_stage5_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V4_STAGE5_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_outbound_v6_stage1_dash_acl_group_id_set")
    def test_sai_eni_attr_outbound_v6_stage1_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V6_STAGE1_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_outbound_v6_stage1_dash_acl_group_id_set"])
    def test_sai_eni_attr_outbound_v6_stage1_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V6_STAGE1_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_outbound_v6_stage2_dash_acl_group_id_set")
    def test_sai_eni_attr_outbound_v6_stage2_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V6_STAGE2_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_outbound_v6_stage2_dash_acl_group_id_set"])
    def test_sai_eni_attr_outbound_v6_stage2_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V6_STAGE2_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_outbound_v6_stage3_dash_acl_group_id_set")
    def test_sai_eni_attr_outbound_v6_stage3_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V6_STAGE3_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_outbound_v6_stage3_dash_acl_group_id_set"])
    def test_sai_eni_attr_outbound_v6_stage3_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V6_STAGE3_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_outbound_v6_stage4_dash_acl_group_id_set")
    def test_sai_eni_attr_outbound_v6_stage4_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V6_STAGE4_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_outbound_v6_stage4_dash_acl_group_id_set"])
    def test_sai_eni_attr_outbound_v6_stage4_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V6_STAGE4_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_attr_outbound_v6_stage5_dash_acl_group_id_set")
    def test_sai_eni_attr_outbound_v6_stage5_dash_acl_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V6_STAGE5_DASH_ACL_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_attr_outbound_v6_stage5_dash_acl_group_id_set"])
    def test_sai_eni_attr_outbound_v6_stage5_dash_acl_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ATTR_OUTBOUND_V6_STAGE5_DASH_ACL_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_eni_ether_address_map_entry_attr_eni_id_set")
    def test_sai_eni_ether_address_map_entry_attr_eni_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ENI_ETHER_ADDRESS_MAP_ENTRY_ATTR_ENI_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_eni_ether_address_map_entry_attr_eni_id_set"])
    def test_sai_eni_ether_address_map_entry_attr_eni_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ENI_ETHER_ADDRESS_MAP_ENTRY_ATTR_ENI_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_fdb_entry_attr_type_set")
    def test_sai_fdb_entry_attr_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_FDB_ENTRY_ATTR_TYPE", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_fdb_entry_attr_type_set"])
    def test_sai_fdb_entry_attr_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_FDB_ENTRY_ATTR_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_fdb_entry_attr_packet_action_set")
    def test_sai_fdb_entry_attr_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_FDB_ENTRY_ATTR_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_fdb_entry_attr_packet_action_set"])
    def test_sai_fdb_entry_attr_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_FDB_ENTRY_ATTR_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_fdb_entry_attr_user_trap_id_set")
    def test_sai_fdb_entry_attr_user_trap_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_FDB_ENTRY_ATTR_USER_TRAP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_fdb_entry_attr_user_trap_id_set"])
    def test_sai_fdb_entry_attr_user_trap_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_FDB_ENTRY_ATTR_USER_TRAP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_fdb_entry_attr_bridge_port_id_set")
    def test_sai_fdb_entry_attr_bridge_port_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_fdb_entry_attr_bridge_port_id_set"])
    def test_sai_fdb_entry_attr_bridge_port_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_fdb_entry_attr_meta_data_set")
    def test_sai_fdb_entry_attr_meta_data_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_FDB_ENTRY_ATTR_META_DATA", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_fdb_entry_attr_meta_data_set"])
    def test_sai_fdb_entry_attr_meta_data_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_FDB_ENTRY_ATTR_META_DATA"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_fdb_entry_attr_endpoint_ip_set")
    def test_sai_fdb_entry_attr_endpoint_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_FDB_ENTRY_ATTR_ENDPOINT_IP", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_fdb_entry_attr_endpoint_ip_set"])
    def test_sai_fdb_entry_attr_endpoint_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_FDB_ENTRY_ATTR_ENDPOINT_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_fdb_entry_attr_counter_id_set")
    def test_sai_fdb_entry_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_FDB_ENTRY_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_fdb_entry_attr_counter_id_set"])
    def test_sai_fdb_entry_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_FDB_ENTRY_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_fdb_entry_attr_allow_mac_move_set")
    def test_sai_fdb_entry_attr_allow_mac_move_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_FDB_ENTRY_ATTR_ALLOW_MAC_MOVE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_fdb_entry_attr_allow_mac_move_set"])
    def test_sai_fdb_entry_attr_allow_mac_move_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_FDB_ENTRY_ATTR_ALLOW_MAC_MOVE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_generic_programmable_attr_entry_set")
    def test_sai_generic_programmable_attr_entry_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_GENERIC_PROGRAMMABLE_ATTR_ENTRY", 'vendor']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_generic_programmable_attr_entry_set"])
    def test_sai_generic_programmable_attr_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_GENERIC_PROGRAMMABLE_ATTR_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'vendor', 'Get error, expected vendor but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_generic_programmable_attr_counter_id_set")
    def test_sai_generic_programmable_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_GENERIC_PROGRAMMABLE_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_generic_programmable_attr_counter_id_set"])
    def test_sai_generic_programmable_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_GENERIC_PROGRAMMABLE_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hash_attr_native_hash_field_list_set")
    def test_sai_hash_attr_native_hash_field_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HASH_ATTR_NATIVE_HASH_FIELD_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hash_attr_native_hash_field_list_set"])
    def test_sai_hash_attr_native_hash_field_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HASH_ATTR_NATIVE_HASH_FIELD_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hash_attr_udf_group_list_set")
    def test_sai_hash_attr_udf_group_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HASH_ATTR_UDF_GROUP_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hash_attr_udf_group_list_set"])
    def test_sai_hash_attr_udf_group_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HASH_ATTR_UDF_GROUP_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hash_attr_fine_grained_hash_field_list_set")
    def test_sai_hash_attr_fine_grained_hash_field_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HASH_ATTR_FINE_GRAINED_HASH_FIELD_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hash_attr_fine_grained_hash_field_list_set"])
    def test_sai_hash_attr_fine_grained_hash_field_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HASH_ATTR_FINE_GRAINED_HASH_FIELD_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_attr_oper_status_set")
    def test_sai_hostif_attr_oper_status_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_ATTR_OPER_STATUS", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_attr_oper_status_set"])
    def test_sai_hostif_attr_oper_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_ATTR_OPER_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_attr_queue_set")
    def test_sai_hostif_attr_queue_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_ATTR_QUEUE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_attr_queue_set"])
    def test_sai_hostif_attr_queue_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_ATTR_QUEUE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_attr_vlan_tag_set")
    def test_sai_hostif_attr_vlan_tag_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_ATTR_VLAN_TAG", 'SAI_HOSTIF_VLAN_TAG_STRIP']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_attr_vlan_tag_set"])
    def test_sai_hostif_attr_vlan_tag_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_ATTR_VLAN_TAG"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_HOSTIF_VLAN_TAG_STRIP', 'Get error, expected SAI_HOSTIF_VLAN_TAG_STRIP but got %s' %  r_value


    
    def test_sai_hostif_packet_attr_hostif_trap_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_PACKET_ATTR_HOSTIF_TRAP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_hostif_packet_attr_ingress_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_PACKET_ATTR_INGRESS_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_hostif_packet_attr_ingress_lag_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_PACKET_ATTR_INGRESS_LAG"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_hostif_packet_attr_bridge_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_PACKET_ATTR_BRIDGE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_hostif_packet_attr_timestamp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_PACKET_ATTR_TIMESTAMP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_trap_attr_packet_action_set")
    def test_sai_hostif_trap_attr_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_TRAP_ATTR_PACKET_ACTION", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_trap_attr_packet_action_set"])
    def test_sai_hostif_trap_attr_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_TRAP_ATTR_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_trap_attr_trap_priority_set")
    def test_sai_hostif_trap_attr_trap_priority_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_TRAP_ATTR_TRAP_PRIORITY", 'SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_trap_attr_trap_priority_set"])
    def test_sai_hostif_trap_attr_trap_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_TRAP_ATTR_TRAP_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY', 'Get error, expected SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_trap_attr_exclude_port_list_set")
    def test_sai_hostif_trap_attr_exclude_port_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_TRAP_ATTR_EXCLUDE_PORT_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_trap_attr_exclude_port_list_set"])
    def test_sai_hostif_trap_attr_exclude_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_TRAP_ATTR_EXCLUDE_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_trap_attr_trap_group_set")
    def test_sai_hostif_trap_attr_trap_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_TRAP_ATTR_TRAP_GROUP", 'SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_trap_attr_trap_group_set"])
    def test_sai_hostif_trap_attr_trap_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_TRAP_ATTR_TRAP_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP', 'Get error, expected SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_trap_attr_mirror_session_set")
    def test_sai_hostif_trap_attr_mirror_session_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_TRAP_ATTR_MIRROR_SESSION", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_trap_attr_mirror_session_set"])
    def test_sai_hostif_trap_attr_mirror_session_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_TRAP_ATTR_MIRROR_SESSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_trap_attr_counter_id_set")
    def test_sai_hostif_trap_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_TRAP_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_trap_attr_counter_id_set"])
    def test_sai_hostif_trap_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_TRAP_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_trap_group_attr_admin_state_set")
    def test_sai_hostif_trap_group_attr_admin_state_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_TRAP_GROUP_ATTR_ADMIN_STATE", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_trap_group_attr_admin_state_set"])
    def test_sai_hostif_trap_group_attr_admin_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_TRAP_GROUP_ATTR_ADMIN_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_trap_group_attr_queue_set")
    def test_sai_hostif_trap_group_attr_queue_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_TRAP_GROUP_ATTR_QUEUE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_trap_group_attr_queue_set"])
    def test_sai_hostif_trap_group_attr_queue_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_TRAP_GROUP_ATTR_QUEUE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_trap_group_attr_policer_set")
    def test_sai_hostif_trap_group_attr_policer_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_TRAP_GROUP_ATTR_POLICER", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_trap_group_attr_policer_set"])
    def test_sai_hostif_trap_group_attr_policer_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_TRAP_GROUP_ATTR_POLICER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_user_defined_trap_attr_trap_priority_set")
    def test_sai_hostif_user_defined_trap_attr_trap_priority_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_PRIORITY", 'SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_user_defined_trap_attr_trap_priority_set"])
    def test_sai_hostif_user_defined_trap_attr_trap_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY', 'Get error, expected SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_hostif_user_defined_trap_attr_trap_group_set")
    def test_sai_hostif_user_defined_trap_attr_trap_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_GROUP", 'SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_hostif_user_defined_trap_attr_trap_group_set"])
    def test_sai_hostif_user_defined_trap_attr_trap_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP', 'Get error, expected SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_inbound_routing_entry_attr_action_set")
    def test_sai_inbound_routing_entry_attr_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INBOUND_ROUTING_ENTRY_ATTR_ACTION", 'SAI_INBOUND_ROUTING_ENTRY_ACTION_VXLAN_DECAP']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_inbound_routing_entry_attr_action_set"])
    def test_sai_inbound_routing_entry_attr_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INBOUND_ROUTING_ENTRY_ATTR_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_INBOUND_ROUTING_ENTRY_ACTION_VXLAN_DECAP', 'Get error, expected SAI_INBOUND_ROUTING_ENTRY_ACTION_VXLAN_DECAP but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_inbound_routing_entry_attr_src_vnet_id_set")
    def test_sai_inbound_routing_entry_attr_src_vnet_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INBOUND_ROUTING_ENTRY_ATTR_SRC_VNET_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_inbound_routing_entry_attr_src_vnet_id_set"])
    def test_sai_inbound_routing_entry_attr_src_vnet_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INBOUND_ROUTING_ENTRY_ATTR_SRC_VNET_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_inbound_routing_entry_attr_ip_addr_family_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INBOUND_ROUTING_ENTRY_ATTR_IP_ADDR_FAMILY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ingress_priority_group_attr_buffer_profile_set")
    def test_sai_ingress_priority_group_attr_buffer_profile_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INGRESS_PRIORITY_GROUP_ATTR_BUFFER_PROFILE", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ingress_priority_group_attr_buffer_profile_set"])
    def test_sai_ingress_priority_group_attr_buffer_profile_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INGRESS_PRIORITY_GROUP_ATTR_BUFFER_PROFILE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ingress_priority_group_attr_tam_set")
    def test_sai_ingress_priority_group_attr_tam_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INGRESS_PRIORITY_GROUP_ATTR_TAM", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ingress_priority_group_attr_tam_set"])
    def test_sai_ingress_priority_group_attr_tam_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INGRESS_PRIORITY_GROUP_ATTR_TAM"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_inseg_entry_attr_num_of_pop_set")
    def test_sai_inseg_entry_attr_num_of_pop_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_NUM_OF_POP", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_inseg_entry_attr_num_of_pop_set"])
    def test_sai_inseg_entry_attr_num_of_pop_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_NUM_OF_POP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_inseg_entry_attr_packet_action_set")
    def test_sai_inseg_entry_attr_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_inseg_entry_attr_packet_action_set"])
    def test_sai_inseg_entry_attr_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_inseg_entry_attr_trap_priority_set")
    def test_sai_inseg_entry_attr_trap_priority_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_TRAP_PRIORITY", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_inseg_entry_attr_trap_priority_set"])
    def test_sai_inseg_entry_attr_trap_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_TRAP_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_inseg_entry_attr_next_hop_id_set")
    def test_sai_inseg_entry_attr_next_hop_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_NEXT_HOP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_inseg_entry_attr_next_hop_id_set"])
    def test_sai_inseg_entry_attr_next_hop_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_NEXT_HOP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_inseg_entry_attr_psc_type_set")
    def test_sai_inseg_entry_attr_psc_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_PSC_TYPE", 'SAI_INSEG_ENTRY_PSC_TYPE_ELSP']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_inseg_entry_attr_psc_type_set"])
    def test_sai_inseg_entry_attr_psc_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_PSC_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_INSEG_ENTRY_PSC_TYPE_ELSP', 'Get error, expected SAI_INSEG_ENTRY_PSC_TYPE_ELSP but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_inseg_entry_attr_qos_tc_set")
    def test_sai_inseg_entry_attr_qos_tc_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_QOS_TC", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_inseg_entry_attr_qos_tc_set"])
    def test_sai_inseg_entry_attr_qos_tc_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_QOS_TC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_inseg_entry_attr_mpls_exp_to_tc_map_set")
    def test_sai_inseg_entry_attr_mpls_exp_to_tc_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_inseg_entry_attr_mpls_exp_to_tc_map_set"])
    def test_sai_inseg_entry_attr_mpls_exp_to_tc_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_inseg_entry_attr_mpls_exp_to_color_map_set")
    def test_sai_inseg_entry_attr_mpls_exp_to_color_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_inseg_entry_attr_mpls_exp_to_color_map_set"])
    def test_sai_inseg_entry_attr_mpls_exp_to_color_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_inseg_entry_attr_pop_ttl_mode_set")
    def test_sai_inseg_entry_attr_pop_ttl_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_POP_TTL_MODE", 'SAI_INSEG_ENTRY_POP_TTL_MODE_UNIFORM']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_inseg_entry_attr_pop_ttl_mode_set"])
    def test_sai_inseg_entry_attr_pop_ttl_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_POP_TTL_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_INSEG_ENTRY_POP_TTL_MODE_UNIFORM', 'Get error, expected SAI_INSEG_ENTRY_POP_TTL_MODE_UNIFORM but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_inseg_entry_attr_pop_qos_mode_set")
    def test_sai_inseg_entry_attr_pop_qos_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_POP_QOS_MODE", 'SAI_INSEG_ENTRY_POP_QOS_MODE_UNIFORM']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_inseg_entry_attr_pop_qos_mode_set"])
    def test_sai_inseg_entry_attr_pop_qos_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_POP_QOS_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_INSEG_ENTRY_POP_QOS_MODE_UNIFORM', 'Get error, expected SAI_INSEG_ENTRY_POP_QOS_MODE_UNIFORM but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_inseg_entry_attr_counter_id_set")
    def test_sai_inseg_entry_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_inseg_entry_attr_counter_id_set"])
    def test_sai_inseg_entry_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_INSEG_ENTRY_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipmc_entry_attr_packet_action_set")
    def test_sai_ipmc_entry_attr_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPMC_ENTRY_ATTR_PACKET_ACTION", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipmc_entry_attr_packet_action_set"])
    def test_sai_ipmc_entry_attr_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPMC_ENTRY_ATTR_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipmc_entry_attr_output_group_id_set")
    def test_sai_ipmc_entry_attr_output_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPMC_ENTRY_ATTR_OUTPUT_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipmc_entry_attr_output_group_id_set"])
    def test_sai_ipmc_entry_attr_output_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPMC_ENTRY_ATTR_OUTPUT_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipmc_entry_attr_rpf_group_id_set")
    def test_sai_ipmc_entry_attr_rpf_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPMC_ENTRY_ATTR_RPF_GROUP_ID", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipmc_entry_attr_rpf_group_id_set"])
    def test_sai_ipmc_entry_attr_rpf_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPMC_ENTRY_ATTR_RPF_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipmc_entry_attr_counter_id_set")
    def test_sai_ipmc_entry_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPMC_ENTRY_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipmc_entry_attr_counter_id_set"])
    def test_sai_ipmc_entry_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPMC_ENTRY_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_ipmc_group_attr_ipmc_output_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPMC_GROUP_ATTR_IPMC_OUTPUT_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ipmc_group_attr_ipmc_member_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPMC_GROUP_ATTR_IPMC_MEMBER_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ipsec_attr_term_remote_ip_match_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_TERM_REMOTE_IP_MATCH_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ipsec_attr_switching_mode_cut_through_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ipsec_attr_switching_mode_store_and_forward_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ipsec_attr_stats_mode_read_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_STATS_MODE_READ_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ipsec_attr_stats_mode_read_clear_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ipsec_attr_sn_32bit_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_SN_32BIT_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ipsec_attr_esn_64bit_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_ESN_64BIT_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ipsec_attr_supported_cipher_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_SUPPORTED_CIPHER_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ipsec_attr_system_side_mtu_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_SYSTEM_SIDE_MTU"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ipsec_attr_warm_boot_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_WARM_BOOT_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_attr_warm_boot_enable_set")
    def test_sai_ipsec_attr_warm_boot_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_ATTR_WARM_BOOT_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_attr_warm_boot_enable_set"])
    def test_sai_ipsec_attr_warm_boot_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_WARM_BOOT_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_attr_ctag_tpid_set")
    def test_sai_ipsec_attr_ctag_tpid_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_ATTR_CTAG_TPID", '0x8100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_attr_ctag_tpid_set"])
    def test_sai_ipsec_attr_ctag_tpid_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_CTAG_TPID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0x8100', 'Get error, expected 0x8100 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_attr_stag_tpid_set")
    def test_sai_ipsec_attr_stag_tpid_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_ATTR_STAG_TPID", '0x88A8']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_attr_stag_tpid_set"])
    def test_sai_ipsec_attr_stag_tpid_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_STAG_TPID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0x88A8', 'Get error, expected 0x88A8 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_attr_max_vlan_tags_parsed_set")
    def test_sai_ipsec_attr_max_vlan_tags_parsed_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_ATTR_MAX_VLAN_TAGS_PARSED", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_attr_max_vlan_tags_parsed_set"])
    def test_sai_ipsec_attr_max_vlan_tags_parsed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_MAX_VLAN_TAGS_PARSED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_attr_octet_count_high_watermark_set")
    def test_sai_ipsec_attr_octet_count_high_watermark_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_ATTR_OCTET_COUNT_HIGH_WATERMARK", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_attr_octet_count_high_watermark_set"])
    def test_sai_ipsec_attr_octet_count_high_watermark_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_OCTET_COUNT_HIGH_WATERMARK"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_attr_octet_count_low_watermark_set")
    def test_sai_ipsec_attr_octet_count_low_watermark_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_ATTR_OCTET_COUNT_LOW_WATERMARK", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_attr_octet_count_low_watermark_set"])
    def test_sai_ipsec_attr_octet_count_low_watermark_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_OCTET_COUNT_LOW_WATERMARK"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_attr_stats_mode_set")
    def test_sai_ipsec_attr_stats_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_ATTR_STATS_MODE", 'SAI_STATS_MODE_READ_AND_CLEAR']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_attr_stats_mode_set"])
    def test_sai_ipsec_attr_stats_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_STATS_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_STATS_MODE_READ_AND_CLEAR', 'Get error, expected SAI_STATS_MODE_READ_AND_CLEAR but got %s' %  r_value


    
    def test_sai_ipsec_attr_available_ipsec_sa_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_AVAILABLE_IPSEC_SA"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_ipsec_attr_sa_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_ATTR_SA_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_port_attr_ctag_enable_set")
    def test_sai_ipsec_port_attr_ctag_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_PORT_ATTR_CTAG_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_port_attr_ctag_enable_set"])
    def test_sai_ipsec_port_attr_ctag_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_PORT_ATTR_CTAG_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_port_attr_stag_enable_set")
    def test_sai_ipsec_port_attr_stag_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_PORT_ATTR_STAG_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_port_attr_stag_enable_set"])
    def test_sai_ipsec_port_attr_stag_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_PORT_ATTR_STAG_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_port_attr_vrf_from_packet_vlan_enable_set")
    def test_sai_ipsec_port_attr_vrf_from_packet_vlan_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_PORT_ATTR_VRF_FROM_PACKET_VLAN_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_port_attr_vrf_from_packet_vlan_enable_set"])
    def test_sai_ipsec_port_attr_vrf_from_packet_vlan_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_PORT_ATTR_VRF_FROM_PACKET_VLAN_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_port_attr_switch_switching_mode_set")
    def test_sai_ipsec_port_attr_switch_switching_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_PORT_ATTR_SWITCH_SWITCHING_MODE", 'SAI_SWITCH_SWITCHING_MODE_CUT_THROUGH']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_port_attr_switch_switching_mode_set"])
    def test_sai_ipsec_port_attr_switch_switching_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_PORT_ATTR_SWITCH_SWITCHING_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_SWITCH_SWITCHING_MODE_CUT_THROUGH', 'Get error, expected SAI_SWITCH_SWITCHING_MODE_CUT_THROUGH but got %s' %  r_value


    
    def test_sai_ipsec_sa_attr_octet_count_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_SA_ATTR_OCTET_COUNT_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_sa_attr_external_sa_index_set")
    def test_sai_ipsec_sa_attr_external_sa_index_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_SA_ATTR_EXTERNAL_SA_INDEX", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_sa_attr_external_sa_index_set"])
    def test_sai_ipsec_sa_attr_external_sa_index_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_SA_ATTR_EXTERNAL_SA_INDEX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    
    def test_sai_ipsec_sa_attr_sa_index_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_SA_ATTR_SA_INDEX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_sa_attr_ipsec_port_list_set")
    def test_sai_ipsec_sa_attr_ipsec_port_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_SA_ATTR_IPSEC_PORT_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_sa_attr_ipsec_port_list_set"])
    def test_sai_ipsec_sa_attr_ipsec_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_SA_ATTR_IPSEC_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_sa_attr_ipsec_replay_protection_enable_set")
    def test_sai_ipsec_sa_attr_ipsec_replay_protection_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_sa_attr_ipsec_replay_protection_enable_set"])
    def test_sai_ipsec_sa_attr_ipsec_replay_protection_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_sa_attr_ipsec_replay_protection_window_set")
    def test_sai_ipsec_sa_attr_ipsec_replay_protection_window_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_WINDOW", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_sa_attr_ipsec_replay_protection_window_set"])
    def test_sai_ipsec_sa_attr_ipsec_replay_protection_window_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_WINDOW"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_sa_attr_egress_esn_set")
    def test_sai_ipsec_sa_attr_egress_esn_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_SA_ATTR_EGRESS_ESN", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_sa_attr_egress_esn_set"])
    def test_sai_ipsec_sa_attr_egress_esn_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_SA_ATTR_EGRESS_ESN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_ipsec_sa_attr_minimum_ingress_esn_set")
    def test_sai_ipsec_sa_attr_minimum_ingress_esn_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_IPSEC_SA_ATTR_MINIMUM_INGRESS_ESN", '1']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_ipsec_sa_attr_minimum_ingress_esn_set"])
    def test_sai_ipsec_sa_attr_minimum_ingress_esn_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_IPSEC_SA_ATTR_MINIMUM_INGRESS_ESN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '1', 'Get error, expected 1 but got %s' %  r_value


    
    def test_sai_isolation_group_attr_isolation_member_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ISOLATION_GROUP_ATTR_ISOLATION_MEMBER_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_l2mc_entry_attr_packet_action_set")
    def test_sai_l2mc_entry_attr_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_L2MC_ENTRY_ATTR_PACKET_ACTION", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_l2mc_entry_attr_packet_action_set"])
    def test_sai_l2mc_entry_attr_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_L2MC_ENTRY_ATTR_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_l2mc_entry_attr_output_group_id_set")
    def test_sai_l2mc_entry_attr_output_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_L2MC_ENTRY_ATTR_OUTPUT_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_l2mc_entry_attr_output_group_id_set"])
    def test_sai_l2mc_entry_attr_output_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_L2MC_ENTRY_ATTR_OUTPUT_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_l2mc_group_attr_l2mc_output_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_L2MC_GROUP_ATTR_L2MC_OUTPUT_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_l2mc_group_attr_l2mc_member_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_L2MC_GROUP_ATTR_L2MC_MEMBER_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_lag_attr_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_ATTR_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_lag_attr_ingress_acl_set")
    def test_sai_lag_attr_ingress_acl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_LAG_ATTR_INGRESS_ACL", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_lag_attr_ingress_acl_set"])
    def test_sai_lag_attr_ingress_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_ATTR_INGRESS_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_lag_attr_egress_acl_set")
    def test_sai_lag_attr_egress_acl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_LAG_ATTR_EGRESS_ACL", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_lag_attr_egress_acl_set"])
    def test_sai_lag_attr_egress_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_ATTR_EGRESS_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_lag_attr_port_vlan_id_set")
    def test_sai_lag_attr_port_vlan_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_LAG_ATTR_PORT_VLAN_ID", '1']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_lag_attr_port_vlan_id_set"])
    def test_sai_lag_attr_port_vlan_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_ATTR_PORT_VLAN_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '1', 'Get error, expected 1 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_lag_attr_default_vlan_priority_set")
    def test_sai_lag_attr_default_vlan_priority_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_LAG_ATTR_DEFAULT_VLAN_PRIORITY", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_lag_attr_default_vlan_priority_set"])
    def test_sai_lag_attr_default_vlan_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_ATTR_DEFAULT_VLAN_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_lag_attr_drop_untagged_set")
    def test_sai_lag_attr_drop_untagged_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_LAG_ATTR_DROP_UNTAGGED", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_lag_attr_drop_untagged_set"])
    def test_sai_lag_attr_drop_untagged_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_ATTR_DROP_UNTAGGED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_lag_attr_drop_tagged_set")
    def test_sai_lag_attr_drop_tagged_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_LAG_ATTR_DROP_TAGGED", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_lag_attr_drop_tagged_set"])
    def test_sai_lag_attr_drop_tagged_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_ATTR_DROP_TAGGED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_lag_attr_tpid_set")
    def test_sai_lag_attr_tpid_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_LAG_ATTR_TPID", '0x8100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_lag_attr_tpid_set"])
    def test_sai_lag_attr_tpid_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_ATTR_TPID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0x8100', 'Get error, expected 0x8100 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_lag_attr_label_set")
    def test_sai_lag_attr_label_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_LAG_ATTR_LABEL", '""']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_lag_attr_label_set"])
    def test_sai_lag_attr_label_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_ATTR_LABEL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '""', 'Get error, expected "" but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_lag_attr_ars_object_id_set")
    def test_sai_lag_attr_ars_object_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_LAG_ATTR_ARS_OBJECT_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_lag_attr_ars_object_id_set"])
    def test_sai_lag_attr_ars_object_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_ATTR_ARS_OBJECT_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_lag_attr_ars_packet_drops_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_ATTR_ARS_PACKET_DROPS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_lag_attr_ars_port_reassignments_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_ATTR_ARS_PORT_REASSIGNMENTS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_lag_member_attr_egress_disable_set")
    def test_sai_lag_member_attr_egress_disable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_LAG_MEMBER_ATTR_EGRESS_DISABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_lag_member_attr_egress_disable_set"])
    def test_sai_lag_member_attr_egress_disable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_MEMBER_ATTR_EGRESS_DISABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_lag_member_attr_ingress_disable_set")
    def test_sai_lag_member_attr_ingress_disable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_LAG_MEMBER_ATTR_INGRESS_DISABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_lag_member_attr_ingress_disable_set"])
    def test_sai_lag_member_attr_ingress_disable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_LAG_MEMBER_ATTR_INGRESS_DISABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    
    def test_sai_macsec_attr_switching_mode_cut_through_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_switching_mode_store_and_forward_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_stats_mode_read_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_STATS_MODE_READ_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_stats_mode_read_clear_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_sci_in_ingress_macsec_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_SCI_IN_INGRESS_MACSEC_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_supported_cipher_suite_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_SUPPORTED_CIPHER_SUITE_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_pn_32bit_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_PN_32BIT_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_xpn_64bit_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_XPN_64BIT_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_gcm_aes128_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_GCM_AES128_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_gcm_aes256_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_GCM_AES256_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_sectag_offsets_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_SECTAG_OFFSETS_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_system_side_mtu_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_SYSTEM_SIDE_MTU"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_warm_boot_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_WARM_BOOT_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_attr_warm_boot_enable_set")
    def test_sai_macsec_attr_warm_boot_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_ATTR_WARM_BOOT_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_attr_warm_boot_enable_set"])
    def test_sai_macsec_attr_warm_boot_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_WARM_BOOT_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_attr_ctag_tpid_set")
    def test_sai_macsec_attr_ctag_tpid_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_ATTR_CTAG_TPID", '0x8100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_attr_ctag_tpid_set"])
    def test_sai_macsec_attr_ctag_tpid_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_CTAG_TPID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0x8100', 'Get error, expected 0x8100 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_attr_stag_tpid_set")
    def test_sai_macsec_attr_stag_tpid_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_ATTR_STAG_TPID", '0x88A8']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_attr_stag_tpid_set"])
    def test_sai_macsec_attr_stag_tpid_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_STAG_TPID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0x88A8', 'Get error, expected 0x88A8 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_attr_max_vlan_tags_parsed_set")
    def test_sai_macsec_attr_max_vlan_tags_parsed_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_ATTR_MAX_VLAN_TAGS_PARSED", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_attr_max_vlan_tags_parsed_set"])
    def test_sai_macsec_attr_max_vlan_tags_parsed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_MAX_VLAN_TAGS_PARSED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_attr_stats_mode_set")
    def test_sai_macsec_attr_stats_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_ATTR_STATS_MODE", 'SAI_STATS_MODE_READ_AND_CLEAR']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_attr_stats_mode_set"])
    def test_sai_macsec_attr_stats_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_STATS_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_STATS_MODE_READ_AND_CLEAR', 'Get error, expected SAI_STATS_MODE_READ_AND_CLEAR but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_attr_physical_bypass_enable_set")
    def test_sai_macsec_attr_physical_bypass_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_ATTR_PHYSICAL_BYPASS_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_attr_physical_bypass_enable_set"])
    def test_sai_macsec_attr_physical_bypass_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_PHYSICAL_BYPASS_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    
    def test_sai_macsec_attr_supported_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_SUPPORTED_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_available_macsec_flow_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_AVAILABLE_MACSEC_FLOW"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_flow_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_FLOW_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_available_macsec_sc_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_available_macsec_sa_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SA"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_attr_max_secure_associations_per_sc_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_ATTR_MAX_SECURE_ASSOCIATIONS_PER_SC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_flow_attr_acl_entry_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_FLOW_ATTR_ACL_ENTRY_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_macsec_flow_attr_sc_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_FLOW_ATTR_SC_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_port_attr_ctag_enable_set")
    def test_sai_macsec_port_attr_ctag_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_PORT_ATTR_CTAG_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_port_attr_ctag_enable_set"])
    def test_sai_macsec_port_attr_ctag_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_PORT_ATTR_CTAG_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_port_attr_stag_enable_set")
    def test_sai_macsec_port_attr_stag_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_PORT_ATTR_STAG_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_port_attr_stag_enable_set"])
    def test_sai_macsec_port_attr_stag_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_PORT_ATTR_STAG_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_port_attr_switch_switching_mode_set")
    def test_sai_macsec_port_attr_switch_switching_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_PORT_ATTR_SWITCH_SWITCHING_MODE", 'SAI_SWITCH_SWITCHING_MODE_CUT_THROUGH']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_port_attr_switch_switching_mode_set"])
    def test_sai_macsec_port_attr_switch_switching_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_PORT_ATTR_SWITCH_SWITCHING_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_SWITCH_SWITCHING_MODE_CUT_THROUGH', 'Get error, expected SAI_SWITCH_SWITCHING_MODE_CUT_THROUGH but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_sa_attr_configured_egress_xpn_set")
    def test_sai_macsec_sa_attr_configured_egress_xpn_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_SA_ATTR_CONFIGURED_EGRESS_XPN", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_sa_attr_configured_egress_xpn_set"])
    def test_sai_macsec_sa_attr_configured_egress_xpn_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_SA_ATTR_CONFIGURED_EGRESS_XPN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    
    def test_sai_macsec_sa_attr_current_xpn_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_SA_ATTR_CURRENT_XPN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_sa_attr_minimum_ingress_xpn_set")
    def test_sai_macsec_sa_attr_minimum_ingress_xpn_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_SA_ATTR_MINIMUM_INGRESS_XPN", '1']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_sa_attr_minimum_ingress_xpn_set"])
    def test_sai_macsec_sa_attr_minimum_ingress_xpn_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_SA_ATTR_MINIMUM_INGRESS_XPN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '1', 'Get error, expected 1 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_sc_attr_macsec_explicit_sci_enable_set")
    def test_sai_macsec_sc_attr_macsec_explicit_sci_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_SC_ATTR_MACSEC_EXPLICIT_SCI_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_sc_attr_macsec_explicit_sci_enable_set"])
    def test_sai_macsec_sc_attr_macsec_explicit_sci_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_SC_ATTR_MACSEC_EXPLICIT_SCI_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_sc_attr_macsec_sectag_offset_set")
    def test_sai_macsec_sc_attr_macsec_sectag_offset_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_SC_ATTR_MACSEC_SECTAG_OFFSET", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_sc_attr_macsec_sectag_offset_set"])
    def test_sai_macsec_sc_attr_macsec_sectag_offset_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_SC_ATTR_MACSEC_SECTAG_OFFSET"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    
    def test_sai_macsec_sc_attr_active_egress_sa_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_SC_ATTR_ACTIVE_EGRESS_SA_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_sc_attr_macsec_replay_protection_enable_set")
    def test_sai_macsec_sc_attr_macsec_replay_protection_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_ENABLE", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_sc_attr_macsec_replay_protection_enable_set"])
    def test_sai_macsec_sc_attr_macsec_replay_protection_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_sc_attr_macsec_replay_protection_window_set")
    def test_sai_macsec_sc_attr_macsec_replay_protection_window_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_WINDOW", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_sc_attr_macsec_replay_protection_window_set"])
    def test_sai_macsec_sc_attr_macsec_replay_protection_window_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_WINDOW"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    
    def test_sai_macsec_sc_attr_sa_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_SC_ATTR_SA_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_sc_attr_macsec_cipher_suite_set")
    def test_sai_macsec_sc_attr_macsec_cipher_suite_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_SC_ATTR_MACSEC_CIPHER_SUITE", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_sc_attr_macsec_cipher_suite_set"])
    def test_sai_macsec_sc_attr_macsec_cipher_suite_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_SC_ATTR_MACSEC_CIPHER_SUITE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_macsec_sc_attr_encryption_enable_set")
    def test_sai_macsec_sc_attr_encryption_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MACSEC_SC_ATTR_ENCRYPTION_ENABLE", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_macsec_sc_attr_encryption_enable_set"])
    def test_sai_macsec_sc_attr_encryption_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MACSEC_SC_ATTR_ENCRYPTION_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mcast_fdb_entry_attr_group_id_set")
    def test_sai_mcast_fdb_entry_attr_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MCAST_FDB_ENTRY_ATTR_GROUP_ID", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mcast_fdb_entry_attr_group_id_set"])
    def test_sai_mcast_fdb_entry_attr_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MCAST_FDB_ENTRY_ATTR_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mcast_fdb_entry_attr_packet_action_set")
    def test_sai_mcast_fdb_entry_attr_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MCAST_FDB_ENTRY_ATTR_PACKET_ACTION", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mcast_fdb_entry_attr_packet_action_set"])
    def test_sai_mcast_fdb_entry_attr_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MCAST_FDB_ENTRY_ATTR_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mcast_fdb_entry_attr_meta_data_set")
    def test_sai_mcast_fdb_entry_attr_meta_data_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MCAST_FDB_ENTRY_ATTR_META_DATA", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mcast_fdb_entry_attr_meta_data_set"])
    def test_sai_mcast_fdb_entry_attr_meta_data_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MCAST_FDB_ENTRY_ATTR_META_DATA"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_monitor_port_set")
    def test_sai_mirror_session_attr_monitor_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_MONITOR_PORT", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_monitor_port_set"])
    def test_sai_mirror_session_attr_monitor_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_MONITOR_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_truncate_size_set")
    def test_sai_mirror_session_attr_truncate_size_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_TRUNCATE_SIZE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_truncate_size_set"])
    def test_sai_mirror_session_attr_truncate_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_TRUNCATE_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_sample_rate_set")
    def test_sai_mirror_session_attr_sample_rate_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_SAMPLE_RATE", '1']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_sample_rate_set"])
    def test_sai_mirror_session_attr_sample_rate_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_SAMPLE_RATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '1', 'Get error, expected 1 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_congestion_mode_set")
    def test_sai_mirror_session_attr_congestion_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_CONGESTION_MODE", 'SAI_MIRROR_SESSION_CONGESTION_MODE_INDEPENDENT']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_congestion_mode_set"])
    def test_sai_mirror_session_attr_congestion_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_CONGESTION_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_MIRROR_SESSION_CONGESTION_MODE_INDEPENDENT', 'Get error, expected SAI_MIRROR_SESSION_CONGESTION_MODE_INDEPENDENT but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_tc_set")
    def test_sai_mirror_session_attr_tc_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_TC", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_tc_set"])
    def test_sai_mirror_session_attr_tc_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_TC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_vlan_tpid_set")
    def test_sai_mirror_session_attr_vlan_tpid_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_VLAN_TPID", '0x8100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_vlan_tpid_set"])
    def test_sai_mirror_session_attr_vlan_tpid_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_VLAN_TPID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0x8100', 'Get error, expected 0x8100 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_vlan_id_set")
    def test_sai_mirror_session_attr_vlan_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_VLAN_ID", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_vlan_id_set"])
    def test_sai_mirror_session_attr_vlan_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_VLAN_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_vlan_pri_set")
    def test_sai_mirror_session_attr_vlan_pri_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_VLAN_PRI", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_vlan_pri_set"])
    def test_sai_mirror_session_attr_vlan_pri_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_VLAN_PRI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_vlan_cfi_set")
    def test_sai_mirror_session_attr_vlan_cfi_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_VLAN_CFI", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_vlan_cfi_set"])
    def test_sai_mirror_session_attr_vlan_cfi_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_VLAN_CFI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_vlan_header_valid_set")
    def test_sai_mirror_session_attr_vlan_header_valid_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_VLAN_HEADER_VALID", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_vlan_header_valid_set"])
    def test_sai_mirror_session_attr_vlan_header_valid_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_VLAN_HEADER_VALID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_iphdr_version_set")
    def test_sai_mirror_session_attr_iphdr_version_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_IPHDR_VERSION", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_iphdr_version_set"])
    def test_sai_mirror_session_attr_iphdr_version_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_IPHDR_VERSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_tos_set")
    def test_sai_mirror_session_attr_tos_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_TOS", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_tos_set"])
    def test_sai_mirror_session_attr_tos_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_TOS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_ttl_set")
    def test_sai_mirror_session_attr_ttl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_TTL", '255']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_ttl_set"])
    def test_sai_mirror_session_attr_ttl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_TTL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '255', 'Get error, expected 255 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_src_ip_address_set")
    def test_sai_mirror_session_attr_src_ip_address_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_SRC_IP_ADDRESS", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_src_ip_address_set"])
    def test_sai_mirror_session_attr_src_ip_address_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_SRC_IP_ADDRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_dst_ip_address_set")
    def test_sai_mirror_session_attr_dst_ip_address_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_DST_IP_ADDRESS", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_dst_ip_address_set"])
    def test_sai_mirror_session_attr_dst_ip_address_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_DST_IP_ADDRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_src_mac_address_set")
    def test_sai_mirror_session_attr_src_mac_address_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_src_mac_address_set"])
    def test_sai_mirror_session_attr_src_mac_address_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_dst_mac_address_set")
    def test_sai_mirror_session_attr_dst_mac_address_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_DST_MAC_ADDRESS", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_dst_mac_address_set"])
    def test_sai_mirror_session_attr_dst_mac_address_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_DST_MAC_ADDRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_gre_protocol_type_set")
    def test_sai_mirror_session_attr_gre_protocol_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_gre_protocol_type_set"])
    def test_sai_mirror_session_attr_gre_protocol_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_monitor_portlist_set")
    def test_sai_mirror_session_attr_monitor_portlist_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_monitor_portlist_set"])
    def test_sai_mirror_session_attr_monitor_portlist_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_policer_set")
    def test_sai_mirror_session_attr_policer_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_POLICER", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_policer_set"])
    def test_sai_mirror_session_attr_policer_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_POLICER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_udp_src_port_set")
    def test_sai_mirror_session_attr_udp_src_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_UDP_SRC_PORT", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_udp_src_port_set"])
    def test_sai_mirror_session_attr_udp_src_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_UDP_SRC_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_udp_dst_port_set")
    def test_sai_mirror_session_attr_udp_dst_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_UDP_DST_PORT", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_udp_dst_port_set"])
    def test_sai_mirror_session_attr_udp_dst_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_UDP_DST_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_mirror_session_attr_counter_id_set")
    def test_sai_mirror_session_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_mirror_session_attr_counter_id_set"])
    def test_sai_mirror_session_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MIRROR_SESSION_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_my_mac_attr_priority_set")
    def test_sai_my_mac_attr_priority_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MY_MAC_ATTR_PRIORITY", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_my_mac_attr_priority_set"])
    def test_sai_my_mac_attr_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MY_MAC_ATTR_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_my_sid_entry_attr_endpoint_behavior_set")
    def test_sai_my_sid_entry_attr_endpoint_behavior_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_my_sid_entry_attr_endpoint_behavior_set"])
    def test_sai_my_sid_entry_attr_endpoint_behavior_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_my_sid_entry_attr_endpoint_behavior_flavor_set")
    def test_sai_my_sid_entry_attr_endpoint_behavior_flavor_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR_FLAVOR", 'SAI_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_NONE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_my_sid_entry_attr_endpoint_behavior_flavor_set"])
    def test_sai_my_sid_entry_attr_endpoint_behavior_flavor_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR_FLAVOR"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_NONE', 'Get error, expected SAI_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_NONE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_my_sid_entry_attr_packet_action_set")
    def test_sai_my_sid_entry_attr_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_my_sid_entry_attr_packet_action_set"])
    def test_sai_my_sid_entry_attr_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_my_sid_entry_attr_trap_priority_set")
    def test_sai_my_sid_entry_attr_trap_priority_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_TRAP_PRIORITY", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_my_sid_entry_attr_trap_priority_set"])
    def test_sai_my_sid_entry_attr_trap_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_TRAP_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_my_sid_entry_attr_next_hop_id_set")
    def test_sai_my_sid_entry_attr_next_hop_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_NEXT_HOP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_my_sid_entry_attr_next_hop_id_set"])
    def test_sai_my_sid_entry_attr_next_hop_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_NEXT_HOP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_my_sid_entry_attr_tunnel_id_set")
    def test_sai_my_sid_entry_attr_tunnel_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_TUNNEL_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_my_sid_entry_attr_tunnel_id_set"])
    def test_sai_my_sid_entry_attr_tunnel_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_TUNNEL_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_my_sid_entry_attr_vrf_set")
    def test_sai_my_sid_entry_attr_vrf_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_VRF", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_my_sid_entry_attr_vrf_set"])
    def test_sai_my_sid_entry_attr_vrf_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_VRF"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_my_sid_entry_attr_counter_id_set")
    def test_sai_my_sid_entry_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_my_sid_entry_attr_counter_id_set"])
    def test_sai_my_sid_entry_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_MY_SID_ENTRY_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_nat_type_set")
    def test_sai_nat_entry_attr_nat_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_NAT_TYPE", 'SAI_NAT_TYPE_NONE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_nat_type_set"])
    def test_sai_nat_entry_attr_nat_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_NAT_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NAT_TYPE_NONE', 'Get error, expected SAI_NAT_TYPE_NONE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_src_ip_set")
    def test_sai_nat_entry_attr_src_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_SRC_IP", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_src_ip_set"])
    def test_sai_nat_entry_attr_src_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_SRC_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_src_ip_mask_set")
    def test_sai_nat_entry_attr_src_ip_mask_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_SRC_IP_MASK", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_src_ip_mask_set"])
    def test_sai_nat_entry_attr_src_ip_mask_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_SRC_IP_MASK"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_vr_id_set")
    def test_sai_nat_entry_attr_vr_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_VR_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_vr_id_set"])
    def test_sai_nat_entry_attr_vr_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_VR_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_dst_ip_set")
    def test_sai_nat_entry_attr_dst_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_DST_IP", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_dst_ip_set"])
    def test_sai_nat_entry_attr_dst_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_DST_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_dst_ip_mask_set")
    def test_sai_nat_entry_attr_dst_ip_mask_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_DST_IP_MASK", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_dst_ip_mask_set"])
    def test_sai_nat_entry_attr_dst_ip_mask_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_DST_IP_MASK"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_l4_src_port_set")
    def test_sai_nat_entry_attr_l4_src_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_L4_SRC_PORT", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_l4_src_port_set"])
    def test_sai_nat_entry_attr_l4_src_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_L4_SRC_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_l4_dst_port_set")
    def test_sai_nat_entry_attr_l4_dst_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_L4_DST_PORT", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_l4_dst_port_set"])
    def test_sai_nat_entry_attr_l4_dst_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_L4_DST_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_enable_packet_count_set")
    def test_sai_nat_entry_attr_enable_packet_count_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_enable_packet_count_set"])
    def test_sai_nat_entry_attr_enable_packet_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_packet_count_set")
    def test_sai_nat_entry_attr_packet_count_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_PACKET_COUNT", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_packet_count_set"])
    def test_sai_nat_entry_attr_packet_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_PACKET_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_enable_byte_count_set")
    def test_sai_nat_entry_attr_enable_byte_count_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_enable_byte_count_set"])
    def test_sai_nat_entry_attr_enable_byte_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_byte_count_set")
    def test_sai_nat_entry_attr_byte_count_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_BYTE_COUNT", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_byte_count_set"])
    def test_sai_nat_entry_attr_byte_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_BYTE_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_hit_bit_cor_set")
    def test_sai_nat_entry_attr_hit_bit_cor_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_HIT_BIT_COR", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_hit_bit_cor_set"])
    def test_sai_nat_entry_attr_hit_bit_cor_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_HIT_BIT_COR"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_hit_bit_set")
    def test_sai_nat_entry_attr_hit_bit_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_HIT_BIT", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_hit_bit_set"])
    def test_sai_nat_entry_attr_hit_bit_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_HIT_BIT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_entry_attr_aging_time_set")
    def test_sai_nat_entry_attr_aging_time_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ENTRY_ATTR_AGING_TIME", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_entry_attr_aging_time_set"])
    def test_sai_nat_entry_attr_aging_time_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ENTRY_ATTR_AGING_TIME"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_zone_counter_attr_nat_type_set")
    def test_sai_nat_zone_counter_attr_nat_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ZONE_COUNTER_ATTR_NAT_TYPE", 'SAI_NAT_TYPE_NONE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_zone_counter_attr_nat_type_set"])
    def test_sai_nat_zone_counter_attr_nat_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ZONE_COUNTER_ATTR_NAT_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NAT_TYPE_NONE', 'Get error, expected SAI_NAT_TYPE_NONE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_zone_counter_attr_zone_id_set")
    def test_sai_nat_zone_counter_attr_zone_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ZONE_COUNTER_ATTR_ZONE_ID", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_zone_counter_attr_zone_id_set"])
    def test_sai_nat_zone_counter_attr_zone_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ZONE_COUNTER_ATTR_ZONE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_zone_counter_attr_discard_packet_count_set")
    def test_sai_nat_zone_counter_attr_discard_packet_count_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ZONE_COUNTER_ATTR_DISCARD_PACKET_COUNT", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_zone_counter_attr_discard_packet_count_set"])
    def test_sai_nat_zone_counter_attr_discard_packet_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ZONE_COUNTER_ATTR_DISCARD_PACKET_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_zone_counter_attr_translation_needed_packet_count_set")
    def test_sai_nat_zone_counter_attr_translation_needed_packet_count_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATION_NEEDED_PACKET_COUNT", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_zone_counter_attr_translation_needed_packet_count_set"])
    def test_sai_nat_zone_counter_attr_translation_needed_packet_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATION_NEEDED_PACKET_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_nat_zone_counter_attr_translations_packet_count_set")
    def test_sai_nat_zone_counter_attr_translations_packet_count_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATIONS_PACKET_COUNT", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_nat_zone_counter_attr_translations_packet_count_set"])
    def test_sai_nat_zone_counter_attr_translations_packet_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATIONS_PACKET_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_neighbor_entry_attr_dst_mac_address_set")
    def test_sai_neighbor_entry_attr_dst_mac_address_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_neighbor_entry_attr_dst_mac_address_set"])
    def test_sai_neighbor_entry_attr_dst_mac_address_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_neighbor_entry_attr_packet_action_set")
    def test_sai_neighbor_entry_attr_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_neighbor_entry_attr_packet_action_set"])
    def test_sai_neighbor_entry_attr_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_neighbor_entry_attr_user_trap_id_set")
    def test_sai_neighbor_entry_attr_user_trap_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_USER_TRAP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_neighbor_entry_attr_user_trap_id_set"])
    def test_sai_neighbor_entry_attr_user_trap_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_USER_TRAP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_neighbor_entry_attr_no_host_route_set")
    def test_sai_neighbor_entry_attr_no_host_route_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_NO_HOST_ROUTE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_neighbor_entry_attr_no_host_route_set"])
    def test_sai_neighbor_entry_attr_no_host_route_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_NO_HOST_ROUTE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_neighbor_entry_attr_meta_data_set")
    def test_sai_neighbor_entry_attr_meta_data_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_META_DATA", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_neighbor_entry_attr_meta_data_set"])
    def test_sai_neighbor_entry_attr_meta_data_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_META_DATA"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_neighbor_entry_attr_counter_id_set")
    def test_sai_neighbor_entry_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_neighbor_entry_attr_counter_id_set"])
    def test_sai_neighbor_entry_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_neighbor_entry_attr_encap_index_set")
    def test_sai_neighbor_entry_attr_encap_index_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_INDEX", 'internal']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_neighbor_entry_attr_encap_index_set"])
    def test_sai_neighbor_entry_attr_encap_index_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_INDEX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_neighbor_entry_attr_encap_impose_index_set")
    def test_sai_neighbor_entry_attr_encap_impose_index_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_IMPOSE_INDEX", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_neighbor_entry_attr_encap_impose_index_set"])
    def test_sai_neighbor_entry_attr_encap_impose_index_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_IMPOSE_INDEX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_neighbor_entry_attr_is_local_set")
    def test_sai_neighbor_entry_attr_is_local_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_IS_LOCAL", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_neighbor_entry_attr_is_local_set"])
    def test_sai_neighbor_entry_attr_is_local_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_IS_LOCAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    
    def test_sai_neighbor_entry_attr_ip_addr_family_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEIGHBOR_ENTRY_ATTR_IP_ADDR_FAMILY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_attr_tunnel_vni_set")
    def test_sai_next_hop_attr_tunnel_vni_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_ATTR_TUNNEL_VNI", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_attr_tunnel_vni_set"])
    def test_sai_next_hop_attr_tunnel_vni_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_ATTR_TUNNEL_VNI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_attr_tunnel_mac_set")
    def test_sai_next_hop_attr_tunnel_mac_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_ATTR_TUNNEL_MAC", 'SAI_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_attr_tunnel_mac_set"])
    def test_sai_next_hop_attr_tunnel_mac_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_ATTR_TUNNEL_MAC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC', 'Get error, expected SAI_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_attr_counter_id_set")
    def test_sai_next_hop_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_attr_counter_id_set"])
    def test_sai_next_hop_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_attr_disable_decrement_ttl_set")
    def test_sai_next_hop_attr_disable_decrement_ttl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_ATTR_DISABLE_DECREMENT_TTL", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_attr_disable_decrement_ttl_set"])
    def test_sai_next_hop_attr_disable_decrement_ttl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_ATTR_DISABLE_DECREMENT_TTL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_attr_outseg_type_set")
    def test_sai_next_hop_attr_outseg_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_ATTR_OUTSEG_TYPE", 'SAI_OUTSEG_TYPE_SWAP']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_attr_outseg_type_set"])
    def test_sai_next_hop_attr_outseg_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_ATTR_OUTSEG_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_OUTSEG_TYPE_SWAP', 'Get error, expected SAI_OUTSEG_TYPE_SWAP but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_attr_outseg_ttl_mode_set")
    def test_sai_next_hop_attr_outseg_ttl_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_ATTR_OUTSEG_TTL_MODE", 'SAI_OUTSEG_TTL_MODE_UNIFORM']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_attr_outseg_ttl_mode_set"])
    def test_sai_next_hop_attr_outseg_ttl_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_ATTR_OUTSEG_TTL_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_OUTSEG_TTL_MODE_UNIFORM', 'Get error, expected SAI_OUTSEG_TTL_MODE_UNIFORM but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_attr_outseg_ttl_value_set")
    def test_sai_next_hop_attr_outseg_ttl_value_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_ATTR_OUTSEG_TTL_VALUE", '255']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_attr_outseg_ttl_value_set"])
    def test_sai_next_hop_attr_outseg_ttl_value_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_ATTR_OUTSEG_TTL_VALUE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '255', 'Get error, expected 255 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_attr_outseg_exp_mode_set")
    def test_sai_next_hop_attr_outseg_exp_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_ATTR_OUTSEG_EXP_MODE", 'SAI_OUTSEG_EXP_MODE_UNIFORM']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_attr_outseg_exp_mode_set"])
    def test_sai_next_hop_attr_outseg_exp_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_ATTR_OUTSEG_EXP_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_OUTSEG_EXP_MODE_UNIFORM', 'Get error, expected SAI_OUTSEG_EXP_MODE_UNIFORM but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_attr_outseg_exp_value_set")
    def test_sai_next_hop_attr_outseg_exp_value_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_ATTR_OUTSEG_EXP_VALUE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_attr_outseg_exp_value_set"])
    def test_sai_next_hop_attr_outseg_exp_value_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_ATTR_OUTSEG_EXP_VALUE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_attr_qos_tc_and_color_to_mpls_exp_map_set")
    def test_sai_next_hop_attr_qos_tc_and_color_to_mpls_exp_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_attr_qos_tc_and_color_to_mpls_exp_map_set"])
    def test_sai_next_hop_attr_qos_tc_and_color_to_mpls_exp_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_next_hop_group_attr_next_hop_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_next_hop_group_attr_next_hop_member_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_MEMBER_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_group_attr_set_switchover_set")
    def test_sai_next_hop_group_attr_set_switchover_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_SET_SWITCHOVER", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_group_attr_set_switchover_set"])
    def test_sai_next_hop_group_attr_set_switchover_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_SET_SWITCHOVER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_group_attr_counter_id_set")
    def test_sai_next_hop_group_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_group_attr_counter_id_set"])
    def test_sai_next_hop_group_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_next_hop_group_attr_real_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_REAL_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_group_attr_selection_map_set")
    def test_sai_next_hop_group_attr_selection_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_SELECTION_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_group_attr_selection_map_set"])
    def test_sai_next_hop_group_attr_selection_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_SELECTION_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_group_attr_ars_object_id_set")
    def test_sai_next_hop_group_attr_ars_object_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_ARS_OBJECT_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_group_attr_ars_object_id_set"])
    def test_sai_next_hop_group_attr_ars_object_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_ARS_OBJECT_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_next_hop_group_attr_ars_packet_drops_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_ARS_PACKET_DROPS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_next_hop_group_attr_ars_next_hop_reassignments_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_ARS_NEXT_HOP_REASSIGNMENTS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_next_hop_group_attr_ars_port_reassignments_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_ATTR_ARS_PORT_REASSIGNMENTS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_group_map_attr_map_to_value_list_set")
    def test_sai_next_hop_group_map_attr_map_to_value_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_GROUP_MAP_ATTR_MAP_TO_VALUE_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_group_map_attr_map_to_value_list_set"])
    def test_sai_next_hop_group_map_attr_map_to_value_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_MAP_ATTR_MAP_TO_VALUE_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_group_member_attr_next_hop_id_set")
    def test_sai_next_hop_group_member_attr_next_hop_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_group_member_attr_next_hop_id_set"])
    def test_sai_next_hop_group_member_attr_next_hop_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_group_member_attr_weight_set")
    def test_sai_next_hop_group_member_attr_weight_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_GROUP_MEMBER_ATTR_WEIGHT", '1']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_group_member_attr_weight_set"])
    def test_sai_next_hop_group_member_attr_weight_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_MEMBER_ATTR_WEIGHT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '1', 'Get error, expected 1 but got %s' %  r_value


    
    def test_sai_next_hop_group_member_attr_observed_role_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_MEMBER_ATTR_OBSERVED_ROLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_group_member_attr_monitored_object_set")
    def test_sai_next_hop_group_member_attr_monitored_object_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_GROUP_MEMBER_ATTR_MONITORED_OBJECT", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_group_member_attr_monitored_object_set"])
    def test_sai_next_hop_group_member_attr_monitored_object_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_MEMBER_ATTR_MONITORED_OBJECT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_group_member_attr_sequence_id_set")
    def test_sai_next_hop_group_member_attr_sequence_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_GROUP_MEMBER_ATTR_SEQUENCE_ID", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_group_member_attr_sequence_id_set"])
    def test_sai_next_hop_group_member_attr_sequence_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_MEMBER_ATTR_SEQUENCE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_group_member_attr_counter_id_set")
    def test_sai_next_hop_group_member_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_GROUP_MEMBER_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_group_member_attr_counter_id_set"])
    def test_sai_next_hop_group_member_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_MEMBER_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_next_hop_group_member_attr_ars_alternate_path_set")
    def test_sai_next_hop_group_member_attr_ars_alternate_path_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_NEXT_HOP_GROUP_MEMBER_ATTR_ARS_ALTERNATE_PATH", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_next_hop_group_member_attr_ars_alternate_path_set"])
    def test_sai_next_hop_group_member_attr_ars_alternate_path_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_NEXT_HOP_GROUP_MEMBER_ATTR_ARS_ALTERNATE_PATH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_ca_to_pa_entry_attr_underlay_dip_set")
    def test_sai_outbound_ca_to_pa_entry_attr_underlay_dip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_CA_TO_PA_ENTRY_ATTR_UNDERLAY_DIP", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_ca_to_pa_entry_attr_underlay_dip_set"])
    def test_sai_outbound_ca_to_pa_entry_attr_underlay_dip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_CA_TO_PA_ENTRY_ATTR_UNDERLAY_DIP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_ca_to_pa_entry_attr_overlay_dmac_set")
    def test_sai_outbound_ca_to_pa_entry_attr_overlay_dmac_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_CA_TO_PA_ENTRY_ATTR_OVERLAY_DMAC", '0:0:0:0:0:0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_ca_to_pa_entry_attr_overlay_dmac_set"])
    def test_sai_outbound_ca_to_pa_entry_attr_overlay_dmac_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_CA_TO_PA_ENTRY_ATTR_OVERLAY_DMAC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0:0:0:0:0:0', 'Get error, expected 0:0:0:0:0:0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_ca_to_pa_entry_attr_use_dst_vnet_vni_set")
    def test_sai_outbound_ca_to_pa_entry_attr_use_dst_vnet_vni_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_CA_TO_PA_ENTRY_ATTR_USE_DST_VNET_VNI", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_ca_to_pa_entry_attr_use_dst_vnet_vni_set"])
    def test_sai_outbound_ca_to_pa_entry_attr_use_dst_vnet_vni_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_CA_TO_PA_ENTRY_ATTR_USE_DST_VNET_VNI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_ca_to_pa_entry_attr_meter_class_set")
    def test_sai_outbound_ca_to_pa_entry_attr_meter_class_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_CA_TO_PA_ENTRY_ATTR_METER_CLASS", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_ca_to_pa_entry_attr_meter_class_set"])
    def test_sai_outbound_ca_to_pa_entry_attr_meter_class_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_CA_TO_PA_ENTRY_ATTR_METER_CLASS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_ca_to_pa_entry_attr_meter_class_override_set")
    def test_sai_outbound_ca_to_pa_entry_attr_meter_class_override_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_CA_TO_PA_ENTRY_ATTR_METER_CLASS_OVERRIDE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_ca_to_pa_entry_attr_meter_class_override_set"])
    def test_sai_outbound_ca_to_pa_entry_attr_meter_class_override_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_CA_TO_PA_ENTRY_ATTR_METER_CLASS_OVERRIDE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_ca_to_pa_entry_attr_counter_id_set")
    def test_sai_outbound_ca_to_pa_entry_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_CA_TO_PA_ENTRY_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_ca_to_pa_entry_attr_counter_id_set"])
    def test_sai_outbound_ca_to_pa_entry_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_CA_TO_PA_ENTRY_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_outbound_ca_to_pa_entry_attr_ip_addr_family_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_CA_TO_PA_ENTRY_ATTR_IP_ADDR_FAMILY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_action_set")
    def test_sai_outbound_routing_entry_attr_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_ACTION", 'SAI_OUTBOUND_ROUTING_ENTRY_ACTION_ROUTE_VNET']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_action_set"])
    def test_sai_outbound_routing_entry_attr_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_OUTBOUND_ROUTING_ENTRY_ACTION_ROUTE_VNET', 'Get error, expected SAI_OUTBOUND_ROUTING_ENTRY_ACTION_ROUTE_VNET but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_dst_vnet_id_set")
    def test_sai_outbound_routing_entry_attr_dst_vnet_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_DST_VNET_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_dst_vnet_id_set"])
    def test_sai_outbound_routing_entry_attr_dst_vnet_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_DST_VNET_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_meter_policy_en_set")
    def test_sai_outbound_routing_entry_attr_meter_policy_en_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_METER_POLICY_EN", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_meter_policy_en_set"])
    def test_sai_outbound_routing_entry_attr_meter_policy_en_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_METER_POLICY_EN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_meter_class_set")
    def test_sai_outbound_routing_entry_attr_meter_class_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_METER_CLASS", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_meter_class_set"])
    def test_sai_outbound_routing_entry_attr_meter_class_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_METER_CLASS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_overlay_ip_set")
    def test_sai_outbound_routing_entry_attr_overlay_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_OVERLAY_IP", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_overlay_ip_set"])
    def test_sai_outbound_routing_entry_attr_overlay_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_OVERLAY_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_overlay_dip_set")
    def test_sai_outbound_routing_entry_attr_overlay_dip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_OVERLAY_DIP", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_overlay_dip_set"])
    def test_sai_outbound_routing_entry_attr_overlay_dip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_OVERLAY_DIP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_overlay_dip_mask_set")
    def test_sai_outbound_routing_entry_attr_overlay_dip_mask_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_OVERLAY_DIP_MASK", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_overlay_dip_mask_set"])
    def test_sai_outbound_routing_entry_attr_overlay_dip_mask_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_OVERLAY_DIP_MASK"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_overlay_sip_set")
    def test_sai_outbound_routing_entry_attr_overlay_sip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_OVERLAY_SIP", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_overlay_sip_set"])
    def test_sai_outbound_routing_entry_attr_overlay_sip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_OVERLAY_SIP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_overlay_sip_mask_set")
    def test_sai_outbound_routing_entry_attr_overlay_sip_mask_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_OVERLAY_SIP_MASK", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_overlay_sip_mask_set"])
    def test_sai_outbound_routing_entry_attr_overlay_sip_mask_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_OVERLAY_SIP_MASK"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_underlay_dip_set")
    def test_sai_outbound_routing_entry_attr_underlay_dip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_UNDERLAY_DIP", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_underlay_dip_set"])
    def test_sai_outbound_routing_entry_attr_underlay_dip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_UNDERLAY_DIP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_underlay_sip_set")
    def test_sai_outbound_routing_entry_attr_underlay_sip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_UNDERLAY_SIP", '0.0.0.0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_underlay_sip_set"])
    def test_sai_outbound_routing_entry_attr_underlay_sip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_UNDERLAY_SIP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0.0.0.0', 'Get error, expected 0.0.0.0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_dash_encapsulation_set")
    def test_sai_outbound_routing_entry_attr_dash_encapsulation_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_DASH_ENCAPSULATION", 'SAI_DASH_ENCAPSULATION_VXLAN']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_dash_encapsulation_set"])
    def test_sai_outbound_routing_entry_attr_dash_encapsulation_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_DASH_ENCAPSULATION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_DASH_ENCAPSULATION_VXLAN', 'Get error, expected SAI_DASH_ENCAPSULATION_VXLAN but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_tunnel_key_set")
    def test_sai_outbound_routing_entry_attr_tunnel_key_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_TUNNEL_KEY", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_tunnel_key_set"])
    def test_sai_outbound_routing_entry_attr_tunnel_key_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_TUNNEL_KEY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_outbound_routing_entry_attr_counter_id_set")
    def test_sai_outbound_routing_entry_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_outbound_routing_entry_attr_counter_id_set"])
    def test_sai_outbound_routing_entry_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_outbound_routing_entry_attr_ip_addr_family_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_OUTBOUND_ROUTING_ENTRY_ATTR_IP_ADDR_FAMILY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_pa_validation_entry_attr_action_set")
    def test_sai_pa_validation_entry_attr_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PA_VALIDATION_ENTRY_ATTR_ACTION", 'SAI_PA_VALIDATION_ENTRY_ACTION_PERMIT']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_pa_validation_entry_attr_action_set"])
    def test_sai_pa_validation_entry_attr_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PA_VALIDATION_ENTRY_ATTR_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PA_VALIDATION_ENTRY_ACTION_PERMIT', 'Get error, expected SAI_PA_VALIDATION_ENTRY_ACTION_PERMIT but got %s' %  r_value


    
    def test_sai_pa_validation_entry_attr_ip_addr_family_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PA_VALIDATION_ENTRY_ATTR_IP_ADDR_FAMILY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_policer_attr_cbs_set")
    def test_sai_policer_attr_cbs_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_POLICER_ATTR_CBS", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_policer_attr_cbs_set"])
    def test_sai_policer_attr_cbs_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_POLICER_ATTR_CBS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_policer_attr_cir_set")
    def test_sai_policer_attr_cir_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_POLICER_ATTR_CIR", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_policer_attr_cir_set"])
    def test_sai_policer_attr_cir_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_POLICER_ATTR_CIR"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_policer_attr_pbs_set")
    def test_sai_policer_attr_pbs_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_POLICER_ATTR_PBS", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_policer_attr_pbs_set"])
    def test_sai_policer_attr_pbs_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_POLICER_ATTR_PBS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_policer_attr_pir_set")
    def test_sai_policer_attr_pir_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_POLICER_ATTR_PIR", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_policer_attr_pir_set"])
    def test_sai_policer_attr_pir_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_POLICER_ATTR_PIR"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_policer_attr_green_packet_action_set")
    def test_sai_policer_attr_green_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_POLICER_ATTR_GREEN_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_policer_attr_green_packet_action_set"])
    def test_sai_policer_attr_green_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_POLICER_ATTR_GREEN_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_policer_attr_yellow_packet_action_set")
    def test_sai_policer_attr_yellow_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_POLICER_ATTR_YELLOW_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_policer_attr_yellow_packet_action_set"])
    def test_sai_policer_attr_yellow_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_POLICER_ATTR_YELLOW_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_policer_attr_red_packet_action_set")
    def test_sai_policer_attr_red_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_POLICER_ATTR_RED_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_policer_attr_red_packet_action_set"])
    def test_sai_policer_attr_red_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_POLICER_ATTR_RED_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_policer_attr_enable_counter_packet_action_list_set")
    def test_sai_policer_attr_enable_counter_packet_action_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_POLICER_ATTR_ENABLE_COUNTER_PACKET_ACTION_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_policer_attr_enable_counter_packet_action_list_set"])
    def test_sai_policer_attr_enable_counter_packet_action_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_POLICER_ATTR_ENABLE_COUNTER_PACKET_ACTION_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    
    def test_sai_port_attr_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_oper_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_OPER_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_supported_breakout_mode_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SUPPORTED_BREAKOUT_MODE_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_current_breakout_mode_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_CURRENT_BREAKOUT_MODE_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_qos_number_of_queues_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_NUMBER_OF_QUEUES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_qos_queue_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_QUEUE_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_qos_number_of_scheduler_groups_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_NUMBER_OF_SCHEDULER_GROUPS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_qos_scheduler_group_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_SCHEDULER_GROUP_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_qos_maximum_headroom_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_MAXIMUM_HEADROOM_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_supported_speed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SUPPORTED_SPEED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_supported_fec_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SUPPORTED_FEC_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_supported_fec_mode_extended_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SUPPORTED_FEC_MODE_EXTENDED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_supported_half_duplex_speed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SUPPORTED_HALF_DUPLEX_SPEED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_supported_auto_neg_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SUPPORTED_AUTO_NEG_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_supported_flow_control_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SUPPORTED_FLOW_CONTROL_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_supported_asymmetric_pause_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SUPPORTED_ASYMMETRIC_PAUSE_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_supported_media_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SUPPORTED_MEDIA_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_remote_advertised_speed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_REMOTE_ADVERTISED_SPEED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_remote_advertised_fec_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_remote_advertised_fec_mode_extended_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE_EXTENDED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_remote_advertised_half_duplex_speed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_REMOTE_ADVERTISED_HALF_DUPLEX_SPEED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_remote_advertised_auto_neg_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_REMOTE_ADVERTISED_AUTO_NEG_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_remote_advertised_flow_control_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_REMOTE_ADVERTISED_FLOW_CONTROL_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_remote_advertised_asymmetric_pause_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_REMOTE_ADVERTISED_ASYMMETRIC_PAUSE_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_remote_advertised_media_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_REMOTE_ADVERTISED_MEDIA_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_remote_advertised_oui_code_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_REMOTE_ADVERTISED_OUI_CODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_number_of_ingress_priority_groups_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_NUMBER_OF_INGRESS_PRIORITY_GROUPS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_ingress_priority_group_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_INGRESS_PRIORITY_GROUP_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_eye_values_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_EYE_VALUES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_oper_speed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_OPER_SPEED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_speed_set")
    def test_sai_port_attr_speed_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_SPEED", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_speed_set"])
    def test_sai_port_attr_speed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SPEED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_auto_neg_mode_set")
    def test_sai_port_attr_auto_neg_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_AUTO_NEG_MODE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_auto_neg_mode_set"])
    def test_sai_port_attr_auto_neg_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_AUTO_NEG_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_admin_state_set")
    def test_sai_port_attr_admin_state_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ADMIN_STATE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_admin_state_set"])
    def test_sai_port_attr_admin_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ADMIN_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_media_type_set")
    def test_sai_port_attr_media_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_MEDIA_TYPE", 'SAI_PORT_MEDIA_TYPE_NOT_PRESENT']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_media_type_set"])
    def test_sai_port_attr_media_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_MEDIA_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_MEDIA_TYPE_NOT_PRESENT', 'Get error, expected SAI_PORT_MEDIA_TYPE_NOT_PRESENT but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_advertised_speed_set")
    def test_sai_port_attr_advertised_speed_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_SPEED", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_advertised_speed_set"])
    def test_sai_port_attr_advertised_speed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_SPEED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_advertised_fec_mode_set")
    def test_sai_port_attr_advertised_fec_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_FEC_MODE", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_advertised_fec_mode_set"])
    def test_sai_port_attr_advertised_fec_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_FEC_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_advertised_fec_mode_extended_set")
    def test_sai_port_attr_advertised_fec_mode_extended_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_FEC_MODE_EXTENDED", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_advertised_fec_mode_extended_set"])
    def test_sai_port_attr_advertised_fec_mode_extended_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_FEC_MODE_EXTENDED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_advertised_half_duplex_speed_set")
    def test_sai_port_attr_advertised_half_duplex_speed_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_HALF_DUPLEX_SPEED", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_advertised_half_duplex_speed_set"])
    def test_sai_port_attr_advertised_half_duplex_speed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_HALF_DUPLEX_SPEED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_advertised_auto_neg_mode_set")
    def test_sai_port_attr_advertised_auto_neg_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_AUTO_NEG_MODE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_advertised_auto_neg_mode_set"])
    def test_sai_port_attr_advertised_auto_neg_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_AUTO_NEG_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_advertised_flow_control_mode_set")
    def test_sai_port_attr_advertised_flow_control_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_FLOW_CONTROL_MODE", 'SAI_PORT_FLOW_CONTROL_MODE_DISABLE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_advertised_flow_control_mode_set"])
    def test_sai_port_attr_advertised_flow_control_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_FLOW_CONTROL_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_FLOW_CONTROL_MODE_DISABLE', 'Get error, expected SAI_PORT_FLOW_CONTROL_MODE_DISABLE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_advertised_asymmetric_pause_mode_set")
    def test_sai_port_attr_advertised_asymmetric_pause_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_ASYMMETRIC_PAUSE_MODE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_advertised_asymmetric_pause_mode_set"])
    def test_sai_port_attr_advertised_asymmetric_pause_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_ASYMMETRIC_PAUSE_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_advertised_media_type_set")
    def test_sai_port_attr_advertised_media_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_MEDIA_TYPE", 'SAI_PORT_MEDIA_TYPE_UNKNOWN']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_advertised_media_type_set"])
    def test_sai_port_attr_advertised_media_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_MEDIA_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_MEDIA_TYPE_UNKNOWN', 'Get error, expected SAI_PORT_MEDIA_TYPE_UNKNOWN but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_advertised_oui_code_set")
    def test_sai_port_attr_advertised_oui_code_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_OUI_CODE", '0x6A737D']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_advertised_oui_code_set"])
    def test_sai_port_attr_advertised_oui_code_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_OUI_CODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0x6A737D', 'Get error, expected 0x6A737D but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_port_vlan_id_set")
    def test_sai_port_attr_port_vlan_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_PORT_VLAN_ID", '1']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_port_vlan_id_set"])
    def test_sai_port_attr_port_vlan_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PORT_VLAN_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '1', 'Get error, expected 1 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_default_vlan_priority_set")
    def test_sai_port_attr_default_vlan_priority_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_DEFAULT_VLAN_PRIORITY", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_default_vlan_priority_set"])
    def test_sai_port_attr_default_vlan_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_DEFAULT_VLAN_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_drop_untagged_set")
    def test_sai_port_attr_drop_untagged_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_DROP_UNTAGGED", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_drop_untagged_set"])
    def test_sai_port_attr_drop_untagged_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_DROP_UNTAGGED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_drop_tagged_set")
    def test_sai_port_attr_drop_tagged_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_DROP_TAGGED", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_drop_tagged_set"])
    def test_sai_port_attr_drop_tagged_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_DROP_TAGGED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_internal_loopback_mode_set")
    def test_sai_port_attr_internal_loopback_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_INTERNAL_LOOPBACK_MODE", 'SAI_PORT_INTERNAL_LOOPBACK_MODE_NONE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_internal_loopback_mode_set"])
    def test_sai_port_attr_internal_loopback_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_INTERNAL_LOOPBACK_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_INTERNAL_LOOPBACK_MODE_NONE', 'Get error, expected SAI_PORT_INTERNAL_LOOPBACK_MODE_NONE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_use_extended_fec_set")
    def test_sai_port_attr_use_extended_fec_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_USE_EXTENDED_FEC", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_use_extended_fec_set"])
    def test_sai_port_attr_use_extended_fec_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_USE_EXTENDED_FEC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_fec_mode_set")
    def test_sai_port_attr_fec_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_FEC_MODE", 'SAI_PORT_FEC_MODE_NONE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_fec_mode_set"])
    def test_sai_port_attr_fec_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_FEC_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_FEC_MODE_NONE', 'Get error, expected SAI_PORT_FEC_MODE_NONE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_fec_mode_extended_set")
    def test_sai_port_attr_fec_mode_extended_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_FEC_MODE_EXTENDED", 'SAI_PORT_FEC_MODE_EXTENDED_NONE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_fec_mode_extended_set"])
    def test_sai_port_attr_fec_mode_extended_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_FEC_MODE_EXTENDED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_FEC_MODE_EXTENDED_NONE', 'Get error, expected SAI_PORT_FEC_MODE_EXTENDED_NONE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_update_dscp_set")
    def test_sai_port_attr_update_dscp_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_UPDATE_DSCP", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_update_dscp_set"])
    def test_sai_port_attr_update_dscp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_UPDATE_DSCP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_mtu_set")
    def test_sai_port_attr_mtu_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_MTU", '1514']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_mtu_set"])
    def test_sai_port_attr_mtu_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_MTU"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '1514', 'Get error, expected 1514 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_flood_storm_control_policer_id_set")
    def test_sai_port_attr_flood_storm_control_policer_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_FLOOD_STORM_CONTROL_POLICER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_flood_storm_control_policer_id_set"])
    def test_sai_port_attr_flood_storm_control_policer_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_FLOOD_STORM_CONTROL_POLICER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_broadcast_storm_control_policer_id_set")
    def test_sai_port_attr_broadcast_storm_control_policer_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_BROADCAST_STORM_CONTROL_POLICER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_broadcast_storm_control_policer_id_set"])
    def test_sai_port_attr_broadcast_storm_control_policer_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_BROADCAST_STORM_CONTROL_POLICER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_multicast_storm_control_policer_id_set")
    def test_sai_port_attr_multicast_storm_control_policer_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_MULTICAST_STORM_CONTROL_POLICER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_multicast_storm_control_policer_id_set"])
    def test_sai_port_attr_multicast_storm_control_policer_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_MULTICAST_STORM_CONTROL_POLICER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_global_flow_control_mode_set")
    def test_sai_port_attr_global_flow_control_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_MODE", 'SAI_PORT_FLOW_CONTROL_MODE_DISABLE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_global_flow_control_mode_set"])
    def test_sai_port_attr_global_flow_control_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_FLOW_CONTROL_MODE_DISABLE', 'Get error, expected SAI_PORT_FLOW_CONTROL_MODE_DISABLE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ingress_acl_set")
    def test_sai_port_attr_ingress_acl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_INGRESS_ACL", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ingress_acl_set"])
    def test_sai_port_attr_ingress_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_INGRESS_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_egress_acl_set")
    def test_sai_port_attr_egress_acl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_EGRESS_ACL", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_egress_acl_set"])
    def test_sai_port_attr_egress_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_EGRESS_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ingress_macsec_acl_set")
    def test_sai_port_attr_ingress_macsec_acl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_INGRESS_MACSEC_ACL", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ingress_macsec_acl_set"])
    def test_sai_port_attr_ingress_macsec_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_INGRESS_MACSEC_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_egress_macsec_acl_set")
    def test_sai_port_attr_egress_macsec_acl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_EGRESS_MACSEC_ACL", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_egress_macsec_acl_set"])
    def test_sai_port_attr_egress_macsec_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_EGRESS_MACSEC_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_port_attr_macsec_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_MACSEC_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ingress_mirror_session_set")
    def test_sai_port_attr_ingress_mirror_session_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_INGRESS_MIRROR_SESSION", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ingress_mirror_session_set"])
    def test_sai_port_attr_ingress_mirror_session_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_INGRESS_MIRROR_SESSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_egress_mirror_session_set")
    def test_sai_port_attr_egress_mirror_session_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_EGRESS_MIRROR_SESSION", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_egress_mirror_session_set"])
    def test_sai_port_attr_egress_mirror_session_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_EGRESS_MIRROR_SESSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ingress_samplepacket_enable_set")
    def test_sai_port_attr_ingress_samplepacket_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_INGRESS_SAMPLEPACKET_ENABLE", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ingress_samplepacket_enable_set"])
    def test_sai_port_attr_ingress_samplepacket_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_INGRESS_SAMPLEPACKET_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_egress_samplepacket_enable_set")
    def test_sai_port_attr_egress_samplepacket_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_EGRESS_SAMPLEPACKET_ENABLE", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_egress_samplepacket_enable_set"])
    def test_sai_port_attr_egress_samplepacket_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_EGRESS_SAMPLEPACKET_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ingress_sample_mirror_session_set")
    def test_sai_port_attr_ingress_sample_mirror_session_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_INGRESS_SAMPLE_MIRROR_SESSION", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ingress_sample_mirror_session_set"])
    def test_sai_port_attr_ingress_sample_mirror_session_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_INGRESS_SAMPLE_MIRROR_SESSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_egress_sample_mirror_session_set")
    def test_sai_port_attr_egress_sample_mirror_session_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_EGRESS_SAMPLE_MIRROR_SESSION", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_egress_sample_mirror_session_set"])
    def test_sai_port_attr_egress_sample_mirror_session_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_EGRESS_SAMPLE_MIRROR_SESSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_policer_id_set")
    def test_sai_port_attr_policer_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_POLICER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_policer_id_set"])
    def test_sai_port_attr_policer_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_POLICER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_default_tc_set")
    def test_sai_port_attr_qos_default_tc_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_DEFAULT_TC", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_default_tc_set"])
    def test_sai_port_attr_qos_default_tc_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_DEFAULT_TC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_dot1p_to_tc_map_set")
    def test_sai_port_attr_qos_dot1p_to_tc_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_DOT1P_TO_TC_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_dot1p_to_tc_map_set"])
    def test_sai_port_attr_qos_dot1p_to_tc_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_DOT1P_TO_TC_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_dot1p_to_color_map_set")
    def test_sai_port_attr_qos_dot1p_to_color_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_DOT1P_TO_COLOR_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_dot1p_to_color_map_set"])
    def test_sai_port_attr_qos_dot1p_to_color_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_DOT1P_TO_COLOR_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_dscp_to_tc_map_set")
    def test_sai_port_attr_qos_dscp_to_tc_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_DSCP_TO_TC_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_dscp_to_tc_map_set"])
    def test_sai_port_attr_qos_dscp_to_tc_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_DSCP_TO_TC_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_dscp_to_color_map_set")
    def test_sai_port_attr_qos_dscp_to_color_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_DSCP_TO_COLOR_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_dscp_to_color_map_set"])
    def test_sai_port_attr_qos_dscp_to_color_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_DSCP_TO_COLOR_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_tc_to_queue_map_set")
    def test_sai_port_attr_qos_tc_to_queue_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_TC_TO_QUEUE_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_tc_to_queue_map_set"])
    def test_sai_port_attr_qos_tc_to_queue_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_TC_TO_QUEUE_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_tc_and_color_to_dot1p_map_set")
    def test_sai_port_attr_qos_tc_and_color_to_dot1p_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_tc_and_color_to_dot1p_map_set"])
    def test_sai_port_attr_qos_tc_and_color_to_dot1p_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_tc_and_color_to_dscp_map_set")
    def test_sai_port_attr_qos_tc_and_color_to_dscp_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_tc_and_color_to_dscp_map_set"])
    def test_sai_port_attr_qos_tc_and_color_to_dscp_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_tc_to_priority_group_map_set")
    def test_sai_port_attr_qos_tc_to_priority_group_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_TC_TO_PRIORITY_GROUP_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_tc_to_priority_group_map_set"])
    def test_sai_port_attr_qos_tc_to_priority_group_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_TC_TO_PRIORITY_GROUP_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_pfc_priority_to_priority_group_map_set")
    def test_sai_port_attr_qos_pfc_priority_to_priority_group_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_pfc_priority_to_priority_group_map_set"])
    def test_sai_port_attr_qos_pfc_priority_to_priority_group_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_pfc_priority_to_queue_map_set")
    def test_sai_port_attr_qos_pfc_priority_to_queue_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_QUEUE_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_pfc_priority_to_queue_map_set"])
    def test_sai_port_attr_qos_pfc_priority_to_queue_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_QUEUE_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_scheduler_profile_id_set")
    def test_sai_port_attr_qos_scheduler_profile_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_SCHEDULER_PROFILE_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_scheduler_profile_id_set"])
    def test_sai_port_attr_qos_scheduler_profile_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_SCHEDULER_PROFILE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_ingress_buffer_profile_list_set")
    def test_sai_port_attr_qos_ingress_buffer_profile_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_INGRESS_BUFFER_PROFILE_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_ingress_buffer_profile_list_set"])
    def test_sai_port_attr_qos_ingress_buffer_profile_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_INGRESS_BUFFER_PROFILE_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_egress_buffer_profile_list_set")
    def test_sai_port_attr_qos_egress_buffer_profile_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_EGRESS_BUFFER_PROFILE_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_egress_buffer_profile_list_set"])
    def test_sai_port_attr_qos_egress_buffer_profile_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_EGRESS_BUFFER_PROFILE_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_priority_flow_control_mode_set")
    def test_sai_port_attr_priority_flow_control_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_MODE", 'SAI_PORT_PRIORITY_FLOW_CONTROL_MODE_COMBINED']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_priority_flow_control_mode_set"])
    def test_sai_port_attr_priority_flow_control_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_PRIORITY_FLOW_CONTROL_MODE_COMBINED', 'Get error, expected SAI_PORT_PRIORITY_FLOW_CONTROL_MODE_COMBINED but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_priority_flow_control_set")
    def test_sai_port_attr_priority_flow_control_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_priority_flow_control_set"])
    def test_sai_port_attr_priority_flow_control_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_priority_flow_control_rx_set")
    def test_sai_port_attr_priority_flow_control_rx_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_RX", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_priority_flow_control_rx_set"])
    def test_sai_port_attr_priority_flow_control_rx_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_RX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_priority_flow_control_tx_set")
    def test_sai_port_attr_priority_flow_control_tx_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_TX", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_priority_flow_control_tx_set"])
    def test_sai_port_attr_priority_flow_control_tx_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_TX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_meta_data_set")
    def test_sai_port_attr_meta_data_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_META_DATA", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_meta_data_set"])
    def test_sai_port_attr_meta_data_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_META_DATA"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_egress_block_port_list_set")
    def test_sai_port_attr_egress_block_port_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_EGRESS_BLOCK_PORT_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_egress_block_port_list_set"])
    def test_sai_port_attr_egress_block_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_EGRESS_BLOCK_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_hw_profile_id_set")
    def test_sai_port_attr_hw_profile_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_HW_PROFILE_ID", 'vendor']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_hw_profile_id_set"])
    def test_sai_port_attr_hw_profile_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_HW_PROFILE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'vendor', 'Get error, expected vendor but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_eee_enable_set")
    def test_sai_port_attr_eee_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_EEE_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_eee_enable_set"])
    def test_sai_port_attr_eee_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_EEE_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_eee_idle_time_set")
    def test_sai_port_attr_eee_idle_time_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_EEE_IDLE_TIME", '2500']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_eee_idle_time_set"])
    def test_sai_port_attr_eee_idle_time_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_EEE_IDLE_TIME"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '2500', 'Get error, expected 2500 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_eee_wake_time_set")
    def test_sai_port_attr_eee_wake_time_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_EEE_WAKE_TIME", '5']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_eee_wake_time_set"])
    def test_sai_port_attr_eee_wake_time_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_EEE_WAKE_TIME"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '5', 'Get error, expected 5 but got %s' %  r_value


    
    def test_sai_port_attr_port_pool_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PORT_POOL_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_isolation_group_set")
    def test_sai_port_attr_isolation_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ISOLATION_GROUP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_isolation_group_set"])
    def test_sai_port_attr_isolation_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ISOLATION_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_pkt_tx_enable_set")
    def test_sai_port_attr_pkt_tx_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_PKT_TX_ENABLE", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_pkt_tx_enable_set"])
    def test_sai_port_attr_pkt_tx_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PKT_TX_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_tam_object_set")
    def test_sai_port_attr_tam_object_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_TAM_OBJECT", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_tam_object_set"])
    def test_sai_port_attr_tam_object_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_TAM_OBJECT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_serdes_preemphasis_set")
    def test_sai_port_attr_serdes_preemphasis_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_SERDES_PREEMPHASIS", 'internal']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_serdes_preemphasis_set"])
    def test_sai_port_attr_serdes_preemphasis_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SERDES_PREEMPHASIS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_serdes_idriver_set")
    def test_sai_port_attr_serdes_idriver_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_SERDES_IDRIVER", 'internal']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_serdes_idriver_set"])
    def test_sai_port_attr_serdes_idriver_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SERDES_IDRIVER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_serdes_ipredriver_set")
    def test_sai_port_attr_serdes_ipredriver_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_SERDES_IPREDRIVER", 'internal']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_serdes_ipredriver_set"])
    def test_sai_port_attr_serdes_ipredriver_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SERDES_IPREDRIVER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_link_training_enable_set")
    def test_sai_port_attr_link_training_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_LINK_TRAINING_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_link_training_enable_set"])
    def test_sai_port_attr_link_training_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_LINK_TRAINING_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ptp_mode_set")
    def test_sai_port_attr_ptp_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_PTP_MODE", 'SAI_PORT_PTP_MODE_NONE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ptp_mode_set"])
    def test_sai_port_attr_ptp_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PTP_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_PTP_MODE_NONE', 'Get error, expected SAI_PORT_PTP_MODE_NONE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_interface_type_set")
    def test_sai_port_attr_interface_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_INTERFACE_TYPE", 'SAI_PORT_INTERFACE_TYPE_NONE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_interface_type_set"])
    def test_sai_port_attr_interface_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_INTERFACE_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_INTERFACE_TYPE_NONE', 'Get error, expected SAI_PORT_INTERFACE_TYPE_NONE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_advertised_interface_type_set")
    def test_sai_port_attr_advertised_interface_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_INTERFACE_TYPE", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_advertised_interface_type_set"])
    def test_sai_port_attr_advertised_interface_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ADVERTISED_INTERFACE_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_prbs_polynomial_set")
    def test_sai_port_attr_prbs_polynomial_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_PRBS_POLYNOMIAL", 'internal']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_prbs_polynomial_set"])
    def test_sai_port_attr_prbs_polynomial_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PRBS_POLYNOMIAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    
    def test_sai_port_attr_port_serdes_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PORT_SERDES_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    
    def test_sai_port_attr_link_training_failure_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_LINK_TRAINING_FAILURE_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_link_training_rx_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_LINK_TRAINING_RX_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_prbs_config_set")
    def test_sai_port_attr_prbs_config_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_PRBS_CONFIG", 'SAI_PORT_PRBS_CONFIG_DISABLE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_prbs_config_set"])
    def test_sai_port_attr_prbs_config_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PRBS_CONFIG"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_PRBS_CONFIG_DISABLE', 'Get error, expected SAI_PORT_PRBS_CONFIG_DISABLE but got %s' %  r_value


    
    def test_sai_port_attr_prbs_lock_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PRBS_LOCK_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_prbs_lock_loss_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PRBS_LOCK_LOSS_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_prbs_rx_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PRBS_RX_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_prbs_rx_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PRBS_RX_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_auto_neg_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_AUTO_NEG_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_disable_decrement_ttl_set")
    def test_sai_port_attr_disable_decrement_ttl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_DISABLE_DECREMENT_TTL", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_disable_decrement_ttl_set"])
    def test_sai_port_attr_disable_decrement_ttl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_DISABLE_DECREMENT_TTL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_mpls_exp_to_tc_map_set")
    def test_sai_port_attr_qos_mpls_exp_to_tc_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_MPLS_EXP_TO_TC_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_mpls_exp_to_tc_map_set"])
    def test_sai_port_attr_qos_mpls_exp_to_tc_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_MPLS_EXP_TO_TC_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_mpls_exp_to_color_map_set")
    def test_sai_port_attr_qos_mpls_exp_to_color_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_mpls_exp_to_color_map_set"])
    def test_sai_port_attr_qos_mpls_exp_to_color_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_tc_and_color_to_mpls_exp_map_set")
    def test_sai_port_attr_qos_tc_and_color_to_mpls_exp_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_tc_and_color_to_mpls_exp_map_set"])
    def test_sai_port_attr_qos_tc_and_color_to_mpls_exp_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_tpid_set")
    def test_sai_port_attr_tpid_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_TPID", '0x8100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_tpid_set"])
    def test_sai_port_attr_tpid_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_TPID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0x8100', 'Get error, expected 0x8100 but got %s' %  r_value


    
    def test_sai_port_attr_err_status_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ERR_STATUS_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_fabric_attached_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_FABRIC_ATTACHED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_fabric_attached_switch_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_fabric_attached_switch_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_fabric_attached_port_index_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_FABRIC_ATTACHED_PORT_INDEX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_fabric_reachability_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_FABRIC_REACHABILITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_system_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SYSTEM_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_auto_neg_fec_mode_override_set")
    def test_sai_port_attr_auto_neg_fec_mode_override_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_AUTO_NEG_FEC_MODE_OVERRIDE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_auto_neg_fec_mode_override_set"])
    def test_sai_port_attr_auto_neg_fec_mode_override_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_AUTO_NEG_FEC_MODE_OVERRIDE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_loopback_mode_set")
    def test_sai_port_attr_loopback_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_LOOPBACK_MODE", 'SAI_PORT_LOOPBACK_MODE_NONE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_loopback_mode_set"])
    def test_sai_port_attr_loopback_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_LOOPBACK_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_LOOPBACK_MODE_NONE', 'Get error, expected SAI_PORT_LOOPBACK_MODE_NONE but got %s' %  r_value


    
    def test_sai_port_attr_mdix_mode_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_MDIX_MODE_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_mdix_mode_config_set")
    def test_sai_port_attr_mdix_mode_config_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_MDIX_MODE_CONFIG", 'SAI_PORT_MDIX_MODE_CONFIG_AUTO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_mdix_mode_config_set"])
    def test_sai_port_attr_mdix_mode_config_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_MDIX_MODE_CONFIG"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_MDIX_MODE_CONFIG_AUTO', 'Get error, expected SAI_PORT_MDIX_MODE_CONFIG_AUTO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_auto_neg_config_mode_set")
    def test_sai_port_attr_auto_neg_config_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_AUTO_NEG_CONFIG_MODE", 'SAI_PORT_AUTO_NEG_CONFIG_MODE_DISABLED']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_auto_neg_config_mode_set"])
    def test_sai_port_attr_auto_neg_config_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_AUTO_NEG_CONFIG_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_AUTO_NEG_CONFIG_MODE_DISABLED', 'Get error, expected SAI_PORT_AUTO_NEG_CONFIG_MODE_DISABLED but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_1000x_sgmii_slave_autodetect_set")
    def test_sai_port_attr_1000x_sgmii_slave_autodetect_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_1000X_SGMII_SLAVE_AUTODETECT", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_1000x_sgmii_slave_autodetect_set"])
    def test_sai_port_attr_1000x_sgmii_slave_autodetect_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_1000X_SGMII_SLAVE_AUTODETECT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_module_type_set")
    def test_sai_port_attr_module_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_MODULE_TYPE", 'SAI_PORT_MODULE_TYPE_1000BASE_X']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_module_type_set"])
    def test_sai_port_attr_module_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_MODULE_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_MODULE_TYPE_1000BASE_X', 'Get error, expected SAI_PORT_MODULE_TYPE_1000BASE_X but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_dual_media_set")
    def test_sai_port_attr_dual_media_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_DUAL_MEDIA", 'SAI_PORT_DUAL_MEDIA_NONE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_dual_media_set"])
    def test_sai_port_attr_dual_media_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_DUAL_MEDIA"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_DUAL_MEDIA_NONE', 'Get error, expected SAI_PORT_DUAL_MEDIA_NONE but got %s' %  r_value


    
    def test_sai_port_attr_auto_neg_fec_mode_extended_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_AUTO_NEG_FEC_MODE_EXTENDED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ipg_set")
    def test_sai_port_attr_ipg_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_IPG", '96']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ipg_set"])
    def test_sai_port_attr_ipg_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_IPG"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '96', 'Get error, expected 96 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_global_flow_control_forward_set")
    def test_sai_port_attr_global_flow_control_forward_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_FORWARD", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_global_flow_control_forward_set"])
    def test_sai_port_attr_global_flow_control_forward_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_FORWARD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_priority_flow_control_forward_set")
    def test_sai_port_attr_priority_flow_control_forward_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_FORWARD", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_priority_flow_control_forward_set"])
    def test_sai_port_attr_priority_flow_control_forward_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_FORWARD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_dscp_to_forwarding_class_map_set")
    def test_sai_port_attr_qos_dscp_to_forwarding_class_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_dscp_to_forwarding_class_map_set"])
    def test_sai_port_attr_qos_dscp_to_forwarding_class_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_qos_mpls_exp_to_forwarding_class_map_set")
    def test_sai_port_attr_qos_mpls_exp_to_forwarding_class_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_qos_mpls_exp_to_forwarding_class_map_set"])
    def test_sai_port_attr_qos_mpls_exp_to_forwarding_class_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_port_attr_ipsec_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_IPSEC_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_pfc_tc_dld_interval_range_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PFC_TC_DLD_INTERVAL_RANGE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_pfc_tc_dld_interval_set")
    def test_sai_port_attr_pfc_tc_dld_interval_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_PFC_TC_DLD_INTERVAL", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_pfc_tc_dld_interval_set"])
    def test_sai_port_attr_pfc_tc_dld_interval_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PFC_TC_DLD_INTERVAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    
    def test_sai_port_attr_pfc_tc_dlr_interval_range_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PFC_TC_DLR_INTERVAL_RANGE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_pfc_tc_dlr_interval_set")
    def test_sai_port_attr_pfc_tc_dlr_interval_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_PFC_TC_DLR_INTERVAL", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_pfc_tc_dlr_interval_set"])
    def test_sai_port_attr_pfc_tc_dlr_interval_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PFC_TC_DLR_INTERVAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    
    def test_sai_port_attr_supported_link_training_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_SUPPORTED_LINK_TRAINING_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_rx_signal_detect_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_RX_SIGNAL_DETECT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_rx_lock_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_RX_LOCK_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_pcs_rx_link_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_PCS_RX_LINK_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_port_attr_fec_alignment_lock_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_FEC_ALIGNMENT_LOCK"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_fabric_isolate_set")
    def test_sai_port_attr_fabric_isolate_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_FABRIC_ISOLATE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_fabric_isolate_set"])
    def test_sai_port_attr_fabric_isolate_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_FABRIC_ISOLATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    
    def test_sai_port_attr_max_fec_symbol_errors_detectable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_MAX_FEC_SYMBOL_ERRORS_DETECTABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ars_enable_set")
    def test_sai_port_attr_ars_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ARS_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ars_enable_set"])
    def test_sai_port_attr_ars_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ARS_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ars_port_load_scaling_factor_set")
    def test_sai_port_attr_ars_port_load_scaling_factor_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ARS_PORT_LOAD_SCALING_FACTOR", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ars_port_load_scaling_factor_set"])
    def test_sai_port_attr_ars_port_load_scaling_factor_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ARS_PORT_LOAD_SCALING_FACTOR"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ars_port_load_past_enable_set")
    def test_sai_port_attr_ars_port_load_past_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ARS_PORT_LOAD_PAST_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ars_port_load_past_enable_set"])
    def test_sai_port_attr_ars_port_load_past_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ARS_PORT_LOAD_PAST_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ars_port_load_future_enable_set")
    def test_sai_port_attr_ars_port_load_future_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ARS_PORT_LOAD_FUTURE_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ars_port_load_future_enable_set"])
    def test_sai_port_attr_ars_port_load_future_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ARS_PORT_LOAD_FUTURE_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ars_alternate_path_set")
    def test_sai_port_attr_ars_alternate_path_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ARS_ALTERNATE_PATH", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ars_alternate_path_set"])
    def test_sai_port_attr_ars_alternate_path_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ARS_ALTERNATE_PATH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    
    def test_sai_port_attr_json_formatted_debug_data_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_JSON_FORMATTED_DEBUG_DATA"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ecmp_hash_algorithm_set")
    def test_sai_port_attr_ecmp_hash_algorithm_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ECMP_HASH_ALGORITHM", 'SAI_HASH_ALGORITHM_CRC']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ecmp_hash_algorithm_set"])
    def test_sai_port_attr_ecmp_hash_algorithm_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ECMP_HASH_ALGORITHM"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_HASH_ALGORITHM_CRC', 'Get error, expected SAI_HASH_ALGORITHM_CRC but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ecmp_hash_seed_set")
    def test_sai_port_attr_ecmp_hash_seed_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ECMP_HASH_SEED", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ecmp_hash_seed_set"])
    def test_sai_port_attr_ecmp_hash_seed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ECMP_HASH_SEED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_attr_ecmp_hash_offset_set")
    def test_sai_port_attr_ecmp_hash_offset_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_ATTR_ECMP_HASH_OFFSET", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_attr_ecmp_hash_offset_set"])
    def test_sai_port_attr_ecmp_hash_offset_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_ECMP_HASH_OFFSET"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    
    def test_sai_port_attr_oper_port_fec_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_ATTR_OPER_PORT_FEC_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_connector_attr_failover_mode_set")
    def test_sai_port_connector_attr_failover_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_CONNECTOR_ATTR_FAILOVER_MODE", 'SAI_PORT_CONNECTOR_FAILOVER_MODE_DISABLE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_connector_attr_failover_mode_set"])
    def test_sai_port_connector_attr_failover_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_CONNECTOR_ATTR_FAILOVER_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PORT_CONNECTOR_FAILOVER_MODE_DISABLE', 'Get error, expected SAI_PORT_CONNECTOR_FAILOVER_MODE_DISABLE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_port_pool_attr_qos_wred_profile_id_set")
    def test_sai_port_pool_attr_qos_wred_profile_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_PORT_POOL_ATTR_QOS_WRED_PROFILE_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_port_pool_attr_qos_wred_profile_id_set"])
    def test_sai_port_pool_attr_qos_wred_profile_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_PORT_POOL_ATTR_QOS_WRED_PROFILE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_qos_map_attr_map_to_value_list_set")
    def test_sai_qos_map_attr_map_to_value_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_QOS_MAP_ATTR_MAP_TO_VALUE_LIST", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_qos_map_attr_map_to_value_list_set"])
    def test_sai_qos_map_attr_map_to_value_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_QOS_MAP_ATTR_MAP_TO_VALUE_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_queue_attr_parent_scheduler_node_set")
    def test_sai_queue_attr_parent_scheduler_node_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_QUEUE_ATTR_PARENT_SCHEDULER_NODE", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_queue_attr_parent_scheduler_node_set"])
    def test_sai_queue_attr_parent_scheduler_node_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_QUEUE_ATTR_PARENT_SCHEDULER_NODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_queue_attr_wred_profile_id_set")
    def test_sai_queue_attr_wred_profile_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_QUEUE_ATTR_WRED_PROFILE_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_queue_attr_wred_profile_id_set"])
    def test_sai_queue_attr_wred_profile_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_QUEUE_ATTR_WRED_PROFILE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_queue_attr_buffer_profile_id_set")
    def test_sai_queue_attr_buffer_profile_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_QUEUE_ATTR_BUFFER_PROFILE_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_queue_attr_buffer_profile_id_set"])
    def test_sai_queue_attr_buffer_profile_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_QUEUE_ATTR_BUFFER_PROFILE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_queue_attr_scheduler_profile_id_set")
    def test_sai_queue_attr_scheduler_profile_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_QUEUE_ATTR_SCHEDULER_PROFILE_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_queue_attr_scheduler_profile_id_set"])
    def test_sai_queue_attr_scheduler_profile_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_QUEUE_ATTR_SCHEDULER_PROFILE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_queue_attr_pause_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_QUEUE_ATTR_PAUSE_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_queue_attr_enable_pfc_dldr_set")
    def test_sai_queue_attr_enable_pfc_dldr_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_QUEUE_ATTR_ENABLE_PFC_DLDR", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_queue_attr_enable_pfc_dldr_set"])
    def test_sai_queue_attr_enable_pfc_dldr_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_QUEUE_ATTR_ENABLE_PFC_DLDR"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_queue_attr_pfc_dlr_init_set")
    def test_sai_queue_attr_pfc_dlr_init_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_QUEUE_ATTR_PFC_DLR_INIT", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_queue_attr_pfc_dlr_init_set"])
    def test_sai_queue_attr_pfc_dlr_init_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_QUEUE_ATTR_PFC_DLR_INIT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_queue_attr_tam_object_set")
    def test_sai_queue_attr_tam_object_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_QUEUE_ATTR_TAM_OBJECT", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_queue_attr_tam_object_set"])
    def test_sai_queue_attr_tam_object_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_QUEUE_ATTR_TAM_OBJECT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_queue_attr_pfc_dlr_packet_action_set")
    def test_sai_queue_attr_pfc_dlr_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_QUEUE_ATTR_PFC_DLR_PACKET_ACTION", 'SAI_PACKET_ACTION_DROP']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_queue_attr_pfc_dlr_packet_action_set"])
    def test_sai_queue_attr_pfc_dlr_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_QUEUE_ATTR_PFC_DLR_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_DROP', 'Get error, expected SAI_PACKET_ACTION_DROP but got %s' %  r_value


    
    def test_sai_queue_attr_pfc_continuous_deadlock_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_QUEUE_ATTR_PFC_CONTINUOUS_DEADLOCK_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_route_entry_attr_packet_action_set")
    def test_sai_route_entry_attr_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTE_ENTRY_ATTR_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_route_entry_attr_packet_action_set"])
    def test_sai_route_entry_attr_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTE_ENTRY_ATTR_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_route_entry_attr_user_trap_id_set")
    def test_sai_route_entry_attr_user_trap_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTE_ENTRY_ATTR_USER_TRAP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_route_entry_attr_user_trap_id_set"])
    def test_sai_route_entry_attr_user_trap_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTE_ENTRY_ATTR_USER_TRAP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_route_entry_attr_next_hop_id_set")
    def test_sai_route_entry_attr_next_hop_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTE_ENTRY_ATTR_NEXT_HOP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_route_entry_attr_next_hop_id_set"])
    def test_sai_route_entry_attr_next_hop_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTE_ENTRY_ATTR_NEXT_HOP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_route_entry_attr_meta_data_set")
    def test_sai_route_entry_attr_meta_data_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTE_ENTRY_ATTR_META_DATA", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_route_entry_attr_meta_data_set"])
    def test_sai_route_entry_attr_meta_data_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTE_ENTRY_ATTR_META_DATA"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    
    def test_sai_route_entry_attr_ip_addr_family_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTE_ENTRY_ATTR_IP_ADDR_FAMILY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_route_entry_attr_counter_id_set")
    def test_sai_route_entry_attr_counter_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTE_ENTRY_ATTR_COUNTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_route_entry_attr_counter_id_set"])
    def test_sai_route_entry_attr_counter_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTE_ENTRY_ATTR_COUNTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_route_entry_attr_prefix_agg_id_set")
    def test_sai_route_entry_attr_prefix_agg_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTE_ENTRY_ATTR_PREFIX_AGG_ID", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_route_entry_attr_prefix_agg_id_set"])
    def test_sai_route_entry_attr_prefix_agg_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTE_ENTRY_ATTR_PREFIX_AGG_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_router_interface_attr_src_mac_address_set")
    def test_sai_router_interface_attr_src_mac_address_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_SRC_MAC_ADDRESS", 'SAI_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_router_interface_attr_src_mac_address_set"])
    def test_sai_router_interface_attr_src_mac_address_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_SRC_MAC_ADDRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS', 'Get error, expected SAI_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_router_interface_attr_admin_v4_state_set")
    def test_sai_router_interface_attr_admin_v4_state_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_ADMIN_V4_STATE", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_router_interface_attr_admin_v4_state_set"])
    def test_sai_router_interface_attr_admin_v4_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_ADMIN_V4_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_router_interface_attr_admin_v6_state_set")
    def test_sai_router_interface_attr_admin_v6_state_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_ADMIN_V6_STATE", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_router_interface_attr_admin_v6_state_set"])
    def test_sai_router_interface_attr_admin_v6_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_ADMIN_V6_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_router_interface_attr_mtu_set")
    def test_sai_router_interface_attr_mtu_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_MTU", '1514']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_router_interface_attr_mtu_set"])
    def test_sai_router_interface_attr_mtu_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_MTU"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '1514', 'Get error, expected 1514 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_router_interface_attr_ingress_acl_set")
    def test_sai_router_interface_attr_ingress_acl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_router_interface_attr_ingress_acl_set"])
    def test_sai_router_interface_attr_ingress_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_router_interface_attr_egress_acl_set")
    def test_sai_router_interface_attr_egress_acl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_router_interface_attr_egress_acl_set"])
    def test_sai_router_interface_attr_egress_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_router_interface_attr_neighbor_miss_packet_action_set")
    def test_sai_router_interface_attr_neighbor_miss_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_NEIGHBOR_MISS_PACKET_ACTION", 'SAI_PACKET_ACTION_TRAP']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_router_interface_attr_neighbor_miss_packet_action_set"])
    def test_sai_router_interface_attr_neighbor_miss_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_NEIGHBOR_MISS_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_TRAP', 'Get error, expected SAI_PACKET_ACTION_TRAP but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_router_interface_attr_v4_mcast_enable_set")
    def test_sai_router_interface_attr_v4_mcast_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_V4_MCAST_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_router_interface_attr_v4_mcast_enable_set"])
    def test_sai_router_interface_attr_v4_mcast_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_V4_MCAST_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_router_interface_attr_v6_mcast_enable_set")
    def test_sai_router_interface_attr_v6_mcast_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_V6_MCAST_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_router_interface_attr_v6_mcast_enable_set"])
    def test_sai_router_interface_attr_v6_mcast_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_V6_MCAST_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_router_interface_attr_loopback_packet_action_set")
    def test_sai_router_interface_attr_loopback_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_LOOPBACK_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_router_interface_attr_loopback_packet_action_set"])
    def test_sai_router_interface_attr_loopback_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_LOOPBACK_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_router_interface_attr_nat_zone_id_set")
    def test_sai_router_interface_attr_nat_zone_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_NAT_ZONE_ID", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_router_interface_attr_nat_zone_id_set"])
    def test_sai_router_interface_attr_nat_zone_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_NAT_ZONE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_router_interface_attr_disable_decrement_ttl_set")
    def test_sai_router_interface_attr_disable_decrement_ttl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_DISABLE_DECREMENT_TTL", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_router_interface_attr_disable_decrement_ttl_set"])
    def test_sai_router_interface_attr_disable_decrement_ttl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_DISABLE_DECREMENT_TTL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_router_interface_attr_admin_mpls_state_set")
    def test_sai_router_interface_attr_admin_mpls_state_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_ADMIN_MPLS_STATE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_router_interface_attr_admin_mpls_state_set"])
    def test_sai_router_interface_attr_admin_mpls_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_ROUTER_INTERFACE_ATTR_ADMIN_MPLS_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    
    def test_sai_rpf_group_attr_rpf_interface_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_RPF_GROUP_ATTR_RPF_INTERFACE_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_rpf_group_attr_rpf_member_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_RPF_GROUP_ATTR_RPF_MEMBER_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_samplepacket_attr_sample_rate_set")
    def test_sai_samplepacket_attr_sample_rate_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SAMPLEPACKET_ATTR_SAMPLE_RATE", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_samplepacket_attr_sample_rate_set"])
    def test_sai_samplepacket_attr_sample_rate_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SAMPLEPACKET_ATTR_SAMPLE_RATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_scheduler_attr_scheduling_type_set")
    def test_sai_scheduler_attr_scheduling_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SCHEDULER_ATTR_SCHEDULING_TYPE", 'SAI_SCHEDULING_TYPE_WRR']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_scheduler_attr_scheduling_type_set"])
    def test_sai_scheduler_attr_scheduling_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SCHEDULER_ATTR_SCHEDULING_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_SCHEDULING_TYPE_WRR', 'Get error, expected SAI_SCHEDULING_TYPE_WRR but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_scheduler_attr_scheduling_weight_set")
    def test_sai_scheduler_attr_scheduling_weight_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SCHEDULER_ATTR_SCHEDULING_WEIGHT", '1']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_scheduler_attr_scheduling_weight_set"])
    def test_sai_scheduler_attr_scheduling_weight_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SCHEDULER_ATTR_SCHEDULING_WEIGHT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '1', 'Get error, expected 1 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_scheduler_attr_meter_type_set")
    def test_sai_scheduler_attr_meter_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SCHEDULER_ATTR_METER_TYPE", 'SAI_METER_TYPE_BYTES']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_scheduler_attr_meter_type_set"])
    def test_sai_scheduler_attr_meter_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SCHEDULER_ATTR_METER_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_METER_TYPE_BYTES', 'Get error, expected SAI_METER_TYPE_BYTES but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_scheduler_attr_min_bandwidth_rate_set")
    def test_sai_scheduler_attr_min_bandwidth_rate_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_RATE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_scheduler_attr_min_bandwidth_rate_set"])
    def test_sai_scheduler_attr_min_bandwidth_rate_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_RATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_scheduler_attr_min_bandwidth_burst_rate_set")
    def test_sai_scheduler_attr_min_bandwidth_burst_rate_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_scheduler_attr_min_bandwidth_burst_rate_set"])
    def test_sai_scheduler_attr_min_bandwidth_burst_rate_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_scheduler_attr_max_bandwidth_rate_set")
    def test_sai_scheduler_attr_max_bandwidth_rate_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_RATE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_scheduler_attr_max_bandwidth_rate_set"])
    def test_sai_scheduler_attr_max_bandwidth_rate_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_RATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_scheduler_attr_max_bandwidth_burst_rate_set")
    def test_sai_scheduler_attr_max_bandwidth_burst_rate_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_scheduler_attr_max_bandwidth_burst_rate_set"])
    def test_sai_scheduler_attr_max_bandwidth_burst_rate_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    
    def test_sai_scheduler_group_attr_child_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SCHEDULER_GROUP_ATTR_CHILD_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_scheduler_group_attr_child_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SCHEDULER_GROUP_ATTR_CHILD_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_scheduler_group_attr_scheduler_profile_id_set")
    def test_sai_scheduler_group_attr_scheduler_profile_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SCHEDULER_GROUP_ATTR_SCHEDULER_PROFILE_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_scheduler_group_attr_scheduler_profile_id_set"])
    def test_sai_scheduler_group_attr_scheduler_profile_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SCHEDULER_GROUP_ATTR_SCHEDULER_PROFILE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_scheduler_group_attr_parent_node_set")
    def test_sai_scheduler_group_attr_parent_node_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SCHEDULER_GROUP_ATTR_PARENT_NODE", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_scheduler_group_attr_parent_node_set"])
    def test_sai_scheduler_group_attr_parent_node_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SCHEDULER_GROUP_ATTR_PARENT_NODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_srv6_sidlist_attr_tlv_list_set")
    def test_sai_srv6_sidlist_attr_tlv_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SRV6_SIDLIST_ATTR_TLV_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_srv6_sidlist_attr_tlv_list_set"])
    def test_sai_srv6_sidlist_attr_tlv_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SRV6_SIDLIST_ATTR_TLV_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_srv6_sidlist_attr_segment_list_set")
    def test_sai_srv6_sidlist_attr_segment_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SRV6_SIDLIST_ATTR_SEGMENT_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_srv6_sidlist_attr_segment_list_set"])
    def test_sai_srv6_sidlist_attr_segment_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SRV6_SIDLIST_ATTR_SEGMENT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_srv6_sidlist_attr_next_hop_id_set")
    def test_sai_srv6_sidlist_attr_next_hop_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SRV6_SIDLIST_ATTR_NEXT_HOP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_srv6_sidlist_attr_next_hop_id_set"])
    def test_sai_srv6_sidlist_attr_next_hop_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SRV6_SIDLIST_ATTR_NEXT_HOP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_stp_attr_vlan_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_STP_ATTR_VLAN_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_stp_attr_bridge_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_STP_ATTR_BRIDGE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_stp_attr_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_STP_ATTR_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_stp_port_attr_state_set")
    def test_sai_stp_port_attr_state_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_STP_PORT_ATTR_STATE", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_stp_port_attr_state_set"])
    def test_sai_stp_port_attr_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_STP_PORT_ATTR_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_number_of_active_ports_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_max_number_of_supported_ports_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MAX_NUMBER_OF_SUPPORTED_PORTS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    
    def test_sai_switch_attr_port_max_mtu_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PORT_MAX_MTU"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_cpu_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_CPU_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    
    def test_sai_switch_attr_max_virtual_routers_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MAX_VIRTUAL_ROUTERS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_fdb_table_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FDB_TABLE_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_l3_neighbor_table_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_L3_NEIGHBOR_TABLE_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_l3_route_table_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_L3_ROUTE_TABLE_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_lag_members_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_LAG_MEMBERS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_number_of_lags_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NUMBER_OF_LAGS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_ecmp_members_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_MEMBERS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_number_of_ecmp_groups_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NUMBER_OF_ECMP_GROUPS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_number_of_unicast_queues_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NUMBER_OF_UNICAST_QUEUES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_number_of_multicast_queues_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NUMBER_OF_MULTICAST_QUEUES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_number_of_queues_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NUMBER_OF_QUEUES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_number_of_cpu_queues_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NUMBER_OF_CPU_QUEUES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_on_link_route_supported_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ON_LINK_ROUTE_SUPPORTED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_oper_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_OPER_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_max_number_of_temp_sensors_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MAX_NUMBER_OF_TEMP_SENSORS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_temp_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_TEMP_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_max_temp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MAX_TEMP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_average_temp_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVERAGE_TEMP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_acl_table_minimum_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ACL_TABLE_MINIMUM_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_acl_table_maximum_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ACL_TABLE_MAXIMUM_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_acl_entry_minimum_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_acl_entry_maximum_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ACL_ENTRY_MAXIMUM_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_acl_table_group_minimum_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MINIMUM_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_acl_table_group_maximum_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MAXIMUM_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_fdb_dst_user_meta_data_range_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FDB_DST_USER_META_DATA_RANGE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_route_dst_user_meta_data_range_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ROUTE_DST_USER_META_DATA_RANGE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_neighbor_dst_user_meta_data_range_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NEIGHBOR_DST_USER_META_DATA_RANGE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_port_user_meta_data_range_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PORT_USER_META_DATA_RANGE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_vlan_user_meta_data_range_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_VLAN_USER_META_DATA_RANGE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_acl_user_meta_data_range_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ACL_USER_META_DATA_RANGE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_acl_user_trap_id_range_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ACL_USER_TRAP_ID_RANGE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_default_vlan_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_DEFAULT_VLAN_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    
    def test_sai_switch_attr_default_stp_inst_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_DEFAULT_STP_INST_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    
    def test_sai_switch_attr_max_stp_instance_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MAX_STP_INSTANCE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_default_virtual_router_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_DEFAULT_VIRTUAL_ROUTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    
    def test_sai_switch_attr_default_override_virtual_router_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_DEFAULT_OVERRIDE_VIRTUAL_ROUTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    
    def test_sai_switch_attr_default_1q_bridge_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_DEFAULT_1Q_BRIDGE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ingress_acl_set")
    def test_sai_switch_attr_ingress_acl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_INGRESS_ACL", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ingress_acl_set"])
    def test_sai_switch_attr_ingress_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_INGRESS_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_egress_acl_set")
    def test_sai_switch_attr_egress_acl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_EGRESS_ACL", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_egress_acl_set"])
    def test_sai_switch_attr_egress_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_EGRESS_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_switch_attr_qos_max_number_of_traffic_classes_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_TRAFFIC_CLASSES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_qos_max_number_of_scheduler_group_hierarchy_levels_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUP_HIERARCHY_LEVELS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_qos_max_number_of_scheduler_groups_per_hierarchy_level_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUPS_PER_HIERARCHY_LEVEL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_qos_max_number_of_childs_per_scheduler_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_CHILDS_PER_SCHEDULER_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_total_buffer_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_TOTAL_BUFFER_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_ingress_buffer_pool_num_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_INGRESS_BUFFER_POOL_NUM"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_egress_buffer_pool_num_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_EGRESS_BUFFER_POOL_NUM"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_ipv4_route_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_IPV4_ROUTE_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_ipv6_route_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_IPV6_ROUTE_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_ipv4_nexthop_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEXTHOP_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_ipv6_nexthop_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEXTHOP_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_ipv4_neighbor_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEIGHBOR_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_ipv6_neighbor_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEIGHBOR_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_next_hop_group_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_next_hop_group_member_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_MEMBER_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_fdb_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_FDB_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_l2mc_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_L2MC_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_ipmc_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_IPMC_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_snat_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_SNAT_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_dnat_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_DNAT_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_double_nat_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_DOUBLE_NAT_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_acl_table_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_acl_table_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_my_sid_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_MY_SID_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_default_trap_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    
    def test_sai_switch_attr_ecmp_hash_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_HASH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    
    def test_sai_switch_attr_lag_hash_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_LAG_HASH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_restart_warm_set")
    def test_sai_switch_attr_restart_warm_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_RESTART_WARM", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_restart_warm_set"])
    def test_sai_switch_attr_restart_warm_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_RESTART_WARM"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_warm_recover_set")
    def test_sai_switch_attr_warm_recover_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_WARM_RECOVER", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_warm_recover_set"])
    def test_sai_switch_attr_warm_recover_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_WARM_RECOVER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    
    def test_sai_switch_attr_restart_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_RESTART_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_min_planned_restart_interval_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MIN_PLANNED_RESTART_INTERVAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_nv_storage_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NV_STORAGE_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_max_acl_action_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MAX_ACL_ACTION_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_max_acl_range_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MAX_ACL_RANGE_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_acl_capability_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ACL_CAPABILITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_mcast_snooping_capability_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MCAST_SNOOPING_CAPABILITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_switching_mode_set")
    def test_sai_switch_attr_switching_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_SWITCHING_MODE", 'SAI_SWITCH_SWITCHING_MODE_STORE_AND_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_switching_mode_set"])
    def test_sai_switch_attr_switching_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SWITCHING_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_SWITCH_SWITCHING_MODE_STORE_AND_FORWARD', 'Get error, expected SAI_SWITCH_SWITCHING_MODE_STORE_AND_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_bcast_cpu_flood_enable_set")
    def test_sai_switch_attr_bcast_cpu_flood_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_BCAST_CPU_FLOOD_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_bcast_cpu_flood_enable_set"])
    def test_sai_switch_attr_bcast_cpu_flood_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_BCAST_CPU_FLOOD_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_mcast_cpu_flood_enable_set")
    def test_sai_switch_attr_mcast_cpu_flood_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_MCAST_CPU_FLOOD_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_mcast_cpu_flood_enable_set"])
    def test_sai_switch_attr_mcast_cpu_flood_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MCAST_CPU_FLOOD_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_src_mac_address_set")
    def test_sai_switch_attr_src_mac_address_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_SRC_MAC_ADDRESS", 'vendor']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_src_mac_address_set"])
    def test_sai_switch_attr_src_mac_address_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SRC_MAC_ADDRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'vendor', 'Get error, expected vendor but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_max_learned_addresses_set")
    def test_sai_switch_attr_max_learned_addresses_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_MAX_LEARNED_ADDRESSES", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_max_learned_addresses_set"])
    def test_sai_switch_attr_max_learned_addresses_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MAX_LEARNED_ADDRESSES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_fdb_aging_time_set")
    def test_sai_switch_attr_fdb_aging_time_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_FDB_AGING_TIME", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_fdb_aging_time_set"])
    def test_sai_switch_attr_fdb_aging_time_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FDB_AGING_TIME"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_fdb_unicast_miss_packet_action_set")
    def test_sai_switch_attr_fdb_unicast_miss_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_FDB_UNICAST_MISS_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_fdb_unicast_miss_packet_action_set"])
    def test_sai_switch_attr_fdb_unicast_miss_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FDB_UNICAST_MISS_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_fdb_broadcast_miss_packet_action_set")
    def test_sai_switch_attr_fdb_broadcast_miss_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_FDB_BROADCAST_MISS_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_fdb_broadcast_miss_packet_action_set"])
    def test_sai_switch_attr_fdb_broadcast_miss_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FDB_BROADCAST_MISS_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_fdb_multicast_miss_packet_action_set")
    def test_sai_switch_attr_fdb_multicast_miss_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_FDB_MULTICAST_MISS_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_fdb_multicast_miss_packet_action_set"])
    def test_sai_switch_attr_fdb_multicast_miss_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FDB_MULTICAST_MISS_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ecmp_default_hash_algorithm_set")
    def test_sai_switch_attr_ecmp_default_hash_algorithm_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_ALGORITHM", 'SAI_HASH_ALGORITHM_CRC']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ecmp_default_hash_algorithm_set"])
    def test_sai_switch_attr_ecmp_default_hash_algorithm_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_ALGORITHM"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_HASH_ALGORITHM_CRC', 'Get error, expected SAI_HASH_ALGORITHM_CRC but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ecmp_default_hash_seed_set")
    def test_sai_switch_attr_ecmp_default_hash_seed_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_SEED", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ecmp_default_hash_seed_set"])
    def test_sai_switch_attr_ecmp_default_hash_seed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_SEED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ecmp_default_hash_offset_set")
    def test_sai_switch_attr_ecmp_default_hash_offset_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_OFFSET", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ecmp_default_hash_offset_set"])
    def test_sai_switch_attr_ecmp_default_hash_offset_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_OFFSET"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ecmp_default_symmetric_hash_set")
    def test_sai_switch_attr_ecmp_default_symmetric_hash_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_DEFAULT_SYMMETRIC_HASH", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ecmp_default_symmetric_hash_set"])
    def test_sai_switch_attr_ecmp_default_symmetric_hash_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_DEFAULT_SYMMETRIC_HASH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ecmp_hash_ipv4_set")
    def test_sai_switch_attr_ecmp_hash_ipv4_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_HASH_IPV4", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ecmp_hash_ipv4_set"])
    def test_sai_switch_attr_ecmp_hash_ipv4_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_HASH_IPV4"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ecmp_hash_ipv4_in_ipv4_set")
    def test_sai_switch_attr_ecmp_hash_ipv4_in_ipv4_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_HASH_IPV4_IN_IPV4", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ecmp_hash_ipv4_in_ipv4_set"])
    def test_sai_switch_attr_ecmp_hash_ipv4_in_ipv4_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_HASH_IPV4_IN_IPV4"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ecmp_hash_ipv6_set")
    def test_sai_switch_attr_ecmp_hash_ipv6_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_HASH_IPV6", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ecmp_hash_ipv6_set"])
    def test_sai_switch_attr_ecmp_hash_ipv6_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_HASH_IPV6"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_lag_default_hash_algorithm_set")
    def test_sai_switch_attr_lag_default_hash_algorithm_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_ALGORITHM", 'SAI_HASH_ALGORITHM_CRC']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_lag_default_hash_algorithm_set"])
    def test_sai_switch_attr_lag_default_hash_algorithm_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_ALGORITHM"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_HASH_ALGORITHM_CRC', 'Get error, expected SAI_HASH_ALGORITHM_CRC but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_lag_default_hash_seed_set")
    def test_sai_switch_attr_lag_default_hash_seed_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_SEED", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_lag_default_hash_seed_set"])
    def test_sai_switch_attr_lag_default_hash_seed_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_SEED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_lag_default_hash_offset_set")
    def test_sai_switch_attr_lag_default_hash_offset_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_OFFSET", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_lag_default_hash_offset_set"])
    def test_sai_switch_attr_lag_default_hash_offset_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_OFFSET"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_lag_default_symmetric_hash_set")
    def test_sai_switch_attr_lag_default_symmetric_hash_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_LAG_DEFAULT_SYMMETRIC_HASH", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_lag_default_symmetric_hash_set"])
    def test_sai_switch_attr_lag_default_symmetric_hash_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_LAG_DEFAULT_SYMMETRIC_HASH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_lag_hash_ipv4_set")
    def test_sai_switch_attr_lag_hash_ipv4_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_LAG_HASH_IPV4", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_lag_hash_ipv4_set"])
    def test_sai_switch_attr_lag_hash_ipv4_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_LAG_HASH_IPV4"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_lag_hash_ipv4_in_ipv4_set")
    def test_sai_switch_attr_lag_hash_ipv4_in_ipv4_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_LAG_HASH_IPV4_IN_IPV4", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_lag_hash_ipv4_in_ipv4_set"])
    def test_sai_switch_attr_lag_hash_ipv4_in_ipv4_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_LAG_HASH_IPV4_IN_IPV4"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_lag_hash_ipv6_set")
    def test_sai_switch_attr_lag_hash_ipv6_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_LAG_HASH_IPV6", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_lag_hash_ipv6_set"])
    def test_sai_switch_attr_lag_hash_ipv6_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_LAG_HASH_IPV6"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_counter_refresh_interval_set")
    def test_sai_switch_attr_counter_refresh_interval_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_COUNTER_REFRESH_INTERVAL", '1']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_counter_refresh_interval_set"])
    def test_sai_switch_attr_counter_refresh_interval_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_COUNTER_REFRESH_INTERVAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '1', 'Get error, expected 1 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_qos_default_tc_set")
    def test_sai_switch_attr_qos_default_tc_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QOS_DEFAULT_TC", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_qos_default_tc_set"])
    def test_sai_switch_attr_qos_default_tc_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_DEFAULT_TC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_qos_dot1p_to_tc_map_set")
    def test_sai_switch_attr_qos_dot1p_to_tc_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QOS_DOT1P_TO_TC_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_qos_dot1p_to_tc_map_set"])
    def test_sai_switch_attr_qos_dot1p_to_tc_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_DOT1P_TO_TC_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_qos_dot1p_to_color_map_set")
    def test_sai_switch_attr_qos_dot1p_to_color_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QOS_DOT1P_TO_COLOR_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_qos_dot1p_to_color_map_set"])
    def test_sai_switch_attr_qos_dot1p_to_color_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_DOT1P_TO_COLOR_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_qos_dscp_to_tc_map_set")
    def test_sai_switch_attr_qos_dscp_to_tc_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QOS_DSCP_TO_TC_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_qos_dscp_to_tc_map_set"])
    def test_sai_switch_attr_qos_dscp_to_tc_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_DSCP_TO_TC_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_qos_dscp_to_color_map_set")
    def test_sai_switch_attr_qos_dscp_to_color_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QOS_DSCP_TO_COLOR_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_qos_dscp_to_color_map_set"])
    def test_sai_switch_attr_qos_dscp_to_color_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_DSCP_TO_COLOR_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_qos_tc_to_queue_map_set")
    def test_sai_switch_attr_qos_tc_to_queue_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QOS_TC_TO_QUEUE_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_qos_tc_to_queue_map_set"])
    def test_sai_switch_attr_qos_tc_to_queue_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_TC_TO_QUEUE_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_qos_tc_and_color_to_dot1p_map_set")
    def test_sai_switch_attr_qos_tc_and_color_to_dot1p_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_qos_tc_and_color_to_dot1p_map_set"])
    def test_sai_switch_attr_qos_tc_and_color_to_dot1p_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_qos_tc_and_color_to_dscp_map_set")
    def test_sai_switch_attr_qos_tc_and_color_to_dscp_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_qos_tc_and_color_to_dscp_map_set"])
    def test_sai_switch_attr_qos_tc_and_color_to_dscp_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_switch_shell_enable_set")
    def test_sai_switch_attr_switch_shell_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_SWITCH_SHELL_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_switch_shell_enable_set"])
    def test_sai_switch_attr_switch_shell_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SWITCH_SHELL_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_switch_state_change_notify_set")
    def test_sai_switch_attr_switch_state_change_notify_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_SWITCH_STATE_CHANGE_NOTIFY", 'NULL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_switch_state_change_notify_set"])
    def test_sai_switch_attr_switch_state_change_notify_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SWITCH_STATE_CHANGE_NOTIFY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'NULL', 'Get error, expected NULL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_switch_shutdown_request_notify_set")
    def test_sai_switch_attr_switch_shutdown_request_notify_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY", 'NULL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_switch_shutdown_request_notify_set"])
    def test_sai_switch_attr_switch_shutdown_request_notify_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'NULL', 'Get error, expected NULL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_fdb_event_notify_set")
    def test_sai_switch_attr_fdb_event_notify_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_FDB_EVENT_NOTIFY", 'NULL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_fdb_event_notify_set"])
    def test_sai_switch_attr_fdb_event_notify_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FDB_EVENT_NOTIFY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'NULL', 'Get error, expected NULL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_port_state_change_notify_set")
    def test_sai_switch_attr_port_state_change_notify_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_PORT_STATE_CHANGE_NOTIFY", 'NULL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_port_state_change_notify_set"])
    def test_sai_switch_attr_port_state_change_notify_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PORT_STATE_CHANGE_NOTIFY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'NULL', 'Get error, expected NULL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_packet_event_notify_set")
    def test_sai_switch_attr_packet_event_notify_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_PACKET_EVENT_NOTIFY", 'NULL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_packet_event_notify_set"])
    def test_sai_switch_attr_packet_event_notify_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PACKET_EVENT_NOTIFY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'NULL', 'Get error, expected NULL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_fast_api_enable_set")
    def test_sai_switch_attr_fast_api_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_FAST_API_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_fast_api_enable_set"])
    def test_sai_switch_attr_fast_api_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FAST_API_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_mirror_tc_set")
    def test_sai_switch_attr_mirror_tc_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_MIRROR_TC", '255']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_mirror_tc_set"])
    def test_sai_switch_attr_mirror_tc_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MIRROR_TC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '255', 'Get error, expected 255 but got %s' %  r_value


    
    def test_sai_switch_attr_acl_stage_ingress_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ACL_STAGE_INGRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_acl_stage_egress_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ACL_STAGE_EGRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_srv6_max_sid_depth_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SRV6_MAX_SID_DEPTH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_srv6_tlv_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SRV6_TLV_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_qos_num_lossless_queues_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_NUM_LOSSLESS_QUEUES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_queue_pfc_deadlock_notify_set")
    def test_sai_switch_attr_queue_pfc_deadlock_notify_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QUEUE_PFC_DEADLOCK_NOTIFY", 'NULL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_queue_pfc_deadlock_notify_set"])
    def test_sai_switch_attr_queue_pfc_deadlock_notify_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QUEUE_PFC_DEADLOCK_NOTIFY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'NULL', 'Get error, expected NULL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_pfc_dlr_packet_action_set")
    def test_sai_switch_attr_pfc_dlr_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_PFC_DLR_PACKET_ACTION", 'SAI_PACKET_ACTION_DROP']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_pfc_dlr_packet_action_set"])
    def test_sai_switch_attr_pfc_dlr_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PFC_DLR_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_DROP', 'Get error, expected SAI_PACKET_ACTION_DROP but got %s' %  r_value


    
    def test_sai_switch_attr_pfc_tc_dld_interval_range_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL_RANGE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_pfc_tc_dld_interval_set")
    def test_sai_switch_attr_pfc_tc_dld_interval_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_pfc_tc_dld_interval_set"])
    def test_sai_switch_attr_pfc_tc_dld_interval_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    
    def test_sai_switch_attr_pfc_tc_dlr_interval_range_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL_RANGE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_pfc_tc_dlr_interval_set")
    def test_sai_switch_attr_pfc_tc_dlr_interval_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_pfc_tc_dlr_interval_set"])
    def test_sai_switch_attr_pfc_tc_dlr_interval_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    
    def test_sai_switch_attr_supported_protected_object_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SUPPORTED_PROTECTED_OBJECT_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_tpid_outer_vlan_set")
    def test_sai_switch_attr_tpid_outer_vlan_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_TPID_OUTER_VLAN", '0x88A8']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_tpid_outer_vlan_set"])
    def test_sai_switch_attr_tpid_outer_vlan_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_TPID_OUTER_VLAN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0x88A8', 'Get error, expected 0x88A8 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_tpid_inner_vlan_set")
    def test_sai_switch_attr_tpid_inner_vlan_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_TPID_INNER_VLAN", '0x8100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_tpid_inner_vlan_set"])
    def test_sai_switch_attr_tpid_inner_vlan_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_TPID_INNER_VLAN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0x8100', 'Get error, expected 0x8100 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_crc_check_enable_set")
    def test_sai_switch_attr_crc_check_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_CRC_CHECK_ENABLE", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_crc_check_enable_set"])
    def test_sai_switch_attr_crc_check_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_CRC_CHECK_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_crc_recalculation_enable_set")
    def test_sai_switch_attr_crc_recalculation_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_CRC_RECALCULATION_ENABLE", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_crc_recalculation_enable_set"])
    def test_sai_switch_attr_crc_recalculation_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_CRC_RECALCULATION_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_bfd_session_state_change_notify_set")
    def test_sai_switch_attr_bfd_session_state_change_notify_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_BFD_SESSION_STATE_CHANGE_NOTIFY", 'NULL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_bfd_session_state_change_notify_set"])
    def test_sai_switch_attr_bfd_session_state_change_notify_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_BFD_SESSION_STATE_CHANGE_NOTIFY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'NULL', 'Get error, expected NULL but got %s' %  r_value


    
    def test_sai_switch_attr_number_of_bfd_session_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NUMBER_OF_BFD_SESSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_max_bfd_session_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MAX_BFD_SESSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_supported_ipv4_bfd_session_offload_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SUPPORTED_IPV4_BFD_SESSION_OFFLOAD_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_supported_ipv6_bfd_session_offload_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SUPPORTED_IPV6_BFD_SESSION_OFFLOAD_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_min_bfd_rx_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MIN_BFD_RX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_min_bfd_tx_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MIN_BFD_TX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ecn_ect_threshold_enable_set")
    def test_sai_switch_attr_ecn_ect_threshold_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_ECN_ECT_THRESHOLD_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ecn_ect_threshold_enable_set"])
    def test_sai_switch_attr_ecn_ect_threshold_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ECN_ECT_THRESHOLD_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_vxlan_default_router_mac_set")
    def test_sai_switch_attr_vxlan_default_router_mac_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC", 'vendor']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_vxlan_default_router_mac_set"])
    def test_sai_switch_attr_vxlan_default_router_mac_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'vendor', 'Get error, expected vendor but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_vxlan_default_port_set")
    def test_sai_switch_attr_vxlan_default_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_VXLAN_DEFAULT_PORT", '4789']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_vxlan_default_port_set"])
    def test_sai_switch_attr_vxlan_default_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_VXLAN_DEFAULT_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '4789', 'Get error, expected 4789 but got %s' %  r_value


    
    def test_sai_switch_attr_max_mirror_session_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MAX_MIRROR_SESSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_max_sampled_mirror_session_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MAX_SAMPLED_MIRROR_SESSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_supported_extended_stats_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SUPPORTED_EXTENDED_STATS_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_uninit_data_plane_on_removal_set")
    def test_sai_switch_attr_uninit_data_plane_on_removal_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_UNINIT_DATA_PLANE_ON_REMOVAL", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_uninit_data_plane_on_removal_set"])
    def test_sai_switch_attr_uninit_data_plane_on_removal_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_UNINIT_DATA_PLANE_ON_REMOVAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_tam_object_id_set")
    def test_sai_switch_attr_tam_object_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_TAM_OBJECT_ID", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_tam_object_id_set"])
    def test_sai_switch_attr_tam_object_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_TAM_OBJECT_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_tam_event_notify_set")
    def test_sai_switch_attr_tam_event_notify_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_TAM_EVENT_NOTIFY", 'NULL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_tam_event_notify_set"])
    def test_sai_switch_attr_tam_event_notify_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_TAM_EVENT_NOTIFY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'NULL', 'Get error, expected NULL but got %s' %  r_value


    
    def test_sai_switch_attr_supported_object_type_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SUPPORTED_OBJECT_TYPE_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_pre_shutdown_set")
    def test_sai_switch_attr_pre_shutdown_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_PRE_SHUTDOWN", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_pre_shutdown_set"])
    def test_sai_switch_attr_pre_shutdown_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PRE_SHUTDOWN"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_nat_zone_counter_object_id_set")
    def test_sai_switch_attr_nat_zone_counter_object_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_NAT_ZONE_COUNTER_OBJECT_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_nat_zone_counter_object_id_set"])
    def test_sai_switch_attr_nat_zone_counter_object_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NAT_ZONE_COUNTER_OBJECT_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_nat_enable_set")
    def test_sai_switch_attr_nat_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_NAT_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_nat_enable_set"])
    def test_sai_switch_attr_nat_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NAT_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_register_read_set")
    def test_sai_switch_attr_register_read_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_REGISTER_READ", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_register_read_set"])
    def test_sai_switch_attr_register_read_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_REGISTER_READ"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_register_write_set")
    def test_sai_switch_attr_register_write_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_REGISTER_WRITE", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_register_write_set"])
    def test_sai_switch_attr_register_write_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_REGISTER_WRITE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_firmware_download_execute_set")
    def test_sai_switch_attr_firmware_download_execute_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_EXECUTE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_firmware_download_execute_set"])
    def test_sai_switch_attr_firmware_download_execute_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_EXECUTE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_firmware_broadcast_stop_set")
    def test_sai_switch_attr_firmware_broadcast_stop_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_FIRMWARE_BROADCAST_STOP", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_firmware_broadcast_stop_set"])
    def test_sai_switch_attr_firmware_broadcast_stop_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FIRMWARE_BROADCAST_STOP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_firmware_verify_and_init_switch_set")
    def test_sai_switch_attr_firmware_verify_and_init_switch_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_FIRMWARE_VERIFY_AND_INIT_SWITCH", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_firmware_verify_and_init_switch_set"])
    def test_sai_switch_attr_firmware_verify_and_init_switch_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FIRMWARE_VERIFY_AND_INIT_SWITCH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    
    def test_sai_switch_attr_firmware_status_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FIRMWARE_STATUS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_firmware_major_version_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FIRMWARE_MAJOR_VERSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_firmware_minor_version_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FIRMWARE_MINOR_VERSION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_port_connector_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PORT_CONNECTOR_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_propogate_port_state_from_line_to_system_port_support_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PROPOGATE_PORT_STATE_FROM_LINE_TO_SYSTEM_PORT_SUPPORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_macsec_object_list_set")
    def test_sai_switch_attr_macsec_object_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_MACSEC_OBJECT_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_macsec_object_list_set"])
    def test_sai_switch_attr_macsec_object_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MACSEC_OBJECT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_qos_mpls_exp_to_tc_map_set")
    def test_sai_switch_attr_qos_mpls_exp_to_tc_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_TC_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_qos_mpls_exp_to_tc_map_set"])
    def test_sai_switch_attr_qos_mpls_exp_to_tc_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_TC_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_qos_mpls_exp_to_color_map_set")
    def test_sai_switch_attr_qos_mpls_exp_to_color_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_qos_mpls_exp_to_color_map_set"])
    def test_sai_switch_attr_qos_mpls_exp_to_color_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_qos_tc_and_color_to_mpls_exp_map_set")
    def test_sai_switch_attr_qos_tc_and_color_to_mpls_exp_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_qos_tc_and_color_to_mpls_exp_map_set"])
    def test_sai_switch_attr_qos_tc_and_color_to_mpls_exp_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_switch_attr_number_of_system_ports_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NUMBER_OF_SYSTEM_PORTS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_system_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SYSTEM_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    
    def test_sai_switch_attr_number_of_fabric_ports_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NUMBER_OF_FABRIC_PORTS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_fabric_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FABRIC_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'internal', 'Get error, expected internal but got %s' %  r_value


    
    def test_sai_switch_attr_packet_dma_memory_pool_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PACKET_DMA_MEMORY_POOL_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_failover_config_mode_set")
    def test_sai_switch_attr_failover_config_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_FAILOVER_CONFIG_MODE", 'SAI_SWITCH_FAILOVER_CONFIG_MODE_NO_HITLESS']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_failover_config_mode_set"])
    def test_sai_switch_attr_failover_config_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_FAILOVER_CONFIG_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_SWITCH_FAILOVER_CONFIG_MODE_NO_HITLESS', 'Get error, expected SAI_SWITCH_FAILOVER_CONFIG_MODE_NO_HITLESS but got %s' %  r_value


    
    def test_sai_switch_attr_supported_failover_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SUPPORTED_FAILOVER_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_tunnel_objects_list_set")
    def test_sai_switch_attr_tunnel_objects_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_TUNNEL_OBJECTS_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_tunnel_objects_list_set"])
    def test_sai_switch_attr_tunnel_objects_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_TUNNEL_OBJECTS_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    
    def test_sai_switch_attr_packet_available_dma_memory_pool_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PACKET_AVAILABLE_DMA_MEMORY_POOL_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_pre_ingress_acl_set")
    def test_sai_switch_attr_pre_ingress_acl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_PRE_INGRESS_ACL", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_pre_ingress_acl_set"])
    def test_sai_switch_attr_pre_ingress_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_PRE_INGRESS_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_switch_attr_available_snapt_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_SNAPT_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_dnapt_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_DNAPT_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_double_napt_entry_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_DOUBLE_NAPT_ENTRY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_my_mac_table_minimum_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MY_MAC_TABLE_MINIMUM_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_my_mac_table_maximum_priority_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MY_MAC_TABLE_MAXIMUM_PRIORITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_my_mac_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MY_MAC_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_installed_my_mac_entries_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_INSTALLED_MY_MAC_ENTRIES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_available_my_mac_entries_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_AVAILABLE_MY_MAC_ENTRIES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_switch_attr_max_number_of_forwarding_classes_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MAX_NUMBER_OF_FORWARDING_CLASSES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_qos_dscp_to_forwarding_class_map_set")
    def test_sai_switch_attr_qos_dscp_to_forwarding_class_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_qos_dscp_to_forwarding_class_map_set"])
    def test_sai_switch_attr_qos_dscp_to_forwarding_class_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_qos_mpls_exp_to_forwarding_class_map_set")
    def test_sai_switch_attr_qos_mpls_exp_to_forwarding_class_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_qos_mpls_exp_to_forwarding_class_map_set"])
    def test_sai_switch_attr_qos_mpls_exp_to_forwarding_class_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ipsec_object_id_set")
    def test_sai_switch_attr_ipsec_object_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_IPSEC_OBJECT_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ipsec_object_id_set"])
    def test_sai_switch_attr_ipsec_object_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_IPSEC_OBJECT_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ipsec_sa_tag_tpid_set")
    def test_sai_switch_attr_ipsec_sa_tag_tpid_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_IPSEC_SA_TAG_TPID", '0xFFFE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ipsec_sa_tag_tpid_set"])
    def test_sai_switch_attr_ipsec_sa_tag_tpid_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_IPSEC_SA_TAG_TPID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0xFFFE', 'Get error, expected 0xFFFE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ipsec_sa_status_change_notify_set")
    def test_sai_switch_attr_ipsec_sa_status_change_notify_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_IPSEC_SA_STATUS_CHANGE_NOTIFY", 'NULL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ipsec_sa_status_change_notify_set"])
    def test_sai_switch_attr_ipsec_sa_status_change_notify_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_IPSEC_SA_STATUS_CHANGE_NOTIFY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'NULL', 'Get error, expected NULL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_nat_event_notify_set")
    def test_sai_switch_attr_nat_event_notify_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_NAT_EVENT_NOTIFY", 'NULL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_nat_event_notify_set"])
    def test_sai_switch_attr_nat_event_notify_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_NAT_EVENT_NOTIFY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'NULL', 'Get error, expected NULL but got %s' %  r_value


    
    def test_sai_switch_attr_max_ecmp_member_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_MAX_ECMP_MEMBER_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ecmp_member_count_set")
    def test_sai_switch_attr_ecmp_member_count_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_MEMBER_COUNT", '64']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ecmp_member_count_set"])
    def test_sai_switch_attr_ecmp_member_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ECMP_MEMBER_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '64', 'Get error, expected 64 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_ars_profile_set")
    def test_sai_switch_attr_ars_profile_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_ARS_PROFILE", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_ars_profile_set"])
    def test_sai_switch_attr_ars_profile_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ARS_PROFILE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_switch_attr_acl_stage_post_ingress_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ACL_STAGE_POST_INGRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_credit_wd_set")
    def test_sai_switch_attr_credit_wd_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_CREDIT_WD", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_credit_wd_set"])
    def test_sai_switch_attr_credit_wd_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_CREDIT_WD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_credit_wd_timer_set")
    def test_sai_switch_attr_credit_wd_timer_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_CREDIT_WD_TIMER", '500']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_credit_wd_timer_set"])
    def test_sai_switch_attr_credit_wd_timer_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_CREDIT_WD_TIMER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '500', 'Get error, expected 500 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_switch_isolate_set")
    def test_sai_switch_attr_switch_isolate_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_SWITCH_ISOLATE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_switch_isolate_set"])
    def test_sai_switch_attr_switch_isolate_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SWITCH_ISOLATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_hostif_oper_status_update_mode_set")
    def test_sai_switch_attr_hostif_oper_status_update_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_HOSTIF_OPER_STATUS_UPDATE_MODE", 'SAI_SWITCH_HOSTIF_OPER_STATUS_UPDATE_MODE_APPLICATION']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_hostif_oper_status_update_mode_set"])
    def test_sai_switch_attr_hostif_oper_status_update_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_HOSTIF_OPER_STATUS_UPDATE_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_SWITCH_HOSTIF_OPER_STATUS_UPDATE_MODE_APPLICATION', 'Get error, expected SAI_SWITCH_HOSTIF_OPER_STATUS_UPDATE_MODE_APPLICATION but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_switch_asic_sdk_health_event_notify_set")
    def test_sai_switch_attr_switch_asic_sdk_health_event_notify_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_SWITCH_ASIC_SDK_HEALTH_EVENT_NOTIFY", 'NULL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_switch_asic_sdk_health_event_notify_set"])
    def test_sai_switch_attr_switch_asic_sdk_health_event_notify_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_SWITCH_ASIC_SDK_HEALTH_EVENT_NOTIFY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'NULL', 'Get error, expected NULL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_reg_fatal_switch_asic_sdk_health_category_set")
    def test_sai_switch_attr_reg_fatal_switch_asic_sdk_health_category_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_REG_FATAL_SWITCH_ASIC_SDK_HEALTH_CATEGORY", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_reg_fatal_switch_asic_sdk_health_category_set"])
    def test_sai_switch_attr_reg_fatal_switch_asic_sdk_health_category_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_REG_FATAL_SWITCH_ASIC_SDK_HEALTH_CATEGORY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_reg_warning_switch_asic_sdk_health_category_set")
    def test_sai_switch_attr_reg_warning_switch_asic_sdk_health_category_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_REG_WARNING_SWITCH_ASIC_SDK_HEALTH_CATEGORY", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_reg_warning_switch_asic_sdk_health_category_set"])
    def test_sai_switch_attr_reg_warning_switch_asic_sdk_health_category_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_REG_WARNING_SWITCH_ASIC_SDK_HEALTH_CATEGORY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_attr_reg_notice_switch_asic_sdk_health_category_set")
    def test_sai_switch_attr_reg_notice_switch_asic_sdk_health_category_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_ATTR_REG_NOTICE_SWITCH_ASIC_SDK_HEALTH_CATEGORY", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_attr_reg_notice_switch_asic_sdk_health_category_set"])
    def test_sai_switch_attr_reg_notice_switch_asic_sdk_health_category_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_REG_NOTICE_SWITCH_ASIC_SDK_HEALTH_CATEGORY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    
    def test_sai_switch_attr_acl_chain_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_ATTR_ACL_CHAIN_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_tunnel_attr_loopback_packet_action_set")
    def test_sai_switch_tunnel_attr_loopback_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_tunnel_attr_loopback_packet_action_set"])
    def test_sai_switch_tunnel_attr_loopback_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_tunnel_attr_tunnel_vxlan_udp_sport_mode_set")
    def test_sai_switch_tunnel_attr_tunnel_vxlan_udp_sport_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_TUNNEL_VXLAN_UDP_SPORT_MODE", 'SAI_TUNNEL_VXLAN_UDP_SPORT_MODE_EPHEMERAL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_tunnel_attr_tunnel_vxlan_udp_sport_mode_set"])
    def test_sai_switch_tunnel_attr_tunnel_vxlan_udp_sport_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_TUNNEL_VXLAN_UDP_SPORT_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_TUNNEL_VXLAN_UDP_SPORT_MODE_EPHEMERAL', 'Get error, expected SAI_TUNNEL_VXLAN_UDP_SPORT_MODE_EPHEMERAL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_tunnel_attr_vxlan_udp_sport_set")
    def test_sai_switch_tunnel_attr_vxlan_udp_sport_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_tunnel_attr_vxlan_udp_sport_set"])
    def test_sai_switch_tunnel_attr_vxlan_udp_sport_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_tunnel_attr_vxlan_udp_sport_mask_set")
    def test_sai_switch_tunnel_attr_vxlan_udp_sport_mask_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_tunnel_attr_vxlan_udp_sport_mask_set"])
    def test_sai_switch_tunnel_attr_vxlan_udp_sport_mask_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_tunnel_attr_encap_qos_tc_and_color_to_dscp_map_set")
    def test_sai_switch_tunnel_attr_encap_qos_tc_and_color_to_dscp_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_tunnel_attr_encap_qos_tc_and_color_to_dscp_map_set"])
    def test_sai_switch_tunnel_attr_encap_qos_tc_and_color_to_dscp_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_tunnel_attr_encap_qos_tc_to_queue_map_set")
    def test_sai_switch_tunnel_attr_encap_qos_tc_to_queue_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_tunnel_attr_encap_qos_tc_to_queue_map_set"])
    def test_sai_switch_tunnel_attr_encap_qos_tc_to_queue_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_tunnel_attr_decap_qos_dscp_to_tc_map_set")
    def test_sai_switch_tunnel_attr_decap_qos_dscp_to_tc_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_tunnel_attr_decap_qos_dscp_to_tc_map_set"])
    def test_sai_switch_tunnel_attr_decap_qos_dscp_to_tc_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_switch_tunnel_attr_decap_qos_tc_to_priority_group_map_set")
    def test_sai_switch_tunnel_attr_decap_qos_tc_to_priority_group_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_switch_tunnel_attr_decap_qos_tc_to_priority_group_map_set"])
    def test_sai_switch_tunnel_attr_decap_qos_tc_to_priority_group_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SWITCH_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    
    def test_sai_system_port_attr_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SYSTEM_PORT_ATTR_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_system_port_attr_qos_number_of_voqs_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SYSTEM_PORT_ATTR_QOS_NUMBER_OF_VOQS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_system_port_attr_qos_voq_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SYSTEM_PORT_ATTR_QOS_VOQ_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_system_port_attr_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SYSTEM_PORT_ATTR_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_system_port_attr_admin_state_set")
    def test_sai_system_port_attr_admin_state_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SYSTEM_PORT_ATTR_ADMIN_STATE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_system_port_attr_admin_state_set"])
    def test_sai_system_port_attr_admin_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SYSTEM_PORT_ATTR_ADMIN_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_system_port_attr_qos_tc_to_queue_map_set")
    def test_sai_system_port_attr_qos_tc_to_queue_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_SYSTEM_PORT_ATTR_QOS_TC_TO_QUEUE_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_system_port_attr_qos_tc_to_queue_map_set"])
    def test_sai_system_port_attr_qos_tc_to_queue_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_SYSTEM_PORT_ATTR_QOS_TC_TO_QUEUE_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_attr_telemetry_objects_list_set")
    def test_sai_tam_attr_telemetry_objects_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_ATTR_TELEMETRY_OBJECTS_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_attr_telemetry_objects_list_set"])
    def test_sai_tam_attr_telemetry_objects_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_ATTR_TELEMETRY_OBJECTS_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_attr_event_objects_list_set")
    def test_sai_tam_attr_event_objects_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_ATTR_EVENT_OBJECTS_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_attr_event_objects_list_set"])
    def test_sai_tam_attr_event_objects_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_ATTR_EVENT_OBJECTS_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_attr_int_objects_list_set")
    def test_sai_tam_attr_int_objects_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_ATTR_INT_OBJECTS_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_attr_int_objects_list_set"])
    def test_sai_tam_attr_int_objects_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_ATTR_INT_OBJECTS_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_collector_attr_src_ip_set")
    def test_sai_tam_collector_attr_src_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_SRC_IP", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_collector_attr_src_ip_set"])
    def test_sai_tam_collector_attr_src_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_SRC_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_collector_attr_dst_ip_set")
    def test_sai_tam_collector_attr_dst_ip_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_DST_IP", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_collector_attr_dst_ip_set"])
    def test_sai_tam_collector_attr_dst_ip_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_DST_IP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_collector_attr_localhost_set")
    def test_sai_tam_collector_attr_localhost_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_LOCALHOST", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_collector_attr_localhost_set"])
    def test_sai_tam_collector_attr_localhost_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_LOCALHOST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_collector_attr_virtual_router_id_set")
    def test_sai_tam_collector_attr_virtual_router_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_VIRTUAL_ROUTER_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_collector_attr_virtual_router_id_set"])
    def test_sai_tam_collector_attr_virtual_router_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_VIRTUAL_ROUTER_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_collector_attr_truncate_size_set")
    def test_sai_tam_collector_attr_truncate_size_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_TRUNCATE_SIZE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_collector_attr_truncate_size_set"])
    def test_sai_tam_collector_attr_truncate_size_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_TRUNCATE_SIZE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_collector_attr_transport_set")
    def test_sai_tam_collector_attr_transport_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_TRANSPORT", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_collector_attr_transport_set"])
    def test_sai_tam_collector_attr_transport_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_TRANSPORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_collector_attr_dscp_value_set")
    def test_sai_tam_collector_attr_dscp_value_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_DSCP_VALUE", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_collector_attr_dscp_value_set"])
    def test_sai_tam_collector_attr_dscp_value_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_COLLECTOR_ATTR_DSCP_VALUE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_event_attr_threshold_set")
    def test_sai_tam_event_attr_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_EVENT_ATTR_THRESHOLD", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_event_attr_threshold_set"])
    def test_sai_tam_event_attr_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_EVENT_ATTR_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_event_attr_dscp_value_set")
    def test_sai_tam_event_attr_dscp_value_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_EVENT_ATTR_DSCP_VALUE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_event_attr_dscp_value_set"])
    def test_sai_tam_event_attr_dscp_value_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_EVENT_ATTR_DSCP_VALUE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_event_action_attr_report_type_set")
    def test_sai_tam_event_action_attr_report_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_EVENT_ACTION_ATTR_REPORT_TYPE", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_event_action_attr_report_type_set"])
    def test_sai_tam_event_action_attr_report_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_EVENT_ACTION_ATTR_REPORT_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_event_action_attr_qos_action_type_set")
    def test_sai_tam_event_action_attr_qos_action_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_EVENT_ACTION_ATTR_QOS_ACTION_TYPE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_event_action_attr_qos_action_type_set"])
    def test_sai_tam_event_action_attr_qos_action_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_EVENT_ACTION_ATTR_QOS_ACTION_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_event_threshold_attr_high_watermark_set")
    def test_sai_tam_event_threshold_attr_high_watermark_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_EVENT_THRESHOLD_ATTR_HIGH_WATERMARK", '90']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_event_threshold_attr_high_watermark_set"])
    def test_sai_tam_event_threshold_attr_high_watermark_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_EVENT_THRESHOLD_ATTR_HIGH_WATERMARK"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '90', 'Get error, expected 90 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_event_threshold_attr_low_watermark_set")
    def test_sai_tam_event_threshold_attr_low_watermark_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_EVENT_THRESHOLD_ATTR_LOW_WATERMARK", '10']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_event_threshold_attr_low_watermark_set"])
    def test_sai_tam_event_threshold_attr_low_watermark_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_EVENT_THRESHOLD_ATTR_LOW_WATERMARK"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '10', 'Get error, expected 10 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_event_threshold_attr_latency_set")
    def test_sai_tam_event_threshold_attr_latency_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_EVENT_THRESHOLD_ATTR_LATENCY", '10']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_event_threshold_attr_latency_set"])
    def test_sai_tam_event_threshold_attr_latency_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_EVENT_THRESHOLD_ATTR_LATENCY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '10', 'Get error, expected 10 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_event_threshold_attr_rate_set")
    def test_sai_tam_event_threshold_attr_rate_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_EVENT_THRESHOLD_ATTR_RATE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_event_threshold_attr_rate_set"])
    def test_sai_tam_event_threshold_attr_rate_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_EVENT_THRESHOLD_ATTR_RATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_event_threshold_attr_abs_value_set")
    def test_sai_tam_event_threshold_attr_abs_value_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_EVENT_THRESHOLD_ATTR_ABS_VALUE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_event_threshold_attr_abs_value_set"])
    def test_sai_tam_event_threshold_attr_abs_value_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_EVENT_THRESHOLD_ATTR_ABS_VALUE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_event_threshold_attr_unit_set")
    def test_sai_tam_event_threshold_attr_unit_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_EVENT_THRESHOLD_ATTR_UNIT", 'SAI_TAM_EVENT_THRESHOLD_UNIT_MSEC']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_event_threshold_attr_unit_set"])
    def test_sai_tam_event_threshold_attr_unit_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_EVENT_THRESHOLD_ATTR_UNIT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_TAM_EVENT_THRESHOLD_UNIT_MSEC', 'Get error, expected SAI_TAM_EVENT_THRESHOLD_UNIT_MSEC but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_ioam_trace_type_set")
    def test_sai_tam_int_attr_ioam_trace_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_IOAM_TRACE_TYPE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_ioam_trace_type_set"])
    def test_sai_tam_int_attr_ioam_trace_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_IOAM_TRACE_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_trace_vector_set")
    def test_sai_tam_int_attr_trace_vector_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_TRACE_VECTOR", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_trace_vector_set"])
    def test_sai_tam_int_attr_trace_vector_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_TRACE_VECTOR"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_action_vector_set")
    def test_sai_tam_int_attr_action_vector_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_ACTION_VECTOR", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_action_vector_set"])
    def test_sai_tam_int_attr_action_vector_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_ACTION_VECTOR"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_p4_int_instruction_bitmap_set")
    def test_sai_tam_int_attr_p4_int_instruction_bitmap_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_P4_INT_INSTRUCTION_BITMAP", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_p4_int_instruction_bitmap_set"])
    def test_sai_tam_int_attr_p4_int_instruction_bitmap_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_P4_INT_INSTRUCTION_BITMAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_metadata_fragment_enable_set")
    def test_sai_tam_int_attr_metadata_fragment_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_METADATA_FRAGMENT_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_metadata_fragment_enable_set"])
    def test_sai_tam_int_attr_metadata_fragment_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_METADATA_FRAGMENT_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_metadata_checksum_enable_set")
    def test_sai_tam_int_attr_metadata_checksum_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_METADATA_CHECKSUM_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_metadata_checksum_enable_set"])
    def test_sai_tam_int_attr_metadata_checksum_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_METADATA_CHECKSUM_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_report_all_packets_set")
    def test_sai_tam_int_attr_report_all_packets_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_REPORT_ALL_PACKETS", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_report_all_packets_set"])
    def test_sai_tam_int_attr_report_all_packets_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_REPORT_ALL_PACKETS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_flow_liveness_period_set")
    def test_sai_tam_int_attr_flow_liveness_period_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_FLOW_LIVENESS_PERIOD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_flow_liveness_period_set"])
    def test_sai_tam_int_attr_flow_liveness_period_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_FLOW_LIVENESS_PERIOD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_latency_sensitivity_set")
    def test_sai_tam_int_attr_latency_sensitivity_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_LATENCY_SENSITIVITY", '20']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_latency_sensitivity_set"])
    def test_sai_tam_int_attr_latency_sensitivity_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_LATENCY_SENSITIVITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '20', 'Get error, expected 20 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_acl_group_set")
    def test_sai_tam_int_attr_acl_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_ACL_GROUP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_acl_group_set"])
    def test_sai_tam_int_attr_acl_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_ACL_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_max_hop_count_set")
    def test_sai_tam_int_attr_max_hop_count_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_MAX_HOP_COUNT", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_max_hop_count_set"])
    def test_sai_tam_int_attr_max_hop_count_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_MAX_HOP_COUNT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_max_length_set")
    def test_sai_tam_int_attr_max_length_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_MAX_LENGTH", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_max_length_set"])
    def test_sai_tam_int_attr_max_length_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_MAX_LENGTH"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_name_space_id_set")
    def test_sai_tam_int_attr_name_space_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_NAME_SPACE_ID", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_name_space_id_set"])
    def test_sai_tam_int_attr_name_space_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_NAME_SPACE_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_name_space_id_global_set")
    def test_sai_tam_int_attr_name_space_id_global_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_NAME_SPACE_ID_GLOBAL", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_name_space_id_global_set"])
    def test_sai_tam_int_attr_name_space_id_global_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_NAME_SPACE_ID_GLOBAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_ingress_samplepacket_enable_set")
    def test_sai_tam_int_attr_ingress_samplepacket_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_INGRESS_SAMPLEPACKET_ENABLE", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_ingress_samplepacket_enable_set"])
    def test_sai_tam_int_attr_ingress_samplepacket_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_INGRESS_SAMPLEPACKET_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_collector_list_set")
    def test_sai_tam_int_attr_collector_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_COLLECTOR_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_collector_list_set"])
    def test_sai_tam_int_attr_collector_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_COLLECTOR_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_int_attr_math_func_set")
    def test_sai_tam_int_attr_math_func_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_INT_ATTR_MATH_FUNC", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_int_attr_math_func_set"])
    def test_sai_tam_int_attr_math_func_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_INT_ATTR_MATH_FUNC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_math_func_attr_tam_tel_math_func_type_set")
    def test_sai_tam_math_func_attr_tam_tel_math_func_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_MATH_FUNC_ATTR_TAM_TEL_MATH_FUNC_TYPE", 'SAI_TAM_TEL_MATH_FUNC_TYPE_NONE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_math_func_attr_tam_tel_math_func_type_set"])
    def test_sai_tam_math_func_attr_tam_tel_math_func_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_MATH_FUNC_ATTR_TAM_TEL_MATH_FUNC_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_TAM_TEL_MATH_FUNC_TYPE_NONE', 'Get error, expected SAI_TAM_TEL_MATH_FUNC_TYPE_NONE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_report_attr_type_set")
    def test_sai_tam_report_attr_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_REPORT_ATTR_TYPE", 'TODO']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_report_attr_type_set"])
    def test_sai_tam_report_attr_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_REPORT_ATTR_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_report_attr_quota_set")
    def test_sai_tam_report_attr_quota_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_REPORT_ATTR_QUOTA", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_report_attr_quota_set"])
    def test_sai_tam_report_attr_quota_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_REPORT_ATTR_QUOTA"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_report_attr_report_interval_set")
    def test_sai_tam_report_attr_report_interval_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_REPORT_ATTR_REPORT_INTERVAL", '1000']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_report_attr_report_interval_set"])
    def test_sai_tam_report_attr_report_interval_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_REPORT_ATTR_REPORT_INTERVAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '1000', 'Get error, expected 1000 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_report_attr_enterprise_number_set")
    def test_sai_tam_report_attr_enterprise_number_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_REPORT_ATTR_ENTERPRISE_NUMBER", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_report_attr_enterprise_number_set"])
    def test_sai_tam_report_attr_enterprise_number_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_REPORT_ATTR_ENTERPRISE_NUMBER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_report_attr_template_report_interval_set")
    def test_sai_tam_report_attr_template_report_interval_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_REPORT_ATTR_TEMPLATE_REPORT_INTERVAL", '15']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_report_attr_template_report_interval_set"])
    def test_sai_tam_report_attr_template_report_interval_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_REPORT_ATTR_TEMPLATE_REPORT_INTERVAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '15', 'Get error, expected 15 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_int_switch_identifier_set")
    def test_sai_tam_tel_type_attr_int_switch_identifier_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_INT_SWITCH_IDENTIFIER", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_int_switch_identifier_set"])
    def test_sai_tam_tel_type_attr_int_switch_identifier_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_INT_SWITCH_IDENTIFIER"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_switch_enable_port_stats_set")
    def test_sai_tam_tel_type_attr_switch_enable_port_stats_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_switch_enable_port_stats_set"])
    def test_sai_tam_tel_type_attr_switch_enable_port_stats_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_switch_enable_port_stats_ingress_set")
    def test_sai_tam_tel_type_attr_switch_enable_port_stats_ingress_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_INGRESS", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_switch_enable_port_stats_ingress_set"])
    def test_sai_tam_tel_type_attr_switch_enable_port_stats_ingress_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_INGRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_switch_enable_port_stats_egress_set")
    def test_sai_tam_tel_type_attr_switch_enable_port_stats_egress_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_EGRESS", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_switch_enable_port_stats_egress_set"])
    def test_sai_tam_tel_type_attr_switch_enable_port_stats_egress_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_EGRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_switch_enable_virtual_queue_stats_set")
    def test_sai_tam_tel_type_attr_switch_enable_virtual_queue_stats_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_VIRTUAL_QUEUE_STATS", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_switch_enable_virtual_queue_stats_set"])
    def test_sai_tam_tel_type_attr_switch_enable_virtual_queue_stats_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_VIRTUAL_QUEUE_STATS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_switch_enable_output_queue_stats_set")
    def test_sai_tam_tel_type_attr_switch_enable_output_queue_stats_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_OUTPUT_QUEUE_STATS", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_switch_enable_output_queue_stats_set"])
    def test_sai_tam_tel_type_attr_switch_enable_output_queue_stats_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_OUTPUT_QUEUE_STATS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_switch_enable_mmu_stats_set")
    def test_sai_tam_tel_type_attr_switch_enable_mmu_stats_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_MMU_STATS", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_switch_enable_mmu_stats_set"])
    def test_sai_tam_tel_type_attr_switch_enable_mmu_stats_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_MMU_STATS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_switch_enable_fabric_stats_set")
    def test_sai_tam_tel_type_attr_switch_enable_fabric_stats_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FABRIC_STATS", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_switch_enable_fabric_stats_set"])
    def test_sai_tam_tel_type_attr_switch_enable_fabric_stats_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FABRIC_STATS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_switch_enable_filter_stats_set")
    def test_sai_tam_tel_type_attr_switch_enable_filter_stats_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FILTER_STATS", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_switch_enable_filter_stats_set"])
    def test_sai_tam_tel_type_attr_switch_enable_filter_stats_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FILTER_STATS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_switch_enable_resource_utilization_stats_set")
    def test_sai_tam_tel_type_attr_switch_enable_resource_utilization_stats_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_RESOURCE_UTILIZATION_STATS", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_switch_enable_resource_utilization_stats_set"])
    def test_sai_tam_tel_type_attr_switch_enable_resource_utilization_stats_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_RESOURCE_UTILIZATION_STATS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_fabric_q_set")
    def test_sai_tam_tel_type_attr_fabric_q_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_FABRIC_Q", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_fabric_q_set"])
    def test_sai_tam_tel_type_attr_fabric_q_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_FABRIC_Q"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_ne_enable_set")
    def test_sai_tam_tel_type_attr_ne_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_NE_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_ne_enable_set"])
    def test_sai_tam_tel_type_attr_ne_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_NE_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_dscp_value_set")
    def test_sai_tam_tel_type_attr_dscp_value_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_DSCP_VALUE", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_dscp_value_set"])
    def test_sai_tam_tel_type_attr_dscp_value_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_DSCP_VALUE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_tel_type_attr_math_func_set")
    def test_sai_tam_tel_type_attr_math_func_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_MATH_FUNC", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_tel_type_attr_math_func_set"])
    def test_sai_tam_tel_type_attr_math_func_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TEL_TYPE_ATTR_MATH_FUNC"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_telemetry_attr_tam_type_list_set")
    def test_sai_tam_telemetry_attr_tam_type_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TELEMETRY_ATTR_TAM_TYPE_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_telemetry_attr_tam_type_list_set"])
    def test_sai_tam_telemetry_attr_tam_type_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TELEMETRY_ATTR_TAM_TYPE_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_telemetry_attr_tam_reporting_unit_set")
    def test_sai_tam_telemetry_attr_tam_reporting_unit_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TELEMETRY_ATTR_TAM_REPORTING_UNIT", 'SAI_TAM_REPORTING_UNIT_SEC']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_telemetry_attr_tam_reporting_unit_set"])
    def test_sai_tam_telemetry_attr_tam_reporting_unit_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TELEMETRY_ATTR_TAM_REPORTING_UNIT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_TAM_REPORTING_UNIT_SEC', 'Get error, expected SAI_TAM_REPORTING_UNIT_SEC but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_telemetry_attr_reporting_interval_set")
    def test_sai_tam_telemetry_attr_reporting_interval_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TELEMETRY_ATTR_REPORTING_INTERVAL", '1']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_telemetry_attr_reporting_interval_set"])
    def test_sai_tam_telemetry_attr_reporting_interval_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TELEMETRY_ATTR_REPORTING_INTERVAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '1', 'Get error, expected 1 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_transport_attr_src_port_set")
    def test_sai_tam_transport_attr_src_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TRANSPORT_ATTR_SRC_PORT", '31337']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_transport_attr_src_port_set"])
    def test_sai_tam_transport_attr_src_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TRANSPORT_ATTR_SRC_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '31337', 'Get error, expected 31337 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_transport_attr_dst_port_set")
    def test_sai_tam_transport_attr_dst_port_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TRANSPORT_ATTR_DST_PORT", '31337']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_transport_attr_dst_port_set"])
    def test_sai_tam_transport_attr_dst_port_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TRANSPORT_ATTR_DST_PORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '31337', 'Get error, expected 31337 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_transport_attr_transport_auth_type_set")
    def test_sai_tam_transport_attr_transport_auth_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TRANSPORT_ATTR_TRANSPORT_AUTH_TYPE", 'SAI_TAM_TRANSPORT_AUTH_TYPE_NONE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_transport_attr_transport_auth_type_set"])
    def test_sai_tam_transport_attr_transport_auth_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TRANSPORT_ATTR_TRANSPORT_AUTH_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_TAM_TRANSPORT_AUTH_TYPE_NONE', 'Get error, expected SAI_TAM_TRANSPORT_AUTH_TYPE_NONE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tam_transport_attr_mtu_set")
    def test_sai_tam_transport_attr_mtu_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TAM_TRANSPORT_ATTR_MTU", '1500']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tam_transport_attr_mtu_set"])
    def test_sai_tam_transport_attr_mtu_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TAM_TRANSPORT_ATTR_MTU"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '1500', 'Get error, expected 1500 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_encap_ttl_mode_set")
    def test_sai_tunnel_attr_encap_ttl_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_TTL_MODE", 'SAI_TUNNEL_TTL_MODE_UNIFORM_MODEL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_encap_ttl_mode_set"])
    def test_sai_tunnel_attr_encap_ttl_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_TTL_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_TUNNEL_TTL_MODE_UNIFORM_MODEL', 'Get error, expected SAI_TUNNEL_TTL_MODE_UNIFORM_MODEL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_encap_ttl_val_set")
    def test_sai_tunnel_attr_encap_ttl_val_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_TTL_VAL", '255']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_encap_ttl_val_set"])
    def test_sai_tunnel_attr_encap_ttl_val_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_TTL_VAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '255', 'Get error, expected 255 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_encap_dscp_mode_set")
    def test_sai_tunnel_attr_encap_dscp_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_DSCP_MODE", 'SAI_TUNNEL_DSCP_MODE_UNIFORM_MODEL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_encap_dscp_mode_set"])
    def test_sai_tunnel_attr_encap_dscp_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_DSCP_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_TUNNEL_DSCP_MODE_UNIFORM_MODEL', 'Get error, expected SAI_TUNNEL_DSCP_MODE_UNIFORM_MODEL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_encap_dscp_val_set")
    def test_sai_tunnel_attr_encap_dscp_val_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_DSCP_VAL", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_encap_dscp_val_set"])
    def test_sai_tunnel_attr_encap_dscp_val_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_DSCP_VAL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_encap_gre_key_set")
    def test_sai_tunnel_attr_encap_gre_key_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_GRE_KEY", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_encap_gre_key_set"])
    def test_sai_tunnel_attr_encap_gre_key_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_GRE_KEY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_decap_ttl_mode_set")
    def test_sai_tunnel_attr_decap_ttl_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_DECAP_TTL_MODE", 'SAI_TUNNEL_TTL_MODE_UNIFORM_MODEL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_decap_ttl_mode_set"])
    def test_sai_tunnel_attr_decap_ttl_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_DECAP_TTL_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_TUNNEL_TTL_MODE_UNIFORM_MODEL', 'Get error, expected SAI_TUNNEL_TTL_MODE_UNIFORM_MODEL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_decap_dscp_mode_set")
    def test_sai_tunnel_attr_decap_dscp_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_DECAP_DSCP_MODE", 'SAI_TUNNEL_DSCP_MODE_UNIFORM_MODEL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_decap_dscp_mode_set"])
    def test_sai_tunnel_attr_decap_dscp_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_DECAP_DSCP_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_TUNNEL_DSCP_MODE_UNIFORM_MODEL', 'Get error, expected SAI_TUNNEL_DSCP_MODE_UNIFORM_MODEL but got %s' %  r_value


    
    def test_sai_tunnel_attr_term_table_entry_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_TERM_TABLE_ENTRY_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_loopback_packet_action_set")
    def test_sai_tunnel_attr_loopback_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION", 'SAI_PACKET_ACTION_FORWARD']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_loopback_packet_action_set"])
    def test_sai_tunnel_attr_loopback_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_FORWARD', 'Get error, expected SAI_PACKET_ACTION_FORWARD but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_vxlan_udp_sport_mode_set")
    def test_sai_tunnel_attr_vxlan_udp_sport_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_MODE", 'SAI_TUNNEL_VXLAN_UDP_SPORT_MODE_EPHEMERAL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_vxlan_udp_sport_mode_set"])
    def test_sai_tunnel_attr_vxlan_udp_sport_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_TUNNEL_VXLAN_UDP_SPORT_MODE_EPHEMERAL', 'Get error, expected SAI_TUNNEL_VXLAN_UDP_SPORT_MODE_EPHEMERAL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_vxlan_udp_sport_set")
    def test_sai_tunnel_attr_vxlan_udp_sport_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_vxlan_udp_sport_set"])
    def test_sai_tunnel_attr_vxlan_udp_sport_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_vxlan_udp_sport_mask_set")
    def test_sai_tunnel_attr_vxlan_udp_sport_mask_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_vxlan_udp_sport_mask_set"])
    def test_sai_tunnel_attr_vxlan_udp_sport_mask_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_sa_index_set")
    def test_sai_tunnel_attr_sa_index_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_SA_INDEX", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_sa_index_set"])
    def test_sai_tunnel_attr_sa_index_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_SA_INDEX"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_ipsec_sa_port_list_set")
    def test_sai_tunnel_attr_ipsec_sa_port_list_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_IPSEC_SA_PORT_LIST", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_ipsec_sa_port_list_set"])
    def test_sai_tunnel_attr_ipsec_sa_port_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_IPSEC_SA_PORT_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_encap_qos_tc_and_color_to_dscp_map_set")
    def test_sai_tunnel_attr_encap_qos_tc_and_color_to_dscp_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_encap_qos_tc_and_color_to_dscp_map_set"])
    def test_sai_tunnel_attr_encap_qos_tc_and_color_to_dscp_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_encap_qos_tc_to_queue_map_set")
    def test_sai_tunnel_attr_encap_qos_tc_to_queue_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_encap_qos_tc_to_queue_map_set"])
    def test_sai_tunnel_attr_encap_qos_tc_to_queue_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_decap_qos_dscp_to_tc_map_set")
    def test_sai_tunnel_attr_decap_qos_dscp_to_tc_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_decap_qos_dscp_to_tc_map_set"])
    def test_sai_tunnel_attr_decap_qos_dscp_to_tc_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_decap_qos_tc_to_priority_group_map_set")
    def test_sai_tunnel_attr_decap_qos_tc_to_priority_group_map_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_decap_qos_tc_to_priority_group_map_set"])
    def test_sai_tunnel_attr_decap_qos_tc_to_priority_group_map_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_attr_vxlan_udp_sport_security_set")
    def test_sai_tunnel_attr_vxlan_udp_sport_security_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_SECURITY", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_attr_vxlan_udp_sport_security_set"])
    def test_sai_tunnel_attr_vxlan_udp_sport_security_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_SECURITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    
    def test_sai_tunnel_map_attr_entry_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_MAP_ATTR_ENTRY_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    
    def test_sai_tunnel_term_table_entry_attr_ip_addr_family_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_IP_ADDR_FAMILY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_tunnel_term_table_entry_attr_ipsec_verified_set")
    def test_sai_tunnel_term_table_entry_attr_ipsec_verified_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_IPSEC_VERIFIED", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_tunnel_term_table_entry_attr_ipsec_verified_set"])
    def test_sai_tunnel_term_table_entry_attr_ipsec_verified_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_IPSEC_VERIFIED"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_udf_attr_base_set")
    def test_sai_udf_attr_base_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_UDF_ATTR_BASE", 'SAI_UDF_BASE_L2']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_udf_attr_base_set"])
    def test_sai_udf_attr_base_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_UDF_ATTR_BASE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_UDF_BASE_L2', 'Get error, expected SAI_UDF_BASE_L2 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_udf_attr_hash_mask_set")
    def test_sai_udf_attr_hash_mask_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_UDF_ATTR_HASH_MASK", 'const']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_udf_attr_hash_mask_set"])
    def test_sai_udf_attr_hash_mask_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_UDF_ATTR_HASH_MASK"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'const', 'Get error, expected const but got %s' %  r_value


    
    def test_sai_udf_group_attr_udf_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_UDF_GROUP_ATTR_UDF_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vip_entry_attr_action_set")
    def test_sai_vip_entry_attr_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VIP_ENTRY_ATTR_ACTION", 'SAI_VIP_ENTRY_ACTION_ACCEPT']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vip_entry_attr_action_set"])
    def test_sai_vip_entry_attr_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VIP_ENTRY_ATTR_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_VIP_ENTRY_ACTION_ACCEPT', 'Get error, expected SAI_VIP_ENTRY_ACTION_ACCEPT but got %s' %  r_value


    
    def test_sai_vip_entry_attr_ip_addr_family_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VIP_ENTRY_ATTR_IP_ADDR_FAMILY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_virtual_router_attr_admin_v4_state_set")
    def test_sai_virtual_router_attr_admin_v4_state_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V4_STATE", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_virtual_router_attr_admin_v4_state_set"])
    def test_sai_virtual_router_attr_admin_v4_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V4_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_virtual_router_attr_admin_v6_state_set")
    def test_sai_virtual_router_attr_admin_v6_state_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V6_STATE", 'true']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_virtual_router_attr_admin_v6_state_set"])
    def test_sai_virtual_router_attr_admin_v6_state_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V6_STATE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'true', 'Get error, expected true but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_virtual_router_attr_src_mac_address_set")
    def test_sai_virtual_router_attr_src_mac_address_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS", 'SAI_SWITCH_ATTR_SRC_MAC_ADDRESS']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_virtual_router_attr_src_mac_address_set"])
    def test_sai_virtual_router_attr_src_mac_address_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_SWITCH_ATTR_SRC_MAC_ADDRESS', 'Get error, expected SAI_SWITCH_ATTR_SRC_MAC_ADDRESS but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_virtual_router_attr_violation_ttl1_packet_action_set")
    def test_sai_virtual_router_attr_violation_ttl1_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_TTL1_PACKET_ACTION", 'SAI_PACKET_ACTION_TRAP']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_virtual_router_attr_violation_ttl1_packet_action_set"])
    def test_sai_virtual_router_attr_violation_ttl1_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_TTL1_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_TRAP', 'Get error, expected SAI_PACKET_ACTION_TRAP but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_virtual_router_attr_violation_ip_options_packet_action_set")
    def test_sai_virtual_router_attr_violation_ip_options_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_IP_OPTIONS_PACKET_ACTION", 'SAI_PACKET_ACTION_TRAP']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_virtual_router_attr_violation_ip_options_packet_action_set"])
    def test_sai_virtual_router_attr_violation_ip_options_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_IP_OPTIONS_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_TRAP', 'Get error, expected SAI_PACKET_ACTION_TRAP but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_virtual_router_attr_unknown_l3_multicast_packet_action_set")
    def test_sai_virtual_router_attr_unknown_l3_multicast_packet_action_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_UNKNOWN_L3_MULTICAST_PACKET_ACTION", 'SAI_PACKET_ACTION_DROP']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_virtual_router_attr_unknown_l3_multicast_packet_action_set"])
    def test_sai_virtual_router_attr_unknown_l3_multicast_packet_action_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_UNKNOWN_L3_MULTICAST_PACKET_ACTION"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_PACKET_ACTION_DROP', 'Get error, expected SAI_PACKET_ACTION_DROP but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_virtual_router_attr_label_set")
    def test_sai_virtual_router_attr_label_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_LABEL", '""']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_virtual_router_attr_label_set"])
    def test_sai_virtual_router_attr_label_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VIRTUAL_ROUTER_ATTR_LABEL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '""', 'Get error, expected "" but got %s' %  r_value


    
    def test_sai_vlan_attr_member_list_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_MEMBER_LIST"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'TODO', 'Get error, expected TODO but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_max_learned_addresses_set")
    def test_sai_vlan_attr_max_learned_addresses_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_MAX_LEARNED_ADDRESSES", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_max_learned_addresses_set"])
    def test_sai_vlan_attr_max_learned_addresses_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_MAX_LEARNED_ADDRESSES"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_stp_instance_set")
    def test_sai_vlan_attr_stp_instance_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_STP_INSTANCE", 'SAI_SWITCH_ATTR_DEFAULT_STP_INST_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_stp_instance_set"])
    def test_sai_vlan_attr_stp_instance_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_STP_INSTANCE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_SWITCH_ATTR_DEFAULT_STP_INST_ID', 'Get error, expected SAI_SWITCH_ATTR_DEFAULT_STP_INST_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_learn_disable_set")
    def test_sai_vlan_attr_learn_disable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_LEARN_DISABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_learn_disable_set"])
    def test_sai_vlan_attr_learn_disable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_LEARN_DISABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_ipv4_mcast_lookup_key_type_set")
    def test_sai_vlan_attr_ipv4_mcast_lookup_key_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_IPV4_MCAST_LOOKUP_KEY_TYPE", 'SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_MAC_DA']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_ipv4_mcast_lookup_key_type_set"])
    def test_sai_vlan_attr_ipv4_mcast_lookup_key_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_IPV4_MCAST_LOOKUP_KEY_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_MAC_DA', 'Get error, expected SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_MAC_DA but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_ipv6_mcast_lookup_key_type_set")
    def test_sai_vlan_attr_ipv6_mcast_lookup_key_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_IPV6_MCAST_LOOKUP_KEY_TYPE", 'SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_MAC_DA']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_ipv6_mcast_lookup_key_type_set"])
    def test_sai_vlan_attr_ipv6_mcast_lookup_key_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_IPV6_MCAST_LOOKUP_KEY_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_MAC_DA', 'Get error, expected SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_MAC_DA but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_unknown_non_ip_mcast_output_group_id_set")
    def test_sai_vlan_attr_unknown_non_ip_mcast_output_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_NON_IP_MCAST_OUTPUT_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_unknown_non_ip_mcast_output_group_id_set"])
    def test_sai_vlan_attr_unknown_non_ip_mcast_output_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_NON_IP_MCAST_OUTPUT_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_unknown_ipv4_mcast_output_group_id_set")
    def test_sai_vlan_attr_unknown_ipv4_mcast_output_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_IPV4_MCAST_OUTPUT_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_unknown_ipv4_mcast_output_group_id_set"])
    def test_sai_vlan_attr_unknown_ipv4_mcast_output_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_IPV4_MCAST_OUTPUT_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_unknown_ipv6_mcast_output_group_id_set")
    def test_sai_vlan_attr_unknown_ipv6_mcast_output_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_IPV6_MCAST_OUTPUT_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_unknown_ipv6_mcast_output_group_id_set"])
    def test_sai_vlan_attr_unknown_ipv6_mcast_output_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_IPV6_MCAST_OUTPUT_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_unknown_linklocal_mcast_output_group_id_set")
    def test_sai_vlan_attr_unknown_linklocal_mcast_output_group_id_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_LINKLOCAL_MCAST_OUTPUT_GROUP_ID", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_unknown_linklocal_mcast_output_group_id_set"])
    def test_sai_vlan_attr_unknown_linklocal_mcast_output_group_id_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_LINKLOCAL_MCAST_OUTPUT_GROUP_ID"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_ingress_acl_set")
    def test_sai_vlan_attr_ingress_acl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_INGRESS_ACL", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_ingress_acl_set"])
    def test_sai_vlan_attr_ingress_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_INGRESS_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_egress_acl_set")
    def test_sai_vlan_attr_egress_acl_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_EGRESS_ACL", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_egress_acl_set"])
    def test_sai_vlan_attr_egress_acl_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_EGRESS_ACL"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_meta_data_set")
    def test_sai_vlan_attr_meta_data_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_META_DATA", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_meta_data_set"])
    def test_sai_vlan_attr_meta_data_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_META_DATA"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_unknown_unicast_flood_control_type_set")
    def test_sai_vlan_attr_unknown_unicast_flood_control_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE", 'SAI_VLAN_FLOOD_CONTROL_TYPE_ALL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_unknown_unicast_flood_control_type_set"])
    def test_sai_vlan_attr_unknown_unicast_flood_control_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_VLAN_FLOOD_CONTROL_TYPE_ALL', 'Get error, expected SAI_VLAN_FLOOD_CONTROL_TYPE_ALL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_unknown_unicast_flood_group_set")
    def test_sai_vlan_attr_unknown_unicast_flood_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_unknown_unicast_flood_group_set"])
    def test_sai_vlan_attr_unknown_unicast_flood_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_unknown_multicast_flood_control_type_set")
    def test_sai_vlan_attr_unknown_multicast_flood_control_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE", 'SAI_VLAN_FLOOD_CONTROL_TYPE_ALL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_unknown_multicast_flood_control_type_set"])
    def test_sai_vlan_attr_unknown_multicast_flood_control_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_VLAN_FLOOD_CONTROL_TYPE_ALL', 'Get error, expected SAI_VLAN_FLOOD_CONTROL_TYPE_ALL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_unknown_multicast_flood_group_set")
    def test_sai_vlan_attr_unknown_multicast_flood_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_unknown_multicast_flood_group_set"])
    def test_sai_vlan_attr_unknown_multicast_flood_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_broadcast_flood_control_type_set")
    def test_sai_vlan_attr_broadcast_flood_control_type_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_BROADCAST_FLOOD_CONTROL_TYPE", 'SAI_VLAN_FLOOD_CONTROL_TYPE_ALL']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_broadcast_flood_control_type_set"])
    def test_sai_vlan_attr_broadcast_flood_control_type_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_BROADCAST_FLOOD_CONTROL_TYPE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_VLAN_FLOOD_CONTROL_TYPE_ALL', 'Get error, expected SAI_VLAN_FLOOD_CONTROL_TYPE_ALL but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_broadcast_flood_group_set")
    def test_sai_vlan_attr_broadcast_flood_group_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_BROADCAST_FLOOD_GROUP", 'SAI_NULL_OBJECT_ID']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_broadcast_flood_group_set"])
    def test_sai_vlan_attr_broadcast_flood_group_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_BROADCAST_FLOOD_GROUP"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_NULL_OBJECT_ID', 'Get error, expected SAI_NULL_OBJECT_ID but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_custom_igmp_snooping_enable_set")
    def test_sai_vlan_attr_custom_igmp_snooping_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_CUSTOM_IGMP_SNOOPING_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_custom_igmp_snooping_enable_set"])
    def test_sai_vlan_attr_custom_igmp_snooping_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_CUSTOM_IGMP_SNOOPING_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_attr_tam_object_set")
    def test_sai_vlan_attr_tam_object_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_ATTR_TAM_OBJECT", 'empty']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_attr_tam_object_set"])
    def test_sai_vlan_attr_tam_object_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_ATTR_TAM_OBJECT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'empty', 'Get error, expected empty but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vlan_member_attr_vlan_tagging_mode_set")
    def test_sai_vlan_member_attr_vlan_tagging_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VLAN_MEMBER_ATTR_VLAN_TAGGING_MODE", 'SAI_VLAN_TAGGING_MODE_UNTAGGED']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vlan_member_attr_vlan_tagging_mode_set"])
    def test_sai_vlan_member_attr_vlan_tagging_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VLAN_MEMBER_ATTR_VLAN_TAGGING_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_VLAN_TAGGING_MODE_UNTAGGED', 'Get error, expected SAI_VLAN_TAGGING_MODE_UNTAGGED but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_vnet_attr_vni_set")
    def test_sai_vnet_attr_vni_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_VNET_ATTR_VNI", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_vnet_attr_vni_set"])
    def test_sai_vnet_attr_vni_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_VNET_ATTR_VNI"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_green_enable_set")
    def test_sai_wred_attr_green_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_GREEN_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_green_enable_set"])
    def test_sai_wred_attr_green_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_GREEN_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_green_min_threshold_set")
    def test_sai_wred_attr_green_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_GREEN_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_green_min_threshold_set"])
    def test_sai_wred_attr_green_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_GREEN_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_green_max_threshold_set")
    def test_sai_wred_attr_green_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_GREEN_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_green_max_threshold_set"])
    def test_sai_wred_attr_green_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_GREEN_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_green_drop_probability_set")
    def test_sai_wred_attr_green_drop_probability_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_GREEN_DROP_PROBABILITY", '100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_green_drop_probability_set"])
    def test_sai_wred_attr_green_drop_probability_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_GREEN_DROP_PROBABILITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '100', 'Get error, expected 100 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_yellow_enable_set")
    def test_sai_wred_attr_yellow_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_YELLOW_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_yellow_enable_set"])
    def test_sai_wred_attr_yellow_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_YELLOW_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_yellow_min_threshold_set")
    def test_sai_wred_attr_yellow_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_yellow_min_threshold_set"])
    def test_sai_wred_attr_yellow_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_yellow_max_threshold_set")
    def test_sai_wred_attr_yellow_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_yellow_max_threshold_set"])
    def test_sai_wred_attr_yellow_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_yellow_drop_probability_set")
    def test_sai_wred_attr_yellow_drop_probability_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_YELLOW_DROP_PROBABILITY", '100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_yellow_drop_probability_set"])
    def test_sai_wred_attr_yellow_drop_probability_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_YELLOW_DROP_PROBABILITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '100', 'Get error, expected 100 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_red_enable_set")
    def test_sai_wred_attr_red_enable_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_RED_ENABLE", 'false']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_red_enable_set"])
    def test_sai_wred_attr_red_enable_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_RED_ENABLE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'false', 'Get error, expected false but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_red_min_threshold_set")
    def test_sai_wred_attr_red_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_RED_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_red_min_threshold_set"])
    def test_sai_wred_attr_red_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_RED_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_red_max_threshold_set")
    def test_sai_wred_attr_red_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_RED_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_red_max_threshold_set"])
    def test_sai_wred_attr_red_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_RED_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_red_drop_probability_set")
    def test_sai_wred_attr_red_drop_probability_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_RED_DROP_PROBABILITY", '100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_red_drop_probability_set"])
    def test_sai_wred_attr_red_drop_probability_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_RED_DROP_PROBABILITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '100', 'Get error, expected 100 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_weight_set")
    def test_sai_wred_attr_weight_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_WEIGHT", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_weight_set"])
    def test_sai_wred_attr_weight_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_WEIGHT"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_mark_mode_set")
    def test_sai_wred_attr_ecn_mark_mode_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_MARK_MODE", 'SAI_ECN_MARK_MODE_NONE']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_mark_mode_set"])
    def test_sai_wred_attr_ecn_mark_mode_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_MARK_MODE"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == 'SAI_ECN_MARK_MODE_NONE', 'Get error, expected SAI_ECN_MARK_MODE_NONE but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_green_min_threshold_set")
    def test_sai_wred_attr_ecn_green_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_green_min_threshold_set"])
    def test_sai_wred_attr_ecn_green_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_green_max_threshold_set")
    def test_sai_wred_attr_ecn_green_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_green_max_threshold_set"])
    def test_sai_wred_attr_ecn_green_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_green_mark_probability_set")
    def test_sai_wred_attr_ecn_green_mark_probability_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_GREEN_MARK_PROBABILITY", '100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_green_mark_probability_set"])
    def test_sai_wred_attr_ecn_green_mark_probability_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_GREEN_MARK_PROBABILITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '100', 'Get error, expected 100 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_yellow_min_threshold_set")
    def test_sai_wred_attr_ecn_yellow_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_yellow_min_threshold_set"])
    def test_sai_wred_attr_ecn_yellow_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_yellow_max_threshold_set")
    def test_sai_wred_attr_ecn_yellow_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_yellow_max_threshold_set"])
    def test_sai_wred_attr_ecn_yellow_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_yellow_mark_probability_set")
    def test_sai_wred_attr_ecn_yellow_mark_probability_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_YELLOW_MARK_PROBABILITY", '100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_yellow_mark_probability_set"])
    def test_sai_wred_attr_ecn_yellow_mark_probability_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_YELLOW_MARK_PROBABILITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '100', 'Get error, expected 100 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_red_min_threshold_set")
    def test_sai_wred_attr_ecn_red_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_red_min_threshold_set"])
    def test_sai_wred_attr_ecn_red_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_red_max_threshold_set")
    def test_sai_wred_attr_ecn_red_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_red_max_threshold_set"])
    def test_sai_wred_attr_ecn_red_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_red_mark_probability_set")
    def test_sai_wred_attr_ecn_red_mark_probability_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_RED_MARK_PROBABILITY", '100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_red_mark_probability_set"])
    def test_sai_wred_attr_ecn_red_mark_probability_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_RED_MARK_PROBABILITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '100', 'Get error, expected 100 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_color_unaware_min_threshold_set")
    def test_sai_wred_attr_ecn_color_unaware_min_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_color_unaware_min_threshold_set"])
    def test_sai_wred_attr_ecn_color_unaware_min_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_color_unaware_max_threshold_set")
    def test_sai_wred_attr_ecn_color_unaware_max_threshold_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_color_unaware_max_threshold_set"])
    def test_sai_wred_attr_ecn_color_unaware_max_threshold_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_color_unaware_mark_probability_set")
    def test_sai_wred_attr_ecn_color_unaware_mark_probability_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MARK_PROBABILITY", '100']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_color_unaware_mark_probability_set"])
    def test_sai_wred_attr_ecn_color_unaware_mark_probability_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MARK_PROBABILITY"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '100', 'Get error, expected 100 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_green_min_threshold_64_set")
    def test_sai_wred_attr_green_min_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_GREEN_MIN_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_green_min_threshold_64_set"])
    def test_sai_wred_attr_green_min_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_GREEN_MIN_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_green_max_threshold_64_set")
    def test_sai_wred_attr_green_max_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_GREEN_MAX_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_green_max_threshold_64_set"])
    def test_sai_wred_attr_green_max_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_GREEN_MAX_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_yellow_min_threshold_64_set")
    def test_sai_wred_attr_yellow_min_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_yellow_min_threshold_64_set"])
    def test_sai_wred_attr_yellow_min_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_yellow_max_threshold_64_set")
    def test_sai_wred_attr_yellow_max_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_yellow_max_threshold_64_set"])
    def test_sai_wred_attr_yellow_max_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_red_min_threshold_64_set")
    def test_sai_wred_attr_red_min_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_RED_MIN_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_red_min_threshold_64_set"])
    def test_sai_wred_attr_red_min_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_RED_MIN_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_red_max_threshold_64_set")
    def test_sai_wred_attr_red_max_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_RED_MAX_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_red_max_threshold_64_set"])
    def test_sai_wred_attr_red_max_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_RED_MAX_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_green_min_threshold_64_set")
    def test_sai_wred_attr_ecn_green_min_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_green_min_threshold_64_set"])
    def test_sai_wred_attr_ecn_green_min_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_green_max_threshold_64_set")
    def test_sai_wred_attr_ecn_green_max_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_green_max_threshold_64_set"])
    def test_sai_wred_attr_ecn_green_max_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_yellow_min_threshold_64_set")
    def test_sai_wred_attr_ecn_yellow_min_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_yellow_min_threshold_64_set"])
    def test_sai_wred_attr_ecn_yellow_min_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_yellow_max_threshold_64_set")
    def test_sai_wred_attr_ecn_yellow_max_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_yellow_max_threshold_64_set"])
    def test_sai_wred_attr_ecn_yellow_max_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_red_min_threshold_64_set")
    def test_sai_wred_attr_ecn_red_min_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_red_min_threshold_64_set"])
    def test_sai_wred_attr_ecn_red_min_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_red_max_threshold_64_set")
    def test_sai_wred_attr_ecn_red_max_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_red_max_threshold_64_set"])
    def test_sai_wred_attr_ecn_red_max_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_color_unaware_min_threshold_64_set")
    def test_sai_wred_attr_ecn_color_unaware_min_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_color_unaware_min_threshold_64_set"])
    def test_sai_wred_attr_ecn_color_unaware_min_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    @pytest.mark.dependency(name="test_sai_wred_attr_ecn_color_unaware_max_threshold_64_set")
    def test_sai_wred_attr_ecn_color_unaware_max_threshold_64_set(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "set",
                "attributes": ["SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD_64", '0']
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        assert all([result == 'SAI_STATUS_SUCCESS' for result in results]), 'Set error'



    @pytest.mark.dependency(depends=["test_sai_wred_attr_ecn_color_unaware_max_threshold_64_set"])
    def test_sai_wred_attr_ecn_color_unaware_max_threshold_64_get(self, npu):

        commands = [
            {
                "name": "l2mc_entry_1",
                "op": "get",
                "attributes": ["SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD_64"]
            }
        ]
        results = [*npu.process_commands(commands)]
        print("======= SAI commands RETURN values get =======")
        pprint(results)
        r_value = results[0][0].value()
        print(r_value)
        assert r_value == '0', 'Get error, expected 0 but got %s' %  r_value


    def test_l2mc_entry_remove(self, npu):

        commands = [{'name': 'xxx_1', 'op': 'remove'}]

        results = [*npu.process_commands(commands)]
        print('======= SAI commands RETURN values remove =======')
        pprint(results)

